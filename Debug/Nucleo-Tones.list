
Nucleo-Tones.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000603c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080061c4  080061c4  000161c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800620c  0800620c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800620c  0800620c  0001620c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006214  08006214  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006214  08006214  00016214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006218  08006218  00016218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800621c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08006228  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08006228  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f75d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c24  00000000  00000000  0002f799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  000313c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  000321f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026463  00000000  00000000  00032f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010477  00000000  00000000  000593db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f09bb  00000000  00000000  00069852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015a20d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dfc  00000000  00000000  0015a260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080061ac 	.word	0x080061ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080061ac 	.word	0x080061ac

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2uiz>:
 8000a74:	004a      	lsls	r2, r1, #1
 8000a76:	d211      	bcs.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d211      	bcs.n	8000aa2 <__aeabi_d2uiz+0x2e>
 8000a7e:	d50d      	bpl.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d40e      	bmi.n	8000aa8 <__aeabi_d2uiz+0x34>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d102      	bne.n	8000aae <__aeabi_d2uiz+0x3a>
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	4770      	bx	lr
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <__aeabi_uldivmod>:
 8000ab4:	b953      	cbnz	r3, 8000acc <__aeabi_uldivmod+0x18>
 8000ab6:	b94a      	cbnz	r2, 8000acc <__aeabi_uldivmod+0x18>
 8000ab8:	2900      	cmp	r1, #0
 8000aba:	bf08      	it	eq
 8000abc:	2800      	cmpeq	r0, #0
 8000abe:	bf1c      	itt	ne
 8000ac0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ac4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac8:	f000 b974 	b.w	8000db4 <__aeabi_idiv0>
 8000acc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad4:	f000 f806 	bl	8000ae4 <__udivmoddi4>
 8000ad8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae0:	b004      	add	sp, #16
 8000ae2:	4770      	bx	lr

08000ae4 <__udivmoddi4>:
 8000ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae8:	9d08      	ldr	r5, [sp, #32]
 8000aea:	4604      	mov	r4, r0
 8000aec:	468e      	mov	lr, r1
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d14d      	bne.n	8000b8e <__udivmoddi4+0xaa>
 8000af2:	428a      	cmp	r2, r1
 8000af4:	4694      	mov	ip, r2
 8000af6:	d969      	bls.n	8000bcc <__udivmoddi4+0xe8>
 8000af8:	fab2 f282 	clz	r2, r2
 8000afc:	b152      	cbz	r2, 8000b14 <__udivmoddi4+0x30>
 8000afe:	fa01 f302 	lsl.w	r3, r1, r2
 8000b02:	f1c2 0120 	rsb	r1, r2, #32
 8000b06:	fa20 f101 	lsr.w	r1, r0, r1
 8000b0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b12:	4094      	lsls	r4, r2
 8000b14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b18:	0c21      	lsrs	r1, r4, #16
 8000b1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b1e:	fa1f f78c 	uxth.w	r7, ip
 8000b22:	fb08 e316 	mls	r3, r8, r6, lr
 8000b26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b2a:	fb06 f107 	mul.w	r1, r6, r7
 8000b2e:	4299      	cmp	r1, r3
 8000b30:	d90a      	bls.n	8000b48 <__udivmoddi4+0x64>
 8000b32:	eb1c 0303 	adds.w	r3, ip, r3
 8000b36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b3a:	f080 811f 	bcs.w	8000d7c <__udivmoddi4+0x298>
 8000b3e:	4299      	cmp	r1, r3
 8000b40:	f240 811c 	bls.w	8000d7c <__udivmoddi4+0x298>
 8000b44:	3e02      	subs	r6, #2
 8000b46:	4463      	add	r3, ip
 8000b48:	1a5b      	subs	r3, r3, r1
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b50:	fb08 3310 	mls	r3, r8, r0, r3
 8000b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b58:	fb00 f707 	mul.w	r7, r0, r7
 8000b5c:	42a7      	cmp	r7, r4
 8000b5e:	d90a      	bls.n	8000b76 <__udivmoddi4+0x92>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b68:	f080 810a 	bcs.w	8000d80 <__udivmoddi4+0x29c>
 8000b6c:	42a7      	cmp	r7, r4
 8000b6e:	f240 8107 	bls.w	8000d80 <__udivmoddi4+0x29c>
 8000b72:	4464      	add	r4, ip
 8000b74:	3802      	subs	r0, #2
 8000b76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7a:	1be4      	subs	r4, r4, r7
 8000b7c:	2600      	movs	r6, #0
 8000b7e:	b11d      	cbz	r5, 8000b88 <__udivmoddi4+0xa4>
 8000b80:	40d4      	lsrs	r4, r2
 8000b82:	2300      	movs	r3, #0
 8000b84:	e9c5 4300 	strd	r4, r3, [r5]
 8000b88:	4631      	mov	r1, r6
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	428b      	cmp	r3, r1
 8000b90:	d909      	bls.n	8000ba6 <__udivmoddi4+0xc2>
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	f000 80ef 	beq.w	8000d76 <__udivmoddi4+0x292>
 8000b98:	2600      	movs	r6, #0
 8000b9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b9e:	4630      	mov	r0, r6
 8000ba0:	4631      	mov	r1, r6
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	fab3 f683 	clz	r6, r3
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	d14a      	bne.n	8000c44 <__udivmoddi4+0x160>
 8000bae:	428b      	cmp	r3, r1
 8000bb0:	d302      	bcc.n	8000bb8 <__udivmoddi4+0xd4>
 8000bb2:	4282      	cmp	r2, r0
 8000bb4:	f200 80f9 	bhi.w	8000daa <__udivmoddi4+0x2c6>
 8000bb8:	1a84      	subs	r4, r0, r2
 8000bba:	eb61 0303 	sbc.w	r3, r1, r3
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	469e      	mov	lr, r3
 8000bc2:	2d00      	cmp	r5, #0
 8000bc4:	d0e0      	beq.n	8000b88 <__udivmoddi4+0xa4>
 8000bc6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bca:	e7dd      	b.n	8000b88 <__udivmoddi4+0xa4>
 8000bcc:	b902      	cbnz	r2, 8000bd0 <__udivmoddi4+0xec>
 8000bce:	deff      	udf	#255	; 0xff
 8000bd0:	fab2 f282 	clz	r2, r2
 8000bd4:	2a00      	cmp	r2, #0
 8000bd6:	f040 8092 	bne.w	8000cfe <__udivmoddi4+0x21a>
 8000bda:	eba1 010c 	sub.w	r1, r1, ip
 8000bde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000be2:	fa1f fe8c 	uxth.w	lr, ip
 8000be6:	2601      	movs	r6, #1
 8000be8:	0c20      	lsrs	r0, r4, #16
 8000bea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bee:	fb07 1113 	mls	r1, r7, r3, r1
 8000bf2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bf6:	fb0e f003 	mul.w	r0, lr, r3
 8000bfa:	4288      	cmp	r0, r1
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x12c>
 8000bfe:	eb1c 0101 	adds.w	r1, ip, r1
 8000c02:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x12a>
 8000c08:	4288      	cmp	r0, r1
 8000c0a:	f200 80cb 	bhi.w	8000da4 <__udivmoddi4+0x2c0>
 8000c0e:	4643      	mov	r3, r8
 8000c10:	1a09      	subs	r1, r1, r0
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c18:	fb07 1110 	mls	r1, r7, r0, r1
 8000c1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c20:	fb0e fe00 	mul.w	lr, lr, r0
 8000c24:	45a6      	cmp	lr, r4
 8000c26:	d908      	bls.n	8000c3a <__udivmoddi4+0x156>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c30:	d202      	bcs.n	8000c38 <__udivmoddi4+0x154>
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	f200 80bb 	bhi.w	8000dae <__udivmoddi4+0x2ca>
 8000c38:	4608      	mov	r0, r1
 8000c3a:	eba4 040e 	sub.w	r4, r4, lr
 8000c3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c42:	e79c      	b.n	8000b7e <__udivmoddi4+0x9a>
 8000c44:	f1c6 0720 	rsb	r7, r6, #32
 8000c48:	40b3      	lsls	r3, r6
 8000c4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c52:	fa20 f407 	lsr.w	r4, r0, r7
 8000c56:	fa01 f306 	lsl.w	r3, r1, r6
 8000c5a:	431c      	orrs	r4, r3
 8000c5c:	40f9      	lsrs	r1, r7
 8000c5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c62:	fa00 f306 	lsl.w	r3, r0, r6
 8000c66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c6a:	0c20      	lsrs	r0, r4, #16
 8000c6c:	fa1f fe8c 	uxth.w	lr, ip
 8000c70:	fb09 1118 	mls	r1, r9, r8, r1
 8000c74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c78:	fb08 f00e 	mul.w	r0, r8, lr
 8000c7c:	4288      	cmp	r0, r1
 8000c7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c82:	d90b      	bls.n	8000c9c <__udivmoddi4+0x1b8>
 8000c84:	eb1c 0101 	adds.w	r1, ip, r1
 8000c88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c8c:	f080 8088 	bcs.w	8000da0 <__udivmoddi4+0x2bc>
 8000c90:	4288      	cmp	r0, r1
 8000c92:	f240 8085 	bls.w	8000da0 <__udivmoddi4+0x2bc>
 8000c96:	f1a8 0802 	sub.w	r8, r8, #2
 8000c9a:	4461      	add	r1, ip
 8000c9c:	1a09      	subs	r1, r1, r0
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ca4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ca8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb0:	458e      	cmp	lr, r1
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x1e2>
 8000cb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cbc:	d26c      	bcs.n	8000d98 <__udivmoddi4+0x2b4>
 8000cbe:	458e      	cmp	lr, r1
 8000cc0:	d96a      	bls.n	8000d98 <__udivmoddi4+0x2b4>
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	4461      	add	r1, ip
 8000cc6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cca:	fba0 9402 	umull	r9, r4, r0, r2
 8000cce:	eba1 010e 	sub.w	r1, r1, lr
 8000cd2:	42a1      	cmp	r1, r4
 8000cd4:	46c8      	mov	r8, r9
 8000cd6:	46a6      	mov	lr, r4
 8000cd8:	d356      	bcc.n	8000d88 <__udivmoddi4+0x2a4>
 8000cda:	d053      	beq.n	8000d84 <__udivmoddi4+0x2a0>
 8000cdc:	b15d      	cbz	r5, 8000cf6 <__udivmoddi4+0x212>
 8000cde:	ebb3 0208 	subs.w	r2, r3, r8
 8000ce2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ce6:	fa01 f707 	lsl.w	r7, r1, r7
 8000cea:	fa22 f306 	lsr.w	r3, r2, r6
 8000cee:	40f1      	lsrs	r1, r6
 8000cf0:	431f      	orrs	r7, r3
 8000cf2:	e9c5 7100 	strd	r7, r1, [r5]
 8000cf6:	2600      	movs	r6, #0
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	f1c2 0320 	rsb	r3, r2, #32
 8000d02:	40d8      	lsrs	r0, r3
 8000d04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d08:	fa21 f303 	lsr.w	r3, r1, r3
 8000d0c:	4091      	lsls	r1, r2
 8000d0e:	4301      	orrs	r1, r0
 8000d10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d14:	fa1f fe8c 	uxth.w	lr, ip
 8000d18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d20:	0c0b      	lsrs	r3, r1, #16
 8000d22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d26:	fb00 f60e 	mul.w	r6, r0, lr
 8000d2a:	429e      	cmp	r6, r3
 8000d2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x260>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d3a:	d22f      	bcs.n	8000d9c <__udivmoddi4+0x2b8>
 8000d3c:	429e      	cmp	r6, r3
 8000d3e:	d92d      	bls.n	8000d9c <__udivmoddi4+0x2b8>
 8000d40:	3802      	subs	r0, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	1b9b      	subs	r3, r3, r6
 8000d46:	b289      	uxth	r1, r1
 8000d48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb06 f30e 	mul.w	r3, r6, lr
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x28a>
 8000d5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d60:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d64:	d216      	bcs.n	8000d94 <__udivmoddi4+0x2b0>
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d914      	bls.n	8000d94 <__udivmoddi4+0x2b0>
 8000d6a:	3e02      	subs	r6, #2
 8000d6c:	4461      	add	r1, ip
 8000d6e:	1ac9      	subs	r1, r1, r3
 8000d70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d74:	e738      	b.n	8000be8 <__udivmoddi4+0x104>
 8000d76:	462e      	mov	r6, r5
 8000d78:	4628      	mov	r0, r5
 8000d7a:	e705      	b.n	8000b88 <__udivmoddi4+0xa4>
 8000d7c:	4606      	mov	r6, r0
 8000d7e:	e6e3      	b.n	8000b48 <__udivmoddi4+0x64>
 8000d80:	4618      	mov	r0, r3
 8000d82:	e6f8      	b.n	8000b76 <__udivmoddi4+0x92>
 8000d84:	454b      	cmp	r3, r9
 8000d86:	d2a9      	bcs.n	8000cdc <__udivmoddi4+0x1f8>
 8000d88:	ebb9 0802 	subs.w	r8, r9, r2
 8000d8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d90:	3801      	subs	r0, #1
 8000d92:	e7a3      	b.n	8000cdc <__udivmoddi4+0x1f8>
 8000d94:	4646      	mov	r6, r8
 8000d96:	e7ea      	b.n	8000d6e <__udivmoddi4+0x28a>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	e794      	b.n	8000cc6 <__udivmoddi4+0x1e2>
 8000d9c:	4640      	mov	r0, r8
 8000d9e:	e7d1      	b.n	8000d44 <__udivmoddi4+0x260>
 8000da0:	46d0      	mov	r8, sl
 8000da2:	e77b      	b.n	8000c9c <__udivmoddi4+0x1b8>
 8000da4:	3b02      	subs	r3, #2
 8000da6:	4461      	add	r1, ip
 8000da8:	e732      	b.n	8000c10 <__udivmoddi4+0x12c>
 8000daa:	4630      	mov	r0, r6
 8000dac:	e709      	b.n	8000bc2 <__udivmoddi4+0xde>
 8000dae:	4464      	add	r4, ip
 8000db0:	3802      	subs	r0, #2
 8000db2:	e742      	b.n	8000c3a <__udivmoddi4+0x156>

08000db4 <__aeabi_idiv0>:
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop

08000db8 <SET_LED>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SET_LED(double f)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	ed87 0b00 	vstr	d0, [r7]
  // Turn off old LED if it's on
  if      (LED == 0) ;
 8000dc2:	4b73      	ldr	r3, [pc, #460]	; (8000f90 <SET_LED+0x1d8>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d048      	beq.n	8000e5c <SET_LED+0xa4>
  else if (LED == 1) LED_OFF(LED1_Port, LED1_Pin);
 8000dca:	4b71      	ldr	r3, [pc, #452]	; (8000f90 <SET_LED+0x1d8>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d105      	bne.n	8000dde <SET_LED+0x26>
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	486f      	ldr	r0, [pc, #444]	; (8000f94 <SET_LED+0x1dc>)
 8000dd8:	f002 f97a 	bl	80030d0 <HAL_GPIO_WritePin>
 8000ddc:	e03e      	b.n	8000e5c <SET_LED+0xa4>
  else if (LED == 2) LED_OFF(LED2_Port, LED2_Pin);
 8000dde:	4b6c      	ldr	r3, [pc, #432]	; (8000f90 <SET_LED+0x1d8>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d105      	bne.n	8000df2 <SET_LED+0x3a>
 8000de6:	2200      	movs	r2, #0
 8000de8:	2102      	movs	r1, #2
 8000dea:	486a      	ldr	r0, [pc, #424]	; (8000f94 <SET_LED+0x1dc>)
 8000dec:	f002 f970 	bl	80030d0 <HAL_GPIO_WritePin>
 8000df0:	e034      	b.n	8000e5c <SET_LED+0xa4>
  else if (LED == 3) LED_OFF(LED3_Port, LED3_Pin);
 8000df2:	4b67      	ldr	r3, [pc, #412]	; (8000f90 <SET_LED+0x1d8>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b03      	cmp	r3, #3
 8000df8:	d106      	bne.n	8000e08 <SET_LED+0x50>
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2180      	movs	r1, #128	; 0x80
 8000dfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e02:	f002 f965 	bl	80030d0 <HAL_GPIO_WritePin>
 8000e06:	e029      	b.n	8000e5c <SET_LED+0xa4>
  else if (LED == 4) LED_OFF(LED4_Port, LED4_Pin);
 8000e08:	4b61      	ldr	r3, [pc, #388]	; (8000f90 <SET_LED+0x1d8>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b04      	cmp	r3, #4
 8000e0e:	d105      	bne.n	8000e1c <SET_LED+0x64>
 8000e10:	2200      	movs	r2, #0
 8000e12:	2101      	movs	r1, #1
 8000e14:	4860      	ldr	r0, [pc, #384]	; (8000f98 <SET_LED+0x1e0>)
 8000e16:	f002 f95b 	bl	80030d0 <HAL_GPIO_WritePin>
 8000e1a:	e01f      	b.n	8000e5c <SET_LED+0xa4>
  else if (LED == 5) LED_OFF(LED5_Port, LED5_Pin);
 8000e1c:	4b5c      	ldr	r3, [pc, #368]	; (8000f90 <SET_LED+0x1d8>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b05      	cmp	r3, #5
 8000e22:	d106      	bne.n	8000e32 <SET_LED+0x7a>
 8000e24:	2200      	movs	r2, #0
 8000e26:	2110      	movs	r1, #16
 8000e28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2c:	f002 f950 	bl	80030d0 <HAL_GPIO_WritePin>
 8000e30:	e014      	b.n	8000e5c <SET_LED+0xa4>
  else if (LED == 6) LED_OFF(LED6_Port, LED6_Pin);
 8000e32:	4b57      	ldr	r3, [pc, #348]	; (8000f90 <SET_LED+0x1d8>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d106      	bne.n	8000e48 <SET_LED+0x90>
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2140      	movs	r1, #64	; 0x40
 8000e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e42:	f002 f945 	bl	80030d0 <HAL_GPIO_WritePin>
 8000e46:	e009      	b.n	8000e5c <SET_LED+0xa4>
  else if (LED == 7) LED_OFF(LED7_Port, LED7_Pin);
 8000e48:	4b51      	ldr	r3, [pc, #324]	; (8000f90 <SET_LED+0x1d8>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b07      	cmp	r3, #7
 8000e4e:	d105      	bne.n	8000e5c <SET_LED+0xa4>
 8000e50:	2200      	movs	r2, #0
 8000e52:	2101      	movs	r1, #1
 8000e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e58:	f002 f93a 	bl	80030d0 <HAL_GPIO_WritePin>

  LED_OFF(LED8_Port, LED8_Pin);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2120      	movs	r1, #32
 8000e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e64:	f002 f934 	bl	80030d0 <HAL_GPIO_WritePin>

  if (f == REST_FREQ) return;
 8000e68:	a337      	add	r3, pc, #220	; (adr r3, 8000f48 <SET_LED+0x190>)
 8000e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e72:	f7ff fdcd 	bl	8000a10 <__aeabi_dcmpeq>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f040 862d 	bne.w	8001ad8 <SET_LED+0xd20>

  // Turn on new LED depending on note
  if (f == C0 || f == C1 || f == C2 || f == C3 || f == C4 || f == C5 || f == C6 || f == C7 || f == C8){
 8000e7e:	a334      	add	r3, pc, #208	; (adr r3, 8000f50 <SET_LED+0x198>)
 8000e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e88:	f7ff fdc2 	bl	8000a10 <__aeabi_dcmpeq>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d14f      	bne.n	8000f32 <SET_LED+0x17a>
 8000e92:	a331      	add	r3, pc, #196	; (adr r3, 8000f58 <SET_LED+0x1a0>)
 8000e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e9c:	f7ff fdb8 	bl	8000a10 <__aeabi_dcmpeq>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d145      	bne.n	8000f32 <SET_LED+0x17a>
 8000ea6:	a32e      	add	r3, pc, #184	; (adr r3, 8000f60 <SET_LED+0x1a8>)
 8000ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000eb0:	f7ff fdae 	bl	8000a10 <__aeabi_dcmpeq>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d13b      	bne.n	8000f32 <SET_LED+0x17a>
 8000eba:	a32b      	add	r3, pc, #172	; (adr r3, 8000f68 <SET_LED+0x1b0>)
 8000ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ec4:	f7ff fda4 	bl	8000a10 <__aeabi_dcmpeq>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d131      	bne.n	8000f32 <SET_LED+0x17a>
 8000ece:	a328      	add	r3, pc, #160	; (adr r3, 8000f70 <SET_LED+0x1b8>)
 8000ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ed8:	f7ff fd9a 	bl	8000a10 <__aeabi_dcmpeq>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d127      	bne.n	8000f32 <SET_LED+0x17a>
 8000ee2:	f04f 0200 	mov.w	r2, #0
 8000ee6:	4b2d      	ldr	r3, [pc, #180]	; (8000f9c <SET_LED+0x1e4>)
 8000ee8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000eec:	f7ff fd90 	bl	8000a10 <__aeabi_dcmpeq>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d11d      	bne.n	8000f32 <SET_LED+0x17a>
 8000ef6:	a320      	add	r3, pc, #128	; (adr r3, 8000f78 <SET_LED+0x1c0>)
 8000ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f00:	f7ff fd86 	bl	8000a10 <__aeabi_dcmpeq>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d113      	bne.n	8000f32 <SET_LED+0x17a>
 8000f0a:	a31d      	add	r3, pc, #116	; (adr r3, 8000f80 <SET_LED+0x1c8>)
 8000f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f14:	f7ff fd7c 	bl	8000a10 <__aeabi_dcmpeq>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d109      	bne.n	8000f32 <SET_LED+0x17a>
 8000f1e:	a31a      	add	r3, pc, #104	; (adr r3, 8000f88 <SET_LED+0x1d0>)
 8000f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f28:	f7ff fd72 	bl	8000a10 <__aeabi_dcmpeq>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d036      	beq.n	8000fa0 <SET_LED+0x1e8>
    LED_ON(LED1_Port, LED1_Pin);
 8000f32:	2201      	movs	r2, #1
 8000f34:	2101      	movs	r1, #1
 8000f36:	4817      	ldr	r0, [pc, #92]	; (8000f94 <SET_LED+0x1dc>)
 8000f38:	f002 f8ca 	bl	80030d0 <HAL_GPIO_WritePin>
    LED = 1;
 8000f3c:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <SET_LED+0x1d8>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]
 8000f42:	f000 bdca 	b.w	8001ada <SET_LED+0xd22>
 8000f46:	bf00      	nop
 8000f48:	00000000 	.word	0x00000000
 8000f4c:	40d86a00 	.word	0x40d86a00
 8000f50:	9999999a 	.word	0x9999999a
 8000f54:	40305999 	.word	0x40305999
 8000f58:	9999999a 	.word	0x9999999a
 8000f5c:	40405999 	.word	0x40405999
 8000f60:	70a3d70a 	.word	0x70a3d70a
 8000f64:	40505a3d 	.word	0x40505a3d
 8000f68:	851eb852 	.word	0x851eb852
 8000f6c:	406059eb 	.word	0x406059eb
 8000f70:	7ae147ae 	.word	0x7ae147ae
 8000f74:	40705a14 	.word	0x40705a14
 8000f78:	00000000 	.word	0x00000000
 8000f7c:	40905a00 	.word	0x40905a00
 8000f80:	00000000 	.word	0x00000000
 8000f84:	40a05a00 	.word	0x40a05a00
 8000f88:	8f5c28f6 	.word	0x8f5c28f6
 8000f8c:	40b05a02 	.word	0x40b05a02
 8000f90:	200000f8 	.word	0x200000f8
 8000f94:	48000800 	.word	0x48000800
 8000f98:	48000400 	.word	0x48000400
 8000f9c:	40805a00 	.word	0x40805a00
  }
  else if (f == CS0 || f == CS1 || f == CS2 || f == CS3 || f == CS4 || f == CS5 || f == CS6 || f == CS7 || f == CS8){
 8000fa0:	a3c1      	add	r3, pc, #772	; (adr r3, 80012a8 <SET_LED+0x4f0>)
 8000fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000faa:	f7ff fd31 	bl	8000a10 <__aeabi_dcmpeq>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d14f      	bne.n	8001054 <SET_LED+0x29c>
 8000fb4:	a3be      	add	r3, pc, #760	; (adr r3, 80012b0 <SET_LED+0x4f8>)
 8000fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fbe:	f7ff fd27 	bl	8000a10 <__aeabi_dcmpeq>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d145      	bne.n	8001054 <SET_LED+0x29c>
 8000fc8:	a3bb      	add	r3, pc, #748	; (adr r3, 80012b8 <SET_LED+0x500>)
 8000fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fd2:	f7ff fd1d 	bl	8000a10 <__aeabi_dcmpeq>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d13b      	bne.n	8001054 <SET_LED+0x29c>
 8000fdc:	a3b8      	add	r3, pc, #736	; (adr r3, 80012c0 <SET_LED+0x508>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fe6:	f7ff fd13 	bl	8000a10 <__aeabi_dcmpeq>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d131      	bne.n	8001054 <SET_LED+0x29c>
 8000ff0:	a3b5      	add	r3, pc, #724	; (adr r3, 80012c8 <SET_LED+0x510>)
 8000ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ffa:	f7ff fd09 	bl	8000a10 <__aeabi_dcmpeq>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d127      	bne.n	8001054 <SET_LED+0x29c>
 8001004:	a3b2      	add	r3, pc, #712	; (adr r3, 80012d0 <SET_LED+0x518>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800100e:	f7ff fcff 	bl	8000a10 <__aeabi_dcmpeq>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d11d      	bne.n	8001054 <SET_LED+0x29c>
 8001018:	a3af      	add	r3, pc, #700	; (adr r3, 80012d8 <SET_LED+0x520>)
 800101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001022:	f7ff fcf5 	bl	8000a10 <__aeabi_dcmpeq>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d113      	bne.n	8001054 <SET_LED+0x29c>
 800102c:	a3ac      	add	r3, pc, #688	; (adr r3, 80012e0 <SET_LED+0x528>)
 800102e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001032:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001036:	f7ff fceb 	bl	8000a10 <__aeabi_dcmpeq>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d109      	bne.n	8001054 <SET_LED+0x29c>
 8001040:	a3a9      	add	r3, pc, #676	; (adr r3, 80012e8 <SET_LED+0x530>)
 8001042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001046:	e9d7 0100 	ldrd	r0, r1, [r7]
 800104a:	f7ff fce1 	bl	8000a10 <__aeabi_dcmpeq>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d00f      	beq.n	8001074 <SET_LED+0x2bc>
    LED_ON(LED1_Port, LED1_Pin);
 8001054:	2201      	movs	r2, #1
 8001056:	2101      	movs	r1, #1
 8001058:	4891      	ldr	r0, [pc, #580]	; (80012a0 <SET_LED+0x4e8>)
 800105a:	f002 f839 	bl	80030d0 <HAL_GPIO_WritePin>
    LED_ON(LED8_Port, LED8_Pin);
 800105e:	2201      	movs	r2, #1
 8001060:	2120      	movs	r1, #32
 8001062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001066:	f002 f833 	bl	80030d0 <HAL_GPIO_WritePin>
    LED = 1;
 800106a:	4b8e      	ldr	r3, [pc, #568]	; (80012a4 <SET_LED+0x4ec>)
 800106c:	2201      	movs	r2, #1
 800106e:	701a      	strb	r2, [r3, #0]
 8001070:	f000 bd33 	b.w	8001ada <SET_LED+0xd22>
  }

  else if (f == D0 || f == D1 || f == D2 || f == D3 || f == D4 || f == D5 || f == D6 || f == D7 || f == D8){
 8001074:	a366      	add	r3, pc, #408	; (adr r3, 8001210 <SET_LED+0x458>)
 8001076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800107e:	f7ff fcc7 	bl	8000a10 <__aeabi_dcmpeq>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d14f      	bne.n	8001128 <SET_LED+0x370>
 8001088:	a363      	add	r3, pc, #396	; (adr r3, 8001218 <SET_LED+0x460>)
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001092:	f7ff fcbd 	bl	8000a10 <__aeabi_dcmpeq>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d145      	bne.n	8001128 <SET_LED+0x370>
 800109c:	a360      	add	r3, pc, #384	; (adr r3, 8001220 <SET_LED+0x468>)
 800109e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010a6:	f7ff fcb3 	bl	8000a10 <__aeabi_dcmpeq>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d13b      	bne.n	8001128 <SET_LED+0x370>
 80010b0:	a35d      	add	r3, pc, #372	; (adr r3, 8001228 <SET_LED+0x470>)
 80010b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010ba:	f7ff fca9 	bl	8000a10 <__aeabi_dcmpeq>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d131      	bne.n	8001128 <SET_LED+0x370>
 80010c4:	a35a      	add	r3, pc, #360	; (adr r3, 8001230 <SET_LED+0x478>)
 80010c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010ce:	f7ff fc9f 	bl	8000a10 <__aeabi_dcmpeq>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d127      	bne.n	8001128 <SET_LED+0x370>
 80010d8:	a357      	add	r3, pc, #348	; (adr r3, 8001238 <SET_LED+0x480>)
 80010da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010e2:	f7ff fc95 	bl	8000a10 <__aeabi_dcmpeq>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d11d      	bne.n	8001128 <SET_LED+0x370>
 80010ec:	a354      	add	r3, pc, #336	; (adr r3, 8001240 <SET_LED+0x488>)
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010f6:	f7ff fc8b 	bl	8000a10 <__aeabi_dcmpeq>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d113      	bne.n	8001128 <SET_LED+0x370>
 8001100:	a351      	add	r3, pc, #324	; (adr r3, 8001248 <SET_LED+0x490>)
 8001102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001106:	e9d7 0100 	ldrd	r0, r1, [r7]
 800110a:	f7ff fc81 	bl	8000a10 <__aeabi_dcmpeq>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d109      	bne.n	8001128 <SET_LED+0x370>
 8001114:	a34e      	add	r3, pc, #312	; (adr r3, 8001250 <SET_LED+0x498>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800111e:	f7ff fc77 	bl	8000a10 <__aeabi_dcmpeq>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d009      	beq.n	800113c <SET_LED+0x384>
    LED_ON(LED2_Port, LED2_Pin);
 8001128:	2201      	movs	r2, #1
 800112a:	2102      	movs	r1, #2
 800112c:	485c      	ldr	r0, [pc, #368]	; (80012a0 <SET_LED+0x4e8>)
 800112e:	f001 ffcf 	bl	80030d0 <HAL_GPIO_WritePin>
    LED = 2;
 8001132:	4b5c      	ldr	r3, [pc, #368]	; (80012a4 <SET_LED+0x4ec>)
 8001134:	2202      	movs	r2, #2
 8001136:	701a      	strb	r2, [r3, #0]
 8001138:	f000 bccf 	b.w	8001ada <SET_LED+0xd22>
  }
  else if(f == DS0 || f == DS1 || f == DS2 || f == DS3 || f == DS4 || f == DS5 || f == DS6 || f == DS7 || f == DS8){
 800113c:	a346      	add	r3, pc, #280	; (adr r3, 8001258 <SET_LED+0x4a0>)
 800113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001142:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001146:	f7ff fc63 	bl	8000a10 <__aeabi_dcmpeq>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d14f      	bne.n	80011f0 <SET_LED+0x438>
 8001150:	a343      	add	r3, pc, #268	; (adr r3, 8001260 <SET_LED+0x4a8>)
 8001152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001156:	e9d7 0100 	ldrd	r0, r1, [r7]
 800115a:	f7ff fc59 	bl	8000a10 <__aeabi_dcmpeq>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d145      	bne.n	80011f0 <SET_LED+0x438>
 8001164:	a340      	add	r3, pc, #256	; (adr r3, 8001268 <SET_LED+0x4b0>)
 8001166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800116e:	f7ff fc4f 	bl	8000a10 <__aeabi_dcmpeq>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d13b      	bne.n	80011f0 <SET_LED+0x438>
 8001178:	a33d      	add	r3, pc, #244	; (adr r3, 8001270 <SET_LED+0x4b8>)
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001182:	f7ff fc45 	bl	8000a10 <__aeabi_dcmpeq>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d131      	bne.n	80011f0 <SET_LED+0x438>
 800118c:	a33a      	add	r3, pc, #232	; (adr r3, 8001278 <SET_LED+0x4c0>)
 800118e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001192:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001196:	f7ff fc3b 	bl	8000a10 <__aeabi_dcmpeq>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d127      	bne.n	80011f0 <SET_LED+0x438>
 80011a0:	a337      	add	r3, pc, #220	; (adr r3, 8001280 <SET_LED+0x4c8>)
 80011a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011aa:	f7ff fc31 	bl	8000a10 <__aeabi_dcmpeq>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d11d      	bne.n	80011f0 <SET_LED+0x438>
 80011b4:	a334      	add	r3, pc, #208	; (adr r3, 8001288 <SET_LED+0x4d0>)
 80011b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011be:	f7ff fc27 	bl	8000a10 <__aeabi_dcmpeq>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d113      	bne.n	80011f0 <SET_LED+0x438>
 80011c8:	a331      	add	r3, pc, #196	; (adr r3, 8001290 <SET_LED+0x4d8>)
 80011ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011d2:	f7ff fc1d 	bl	8000a10 <__aeabi_dcmpeq>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d109      	bne.n	80011f0 <SET_LED+0x438>
 80011dc:	a32e      	add	r3, pc, #184	; (adr r3, 8001298 <SET_LED+0x4e0>)
 80011de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011e6:	f7ff fc13 	bl	8000a10 <__aeabi_dcmpeq>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d07f      	beq.n	80012f0 <SET_LED+0x538>
    LED_ON(LED2_Port, LED2_Pin);
 80011f0:	2201      	movs	r2, #1
 80011f2:	2102      	movs	r1, #2
 80011f4:	482a      	ldr	r0, [pc, #168]	; (80012a0 <SET_LED+0x4e8>)
 80011f6:	f001 ff6b 	bl	80030d0 <HAL_GPIO_WritePin>
    LED_ON(LED8_Port, LED8_Pin);
 80011fa:	2201      	movs	r2, #1
 80011fc:	2120      	movs	r1, #32
 80011fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001202:	f001 ff65 	bl	80030d0 <HAL_GPIO_WritePin>
    LED = 2;
 8001206:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <SET_LED+0x4ec>)
 8001208:	2202      	movs	r2, #2
 800120a:	701a      	strb	r2, [r3, #0]
 800120c:	f000 bc65 	b.w	8001ada <SET_LED+0xd22>
 8001210:	9999999a 	.word	0x9999999a
 8001214:	40325999 	.word	0x40325999
 8001218:	47ae147b 	.word	0x47ae147b
 800121c:	40425ae1 	.word	0x40425ae1
 8001220:	47ae147b 	.word	0x47ae147b
 8001224:	40525ae1 	.word	0x40525ae1
 8001228:	5c28f5c3 	.word	0x5c28f5c3
 800122c:	40625a8f 	.word	0x40625a8f
 8001230:	5c28f5c3 	.word	0x5c28f5c3
 8001234:	40725a8f 	.word	0x40725a8f
 8001238:	d70a3d71 	.word	0xd70a3d71
 800123c:	40825aa3 	.word	0x40825aa3
 8001240:	d70a3d71 	.word	0xd70a3d71
 8001244:	40925aa3 	.word	0x40925aa3
 8001248:	d70a3d71 	.word	0xd70a3d71
 800124c:	40a25aa3 	.word	0x40a25aa3
 8001250:	47ae147b 	.word	0x47ae147b
 8001254:	40b25aa1 	.word	0x40b25aa1
 8001258:	33333333 	.word	0x33333333
 800125c:	40337333 	.word	0x40337333
 8001260:	851eb852 	.word	0x851eb852
 8001264:	404371eb 	.word	0x404371eb
 8001268:	851eb852 	.word	0x851eb852
 800126c:	405371eb 	.word	0x405371eb
 8001270:	851eb852 	.word	0x851eb852
 8001274:	406371eb 	.word	0x406371eb
 8001278:	7ae147ae 	.word	0x7ae147ae
 800127c:	40737214 	.word	0x40737214
 8001280:	00000000 	.word	0x00000000
 8001284:	40837200 	.word	0x40837200
 8001288:	3d70a3d7 	.word	0x3d70a3d7
 800128c:	4093720a 	.word	0x4093720a
 8001290:	3d70a3d7 	.word	0x3d70a3d7
 8001294:	40a3720a 	.word	0x40a3720a
 8001298:	ae147ae1 	.word	0xae147ae1
 800129c:	40b37207 	.word	0x40b37207
 80012a0:	48000800 	.word	0x48000800
 80012a4:	200000f8 	.word	0x200000f8
 80012a8:	851eb852 	.word	0x851eb852
 80012ac:	403151eb 	.word	0x403151eb
 80012b0:	33333333 	.word	0x33333333
 80012b4:	40415333 	.word	0x40415333
 80012b8:	33333333 	.word	0x33333333
 80012bc:	40515333 	.word	0x40515333
 80012c0:	47ae147b 	.word	0x47ae147b
 80012c4:	406152e1 	.word	0x406152e1
 80012c8:	47ae147b 	.word	0x47ae147b
 80012cc:	407152e1 	.word	0x407152e1
 80012d0:	c28f5c29 	.word	0xc28f5c29
 80012d4:	408152f5 	.word	0x408152f5
 80012d8:	851eb852 	.word	0x851eb852
 80012dc:	409152eb 	.word	0x409152eb
 80012e0:	851eb852 	.word	0x851eb852
 80012e4:	40a152eb 	.word	0x40a152eb
 80012e8:	851eb852 	.word	0x851eb852
 80012ec:	40b152eb 	.word	0x40b152eb
  }

  else if (f == E0 || f == E1 || f == E2 || f == E3 || f == E4 || f == E5 || f == E6 || f == E7 || f == E8){
 80012f0:	a3bd      	add	r3, pc, #756	; (adr r3, 80015e8 <SET_LED+0x830>)
 80012f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012fa:	f7ff fb89 	bl	8000a10 <__aeabi_dcmpeq>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d14f      	bne.n	80013a4 <SET_LED+0x5ec>
 8001304:	a3ba      	add	r3, pc, #744	; (adr r3, 80015f0 <SET_LED+0x838>)
 8001306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800130e:	f7ff fb7f 	bl	8000a10 <__aeabi_dcmpeq>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d145      	bne.n	80013a4 <SET_LED+0x5ec>
 8001318:	a3b7      	add	r3, pc, #732	; (adr r3, 80015f8 <SET_LED+0x840>)
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001322:	f7ff fb75 	bl	8000a10 <__aeabi_dcmpeq>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d13b      	bne.n	80013a4 <SET_LED+0x5ec>
 800132c:	a3b4      	add	r3, pc, #720	; (adr r3, 8001600 <SET_LED+0x848>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001336:	f7ff fb6b 	bl	8000a10 <__aeabi_dcmpeq>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d131      	bne.n	80013a4 <SET_LED+0x5ec>
 8001340:	a3b1      	add	r3, pc, #708	; (adr r3, 8001608 <SET_LED+0x850>)
 8001342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001346:	e9d7 0100 	ldrd	r0, r1, [r7]
 800134a:	f7ff fb61 	bl	8000a10 <__aeabi_dcmpeq>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d127      	bne.n	80013a4 <SET_LED+0x5ec>
 8001354:	a3ae      	add	r3, pc, #696	; (adr r3, 8001610 <SET_LED+0x858>)
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800135e:	f7ff fb57 	bl	8000a10 <__aeabi_dcmpeq>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d11d      	bne.n	80013a4 <SET_LED+0x5ec>
 8001368:	a3ab      	add	r3, pc, #684	; (adr r3, 8001618 <SET_LED+0x860>)
 800136a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001372:	f7ff fb4d 	bl	8000a10 <__aeabi_dcmpeq>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d113      	bne.n	80013a4 <SET_LED+0x5ec>
 800137c:	a3a8      	add	r3, pc, #672	; (adr r3, 8001620 <SET_LED+0x868>)
 800137e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001382:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001386:	f7ff fb43 	bl	8000a10 <__aeabi_dcmpeq>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d109      	bne.n	80013a4 <SET_LED+0x5ec>
 8001390:	a3a5      	add	r3, pc, #660	; (adr r3, 8001628 <SET_LED+0x870>)
 8001392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001396:	e9d7 0100 	ldrd	r0, r1, [r7]
 800139a:	f7ff fb39 	bl	8000a10 <__aeabi_dcmpeq>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d009      	beq.n	80013b8 <SET_LED+0x600>
    LED_ON(LED3_Port, LED3_Pin);
 80013a4:	2201      	movs	r2, #1
 80013a6:	2180      	movs	r1, #128	; 0x80
 80013a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ac:	f001 fe90 	bl	80030d0 <HAL_GPIO_WritePin>
    LED = 3;
 80013b0:	4b8b      	ldr	r3, [pc, #556]	; (80015e0 <SET_LED+0x828>)
 80013b2:	2203      	movs	r2, #3
 80013b4:	701a      	strb	r2, [r3, #0]
 80013b6:	e390      	b.n	8001ada <SET_LED+0xd22>
  }

  else if (f == F0 || f == F1 || f == F2 || f == F3 || f == F4 || f == F5 || f == F6 || f == F7 || f == F8){
 80013b8:	a365      	add	r3, pc, #404	; (adr r3, 8001550 <SET_LED+0x798>)
 80013ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013c2:	f7ff fb25 	bl	8000a10 <__aeabi_dcmpeq>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d14f      	bne.n	800146c <SET_LED+0x6b4>
 80013cc:	a362      	add	r3, pc, #392	; (adr r3, 8001558 <SET_LED+0x7a0>)
 80013ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013d6:	f7ff fb1b 	bl	8000a10 <__aeabi_dcmpeq>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d145      	bne.n	800146c <SET_LED+0x6b4>
 80013e0:	a35f      	add	r3, pc, #380	; (adr r3, 8001560 <SET_LED+0x7a8>)
 80013e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013ea:	f7ff fb11 	bl	8000a10 <__aeabi_dcmpeq>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d13b      	bne.n	800146c <SET_LED+0x6b4>
 80013f4:	a35c      	add	r3, pc, #368	; (adr r3, 8001568 <SET_LED+0x7b0>)
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013fe:	f7ff fb07 	bl	8000a10 <__aeabi_dcmpeq>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d131      	bne.n	800146c <SET_LED+0x6b4>
 8001408:	a359      	add	r3, pc, #356	; (adr r3, 8001570 <SET_LED+0x7b8>)
 800140a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001412:	f7ff fafd 	bl	8000a10 <__aeabi_dcmpeq>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d127      	bne.n	800146c <SET_LED+0x6b4>
 800141c:	a356      	add	r3, pc, #344	; (adr r3, 8001578 <SET_LED+0x7c0>)
 800141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001422:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001426:	f7ff faf3 	bl	8000a10 <__aeabi_dcmpeq>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d11d      	bne.n	800146c <SET_LED+0x6b4>
 8001430:	a353      	add	r3, pc, #332	; (adr r3, 8001580 <SET_LED+0x7c8>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	e9d7 0100 	ldrd	r0, r1, [r7]
 800143a:	f7ff fae9 	bl	8000a10 <__aeabi_dcmpeq>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d113      	bne.n	800146c <SET_LED+0x6b4>
 8001444:	a350      	add	r3, pc, #320	; (adr r3, 8001588 <SET_LED+0x7d0>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800144e:	f7ff fadf 	bl	8000a10 <__aeabi_dcmpeq>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d109      	bne.n	800146c <SET_LED+0x6b4>
 8001458:	a34d      	add	r3, pc, #308	; (adr r3, 8001590 <SET_LED+0x7d8>)
 800145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001462:	f7ff fad5 	bl	8000a10 <__aeabi_dcmpeq>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d008      	beq.n	800147e <SET_LED+0x6c6>
    LED_ON(LED4_Port, LED4_Pin);
 800146c:	2201      	movs	r2, #1
 800146e:	2101      	movs	r1, #1
 8001470:	485c      	ldr	r0, [pc, #368]	; (80015e4 <SET_LED+0x82c>)
 8001472:	f001 fe2d 	bl	80030d0 <HAL_GPIO_WritePin>
    LED = 4;
 8001476:	4b5a      	ldr	r3, [pc, #360]	; (80015e0 <SET_LED+0x828>)
 8001478:	2204      	movs	r2, #4
 800147a:	701a      	strb	r2, [r3, #0]
 800147c:	e32d      	b.n	8001ada <SET_LED+0xd22>
  }
  else if(f == FS0 || f == FS1 || f == FS2 || f == FS3 || f == FS4 || f == FS5 || f == FS6 || f == FS7 || f == FS8){
 800147e:	a346      	add	r3, pc, #280	; (adr r3, 8001598 <SET_LED+0x7e0>)
 8001480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001484:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001488:	f7ff fac2 	bl	8000a10 <__aeabi_dcmpeq>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d14f      	bne.n	8001532 <SET_LED+0x77a>
 8001492:	a343      	add	r3, pc, #268	; (adr r3, 80015a0 <SET_LED+0x7e8>)
 8001494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001498:	e9d7 0100 	ldrd	r0, r1, [r7]
 800149c:	f7ff fab8 	bl	8000a10 <__aeabi_dcmpeq>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d145      	bne.n	8001532 <SET_LED+0x77a>
 80014a6:	a340      	add	r3, pc, #256	; (adr r3, 80015a8 <SET_LED+0x7f0>)
 80014a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014b0:	f7ff faae 	bl	8000a10 <__aeabi_dcmpeq>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d13b      	bne.n	8001532 <SET_LED+0x77a>
 80014ba:	a33d      	add	r3, pc, #244	; (adr r3, 80015b0 <SET_LED+0x7f8>)
 80014bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014c4:	f7ff faa4 	bl	8000a10 <__aeabi_dcmpeq>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d131      	bne.n	8001532 <SET_LED+0x77a>
 80014ce:	a33a      	add	r3, pc, #232	; (adr r3, 80015b8 <SET_LED+0x800>)
 80014d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014d8:	f7ff fa9a 	bl	8000a10 <__aeabi_dcmpeq>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d127      	bne.n	8001532 <SET_LED+0x77a>
 80014e2:	a337      	add	r3, pc, #220	; (adr r3, 80015c0 <SET_LED+0x808>)
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014ec:	f7ff fa90 	bl	8000a10 <__aeabi_dcmpeq>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d11d      	bne.n	8001532 <SET_LED+0x77a>
 80014f6:	a334      	add	r3, pc, #208	; (adr r3, 80015c8 <SET_LED+0x810>)
 80014f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001500:	f7ff fa86 	bl	8000a10 <__aeabi_dcmpeq>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d113      	bne.n	8001532 <SET_LED+0x77a>
 800150a:	a331      	add	r3, pc, #196	; (adr r3, 80015d0 <SET_LED+0x818>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001514:	f7ff fa7c 	bl	8000a10 <__aeabi_dcmpeq>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d109      	bne.n	8001532 <SET_LED+0x77a>
 800151e:	a32e      	add	r3, pc, #184	; (adr r3, 80015d8 <SET_LED+0x820>)
 8001520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001524:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001528:	f7ff fa72 	bl	8000a10 <__aeabi_dcmpeq>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d07e      	beq.n	8001630 <SET_LED+0x878>
    LED_ON(LED4_Port, LED4_Pin);
 8001532:	2201      	movs	r2, #1
 8001534:	2101      	movs	r1, #1
 8001536:	482b      	ldr	r0, [pc, #172]	; (80015e4 <SET_LED+0x82c>)
 8001538:	f001 fdca 	bl	80030d0 <HAL_GPIO_WritePin>
    LED_ON(LED8_Port, LED8_Pin);
 800153c:	2201      	movs	r2, #1
 800153e:	2120      	movs	r1, #32
 8001540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001544:	f001 fdc4 	bl	80030d0 <HAL_GPIO_WritePin>
    LED = 4;
 8001548:	4b25      	ldr	r3, [pc, #148]	; (80015e0 <SET_LED+0x828>)
 800154a:	2204      	movs	r2, #4
 800154c:	701a      	strb	r2, [r3, #0]
 800154e:	e2c4      	b.n	8001ada <SET_LED+0xd22>
 8001550:	e147ae14 	.word	0xe147ae14
 8001554:	4035d47a 	.word	0x4035d47a
 8001558:	33333333 	.word	0x33333333
 800155c:	4045d333 	.word	0x4045d333
 8001560:	0a3d70a4 	.word	0x0a3d70a4
 8001564:	4055d3d7 	.word	0x4055d3d7
 8001568:	1eb851ec 	.word	0x1eb851ec
 800156c:	4065d385 	.word	0x4065d385
 8001570:	147ae148 	.word	0x147ae148
 8001574:	4075d3ae 	.word	0x4075d3ae
 8001578:	147ae148 	.word	0x147ae148
 800157c:	4085d3ae 	.word	0x4085d3ae
 8001580:	d70a3d71 	.word	0xd70a3d71
 8001584:	4095d3a3 	.word	0x4095d3a3
 8001588:	f5c28f5c 	.word	0xf5c28f5c
 800158c:	40a5d3a8 	.word	0x40a5d3a8
 8001590:	66666666 	.word	0x66666666
 8001594:	40b5d3a6 	.word	0x40b5d3a6
 8001598:	51eb851f 	.word	0x51eb851f
 800159c:	40371eb8 	.word	0x40371eb8
 80015a0:	00000000 	.word	0x00000000
 80015a4:	40472000 	.word	0x40472000
 80015a8:	00000000 	.word	0x00000000
 80015ac:	40572000 	.word	0x40572000
 80015b0:	00000000 	.word	0x00000000
 80015b4:	40672000 	.word	0x40672000
 80015b8:	0a3d70a4 	.word	0x0a3d70a4
 80015bc:	40771fd7 	.word	0x40771fd7
 80015c0:	851eb852 	.word	0x851eb852
 80015c4:	40871feb 	.word	0x40871feb
 80015c8:	851eb852 	.word	0x851eb852
 80015cc:	40971feb 	.word	0x40971feb
 80015d0:	851eb852 	.word	0x851eb852
 80015d4:	40a71feb 	.word	0x40a71feb
 80015d8:	f5c28f5c 	.word	0xf5c28f5c
 80015dc:	40b71fe8 	.word	0x40b71fe8
 80015e0:	200000f8 	.word	0x200000f8
 80015e4:	48000400 	.word	0x48000400
 80015e8:	9999999a 	.word	0x9999999a
 80015ec:	40349999 	.word	0x40349999
 80015f0:	9999999a 	.word	0x9999999a
 80015f4:	40449999 	.word	0x40449999
 80015f8:	70a3d70a 	.word	0x70a3d70a
 80015fc:	40549a3d 	.word	0x40549a3d
 8001600:	851eb852 	.word	0x851eb852
 8001604:	406499eb 	.word	0x406499eb
 8001608:	7ae147ae 	.word	0x7ae147ae
 800160c:	40749a14 	.word	0x40749a14
 8001610:	00000000 	.word	0x00000000
 8001614:	40849a00 	.word	0x40849a00
 8001618:	3d70a3d7 	.word	0x3d70a3d7
 800161c:	40949a0a 	.word	0x40949a0a
 8001620:	3d70a3d7 	.word	0x3d70a3d7
 8001624:	40a49a0a 	.word	0x40a49a0a
 8001628:	3d70a3d7 	.word	0x3d70a3d7
 800162c:	40b49a0a 	.word	0x40b49a0a
  }

  else if (f == G0 || f == G1 || f == G2 || f == G3 || f == G4 || f == G5 || f == G6 || f == G7 || f == G8){
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	4bb2      	ldr	r3, [pc, #712]	; (8001900 <SET_LED+0xb48>)
 8001636:	e9d7 0100 	ldrd	r0, r1, [r7]
 800163a:	f7ff f9e9 	bl	8000a10 <__aeabi_dcmpeq>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d14f      	bne.n	80016e4 <SET_LED+0x92c>
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	4bae      	ldr	r3, [pc, #696]	; (8001904 <SET_LED+0xb4c>)
 800164a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800164e:	f7ff f9df 	bl	8000a10 <__aeabi_dcmpeq>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d145      	bne.n	80016e4 <SET_LED+0x92c>
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	4baa      	ldr	r3, [pc, #680]	; (8001908 <SET_LED+0xb50>)
 800165e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001662:	f7ff f9d5 	bl	8000a10 <__aeabi_dcmpeq>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d13b      	bne.n	80016e4 <SET_LED+0x92c>
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	4ba6      	ldr	r3, [pc, #664]	; (800190c <SET_LED+0xb54>)
 8001672:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001676:	f7ff f9cb 	bl	8000a10 <__aeabi_dcmpeq>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d131      	bne.n	80016e4 <SET_LED+0x92c>
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	4ba2      	ldr	r3, [pc, #648]	; (8001910 <SET_LED+0xb58>)
 8001686:	e9d7 0100 	ldrd	r0, r1, [r7]
 800168a:	f7ff f9c1 	bl	8000a10 <__aeabi_dcmpeq>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d127      	bne.n	80016e4 <SET_LED+0x92c>
 8001694:	a380      	add	r3, pc, #512	; (adr r3, 8001898 <SET_LED+0xae0>)
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800169e:	f7ff f9b7 	bl	8000a10 <__aeabi_dcmpeq>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d11d      	bne.n	80016e4 <SET_LED+0x92c>
 80016a8:	a37d      	add	r3, pc, #500	; (adr r3, 80018a0 <SET_LED+0xae8>)
 80016aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016b2:	f7ff f9ad 	bl	8000a10 <__aeabi_dcmpeq>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d113      	bne.n	80016e4 <SET_LED+0x92c>
 80016bc:	a37a      	add	r3, pc, #488	; (adr r3, 80018a8 <SET_LED+0xaf0>)
 80016be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016c6:	f7ff f9a3 	bl	8000a10 <__aeabi_dcmpeq>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d109      	bne.n	80016e4 <SET_LED+0x92c>
 80016d0:	a377      	add	r3, pc, #476	; (adr r3, 80018b0 <SET_LED+0xaf8>)
 80016d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016da:	f7ff f999 	bl	8000a10 <__aeabi_dcmpeq>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d009      	beq.n	80016f8 <SET_LED+0x940>
    LED_ON(LED5_Port, LED5_Pin);
 80016e4:	2201      	movs	r2, #1
 80016e6:	2110      	movs	r1, #16
 80016e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ec:	f001 fcf0 	bl	80030d0 <HAL_GPIO_WritePin>
    LED = 5;
 80016f0:	4b88      	ldr	r3, [pc, #544]	; (8001914 <SET_LED+0xb5c>)
 80016f2:	2205      	movs	r2, #5
 80016f4:	701a      	strb	r2, [r3, #0]
 80016f6:	e1f0      	b.n	8001ada <SET_LED+0xd22>
  }
  else if(f == GS0 || f == GS1 || f == GS2 || f == GS3 || f == GS4 || f == GS5 || f == GS6 || f == GS7 || f == GS8){
 80016f8:	a36f      	add	r3, pc, #444	; (adr r3, 80018b8 <SET_LED+0xb00>)
 80016fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001702:	f7ff f985 	bl	8000a10 <__aeabi_dcmpeq>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d14f      	bne.n	80017ac <SET_LED+0x9f4>
 800170c:	a36c      	add	r3, pc, #432	; (adr r3, 80018c0 <SET_LED+0xb08>)
 800170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001712:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001716:	f7ff f97b 	bl	8000a10 <__aeabi_dcmpeq>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d145      	bne.n	80017ac <SET_LED+0x9f4>
 8001720:	a369      	add	r3, pc, #420	; (adr r3, 80018c8 <SET_LED+0xb10>)
 8001722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001726:	e9d7 0100 	ldrd	r0, r1, [r7]
 800172a:	f7ff f971 	bl	8000a10 <__aeabi_dcmpeq>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d13b      	bne.n	80017ac <SET_LED+0x9f4>
 8001734:	a366      	add	r3, pc, #408	; (adr r3, 80018d0 <SET_LED+0xb18>)
 8001736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800173e:	f7ff f967 	bl	8000a10 <__aeabi_dcmpeq>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d131      	bne.n	80017ac <SET_LED+0x9f4>
 8001748:	a363      	add	r3, pc, #396	; (adr r3, 80018d8 <SET_LED+0xb20>)
 800174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001752:	f7ff f95d 	bl	8000a10 <__aeabi_dcmpeq>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d127      	bne.n	80017ac <SET_LED+0x9f4>
 800175c:	a360      	add	r3, pc, #384	; (adr r3, 80018e0 <SET_LED+0xb28>)
 800175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001762:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001766:	f7ff f953 	bl	8000a10 <__aeabi_dcmpeq>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d11d      	bne.n	80017ac <SET_LED+0x9f4>
 8001770:	a35d      	add	r3, pc, #372	; (adr r3, 80018e8 <SET_LED+0xb30>)
 8001772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001776:	e9d7 0100 	ldrd	r0, r1, [r7]
 800177a:	f7ff f949 	bl	8000a10 <__aeabi_dcmpeq>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d113      	bne.n	80017ac <SET_LED+0x9f4>
 8001784:	a35a      	add	r3, pc, #360	; (adr r3, 80018f0 <SET_LED+0xb38>)
 8001786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800178e:	f7ff f93f 	bl	8000a10 <__aeabi_dcmpeq>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d109      	bne.n	80017ac <SET_LED+0x9f4>
 8001798:	a357      	add	r3, pc, #348	; (adr r3, 80018f8 <SET_LED+0xb40>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017a2:	f7ff f935 	bl	8000a10 <__aeabi_dcmpeq>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00f      	beq.n	80017cc <SET_LED+0xa14>
    LED_ON(LED5_Port, LED5_Pin);
 80017ac:	2201      	movs	r2, #1
 80017ae:	2110      	movs	r1, #16
 80017b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b4:	f001 fc8c 	bl	80030d0 <HAL_GPIO_WritePin>
    LED_ON(LED8_Port, LED8_Pin);
 80017b8:	2201      	movs	r2, #1
 80017ba:	2120      	movs	r1, #32
 80017bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c0:	f001 fc86 	bl	80030d0 <HAL_GPIO_WritePin>
    LED = 5;
 80017c4:	4b53      	ldr	r3, [pc, #332]	; (8001914 <SET_LED+0xb5c>)
 80017c6:	2205      	movs	r2, #5
 80017c8:	701a      	strb	r2, [r3, #0]
 80017ca:	e186      	b.n	8001ada <SET_LED+0xd22>
  }

  else if (f == A0 || f == A1 || f == A2 || f == A3 || f == A4 || f == A5 || f == A6 || f == A7 || f == A8){
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	4b51      	ldr	r3, [pc, #324]	; (8001918 <SET_LED+0xb60>)
 80017d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017d6:	f7ff f91b 	bl	8000a10 <__aeabi_dcmpeq>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d14f      	bne.n	8001880 <SET_LED+0xac8>
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	4b4d      	ldr	r3, [pc, #308]	; (800191c <SET_LED+0xb64>)
 80017e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017ea:	f7ff f911 	bl	8000a10 <__aeabi_dcmpeq>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d145      	bne.n	8001880 <SET_LED+0xac8>
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	4b49      	ldr	r3, [pc, #292]	; (8001920 <SET_LED+0xb68>)
 80017fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017fe:	f7ff f907 	bl	8000a10 <__aeabi_dcmpeq>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d13b      	bne.n	8001880 <SET_LED+0xac8>
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	4b45      	ldr	r3, [pc, #276]	; (8001924 <SET_LED+0xb6c>)
 800180e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001812:	f7ff f8fd 	bl	8000a10 <__aeabi_dcmpeq>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d131      	bne.n	8001880 <SET_LED+0xac8>
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	4b41      	ldr	r3, [pc, #260]	; (8001928 <SET_LED+0xb70>)
 8001822:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001826:	f7ff f8f3 	bl	8000a10 <__aeabi_dcmpeq>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d127      	bne.n	8001880 <SET_LED+0xac8>
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	4b3d      	ldr	r3, [pc, #244]	; (800192c <SET_LED+0xb74>)
 8001836:	e9d7 0100 	ldrd	r0, r1, [r7]
 800183a:	f7ff f8e9 	bl	8000a10 <__aeabi_dcmpeq>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d11d      	bne.n	8001880 <SET_LED+0xac8>
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	4b39      	ldr	r3, [pc, #228]	; (8001930 <SET_LED+0xb78>)
 800184a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800184e:	f7ff f8df 	bl	8000a10 <__aeabi_dcmpeq>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d113      	bne.n	8001880 <SET_LED+0xac8>
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	4b35      	ldr	r3, [pc, #212]	; (8001934 <SET_LED+0xb7c>)
 800185e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001862:	f7ff f8d5 	bl	8000a10 <__aeabi_dcmpeq>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d109      	bne.n	8001880 <SET_LED+0xac8>
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	4b31      	ldr	r3, [pc, #196]	; (8001938 <SET_LED+0xb80>)
 8001872:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001876:	f7ff f8cb 	bl	8000a10 <__aeabi_dcmpeq>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d05d      	beq.n	800193c <SET_LED+0xb84>
    LED_ON(LED6_Port, LED6_Pin);
 8001880:	2201      	movs	r2, #1
 8001882:	2140      	movs	r1, #64	; 0x40
 8001884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001888:	f001 fc22 	bl	80030d0 <HAL_GPIO_WritePin>
    LED = 6;
 800188c:	4b21      	ldr	r3, [pc, #132]	; (8001914 <SET_LED+0xb5c>)
 800188e:	2206      	movs	r2, #6
 8001890:	701a      	strb	r2, [r3, #0]
 8001892:	e122      	b.n	8001ada <SET_LED+0xd22>
 8001894:	f3af 8000 	nop.w
 8001898:	851eb852 	.word	0x851eb852
 800189c:	40887feb 	.word	0x40887feb
 80018a0:	851eb852 	.word	0x851eb852
 80018a4:	40987feb 	.word	0x40987feb
 80018a8:	851eb852 	.word	0x851eb852
 80018ac:	40a87feb 	.word	0x40a87feb
 80018b0:	147ae148 	.word	0x147ae148
 80018b4:	40b87fee 	.word	0x40b87fee
 80018b8:	8f5c28f6 	.word	0x8f5c28f6
 80018bc:	4039f5c2 	.word	0x4039f5c2
 80018c0:	e147ae14 	.word	0xe147ae14
 80018c4:	4049f47a 	.word	0x4049f47a
 80018c8:	b851eb85 	.word	0xb851eb85
 80018cc:	4059f51e 	.word	0x4059f51e
 80018d0:	cccccccd 	.word	0xcccccccd
 80018d4:	4069f4cc 	.word	0x4069f4cc
 80018d8:	cccccccd 	.word	0xcccccccd
 80018dc:	4079f4cc 	.word	0x4079f4cc
 80018e0:	47ae147b 	.word	0x47ae147b
 80018e4:	4089f4e1 	.word	0x4089f4e1
 80018e8:	47ae147b 	.word	0x47ae147b
 80018ec:	4099f4e1 	.word	0x4099f4e1
 80018f0:	47ae147b 	.word	0x47ae147b
 80018f4:	40a9f4e1 	.word	0x40a9f4e1
 80018f8:	47ae147b 	.word	0x47ae147b
 80018fc:	40b9f4e1 	.word	0x40b9f4e1
 8001900:	40388000 	.word	0x40388000
 8001904:	40488000 	.word	0x40488000
 8001908:	40588000 	.word	0x40588000
 800190c:	40688000 	.word	0x40688000
 8001910:	40788000 	.word	0x40788000
 8001914:	200000f8 	.word	0x200000f8
 8001918:	403b8000 	.word	0x403b8000
 800191c:	404b8000 	.word	0x404b8000
 8001920:	405b8000 	.word	0x405b8000
 8001924:	406b8000 	.word	0x406b8000
 8001928:	407b8000 	.word	0x407b8000
 800192c:	408b8000 	.word	0x408b8000
 8001930:	409b8000 	.word	0x409b8000
 8001934:	40ab8000 	.word	0x40ab8000
 8001938:	40bb8000 	.word	0x40bb8000
  }
  else if (f == AS0 || f == AS1 || f == AS2 || f == AS3 || f == AS4 || f == AS5 || f == AS6 || f == AS7 || f == AS8){
 800193c:	a37b      	add	r3, pc, #492	; (adr r3, 8001b2c <SET_LED+0xd74>)
 800193e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001942:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001946:	f7ff f863 	bl	8000a10 <__aeabi_dcmpeq>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d14f      	bne.n	80019f0 <SET_LED+0xc38>
 8001950:	a378      	add	r3, pc, #480	; (adr r3, 8001b34 <SET_LED+0xd7c>)
 8001952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001956:	e9d7 0100 	ldrd	r0, r1, [r7]
 800195a:	f7ff f859 	bl	8000a10 <__aeabi_dcmpeq>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d145      	bne.n	80019f0 <SET_LED+0xc38>
 8001964:	a375      	add	r3, pc, #468	; (adr r3, 8001b3c <SET_LED+0xd84>)
 8001966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800196e:	f7ff f84f 	bl	8000a10 <__aeabi_dcmpeq>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d13b      	bne.n	80019f0 <SET_LED+0xc38>
 8001978:	a372      	add	r3, pc, #456	; (adr r3, 8001b44 <SET_LED+0xd8c>)
 800197a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001982:	f7ff f845 	bl	8000a10 <__aeabi_dcmpeq>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d131      	bne.n	80019f0 <SET_LED+0xc38>
 800198c:	a36f      	add	r3, pc, #444	; (adr r3, 8001b4c <SET_LED+0xd94>)
 800198e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001992:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001996:	f7ff f83b 	bl	8000a10 <__aeabi_dcmpeq>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d127      	bne.n	80019f0 <SET_LED+0xc38>
 80019a0:	a36c      	add	r3, pc, #432	; (adr r3, 8001b54 <SET_LED+0xd9c>)
 80019a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019aa:	f7ff f831 	bl	8000a10 <__aeabi_dcmpeq>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d11d      	bne.n	80019f0 <SET_LED+0xc38>
 80019b4:	a369      	add	r3, pc, #420	; (adr r3, 8001b5c <SET_LED+0xda4>)
 80019b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019be:	f7ff f827 	bl	8000a10 <__aeabi_dcmpeq>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d113      	bne.n	80019f0 <SET_LED+0xc38>
 80019c8:	a366      	add	r3, pc, #408	; (adr r3, 8001b64 <SET_LED+0xdac>)
 80019ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019d2:	f7ff f81d 	bl	8000a10 <__aeabi_dcmpeq>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d109      	bne.n	80019f0 <SET_LED+0xc38>
 80019dc:	a363      	add	r3, pc, #396	; (adr r3, 8001b6c <SET_LED+0xdb4>)
 80019de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019e6:	f7ff f813 	bl	8000a10 <__aeabi_dcmpeq>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00f      	beq.n	8001a10 <SET_LED+0xc58>
    LED_ON(LED6_Port, LED6_Pin);
 80019f0:	2201      	movs	r2, #1
 80019f2:	2140      	movs	r1, #64	; 0x40
 80019f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f8:	f001 fb6a 	bl	80030d0 <HAL_GPIO_WritePin>
    LED_ON(LED8_Port, LED8_Pin);
 80019fc:	2201      	movs	r2, #1
 80019fe:	2120      	movs	r1, #32
 8001a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a04:	f001 fb64 	bl	80030d0 <HAL_GPIO_WritePin>
    LED = 6;
 8001a08:	4b47      	ldr	r3, [pc, #284]	; (8001b28 <SET_LED+0xd70>)
 8001a0a:	2206      	movs	r2, #6
 8001a0c:	701a      	strb	r2, [r3, #0]
 8001a0e:	e064      	b.n	8001ada <SET_LED+0xd22>
  }

  else if (f == B0 || f == B1 || f == B2 || f == B3 || f == B4 || f == B5 || f == B6 || f == B7 || f == B8){
 8001a10:	a333      	add	r3, pc, #204	; (adr r3, 8001ae0 <SET_LED+0xd28>)
 8001a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a1a:	f7fe fff9 	bl	8000a10 <__aeabi_dcmpeq>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d14f      	bne.n	8001ac4 <SET_LED+0xd0c>
 8001a24:	a330      	add	r3, pc, #192	; (adr r3, 8001ae8 <SET_LED+0xd30>)
 8001a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a2e:	f7fe ffef 	bl	8000a10 <__aeabi_dcmpeq>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d145      	bne.n	8001ac4 <SET_LED+0xd0c>
 8001a38:	a32d      	add	r3, pc, #180	; (adr r3, 8001af0 <SET_LED+0xd38>)
 8001a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a42:	f7fe ffe5 	bl	8000a10 <__aeabi_dcmpeq>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d13b      	bne.n	8001ac4 <SET_LED+0xd0c>
 8001a4c:	a32a      	add	r3, pc, #168	; (adr r3, 8001af8 <SET_LED+0xd40>)
 8001a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a56:	f7fe ffdb 	bl	8000a10 <__aeabi_dcmpeq>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d131      	bne.n	8001ac4 <SET_LED+0xd0c>
 8001a60:	a327      	add	r3, pc, #156	; (adr r3, 8001b00 <SET_LED+0xd48>)
 8001a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a6a:	f7fe ffd1 	bl	8000a10 <__aeabi_dcmpeq>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d127      	bne.n	8001ac4 <SET_LED+0xd0c>
 8001a74:	a324      	add	r3, pc, #144	; (adr r3, 8001b08 <SET_LED+0xd50>)
 8001a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a7e:	f7fe ffc7 	bl	8000a10 <__aeabi_dcmpeq>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d11d      	bne.n	8001ac4 <SET_LED+0xd0c>
 8001a88:	a321      	add	r3, pc, #132	; (adr r3, 8001b10 <SET_LED+0xd58>)
 8001a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a92:	f7fe ffbd 	bl	8000a10 <__aeabi_dcmpeq>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d113      	bne.n	8001ac4 <SET_LED+0xd0c>
 8001a9c:	a31e      	add	r3, pc, #120	; (adr r3, 8001b18 <SET_LED+0xd60>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001aa6:	f7fe ffb3 	bl	8000a10 <__aeabi_dcmpeq>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d109      	bne.n	8001ac4 <SET_LED+0xd0c>
 8001ab0:	a31b      	add	r3, pc, #108	; (adr r3, 8001b20 <SET_LED+0xd68>)
 8001ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001aba:	f7fe ffa9 	bl	8000a10 <__aeabi_dcmpeq>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00a      	beq.n	8001ada <SET_LED+0xd22>
    LED_ON(LED7_Port, LED7_Pin);
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001acc:	f001 fb00 	bl	80030d0 <HAL_GPIO_WritePin>
    LED = 7;
 8001ad0:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <SET_LED+0xd70>)
 8001ad2:	2207      	movs	r2, #7
 8001ad4:	701a      	strb	r2, [r3, #0]
 8001ad6:	e000      	b.n	8001ada <SET_LED+0xd22>
  if (f == REST_FREQ) return;
 8001ad8:	bf00      	nop
  }

}
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	51eb851f 	.word	0x51eb851f
 8001ae4:	403edeb8 	.word	0x403edeb8
 8001ae8:	51eb851f 	.word	0x51eb851f
 8001aec:	404edeb8 	.word	0x404edeb8
 8001af0:	7ae147ae 	.word	0x7ae147ae
 8001af4:	405ede14 	.word	0x405ede14
 8001af8:	7ae147ae 	.word	0x7ae147ae
 8001afc:	406ede14 	.word	0x406ede14
 8001b00:	7ae147ae 	.word	0x7ae147ae
 8001b04:	407ede14 	.word	0x407ede14
 8001b08:	f5c28f5c 	.word	0xf5c28f5c
 8001b0c:	408ede28 	.word	0x408ede28
 8001b10:	b851eb85 	.word	0xb851eb85
 8001b14:	409ede1e 	.word	0x409ede1e
 8001b18:	d70a3d71 	.word	0xd70a3d71
 8001b1c:	40aede23 	.word	0x40aede23
 8001b20:	47ae147b 	.word	0x47ae147b
 8001b24:	40bede21 	.word	0x40bede21
 8001b28:	200000f8 	.word	0x200000f8
 8001b2c:	0a3d70a4 	.word	0x0a3d70a4
 8001b30:	403d23d7 	.word	0x403d23d7
 8001b34:	5c28f5c3 	.word	0x5c28f5c3
 8001b38:	404d228f 	.word	0x404d228f
 8001b3c:	5c28f5c3 	.word	0x5c28f5c3
 8001b40:	405d228f 	.word	0x405d228f
 8001b44:	5c28f5c3 	.word	0x5c28f5c3
 8001b48:	406d228f 	.word	0x406d228f
 8001b4c:	5c28f5c3 	.word	0x5c28f5c3
 8001b50:	407d228f 	.word	0x407d228f
 8001b54:	d70a3d71 	.word	0xd70a3d71
 8001b58:	408d22a3 	.word	0x408d22a3
 8001b5c:	d70a3d71 	.word	0xd70a3d71
 8001b60:	409d22a3 	.word	0x409d22a3
 8001b64:	b851eb85 	.word	0xb851eb85
 8001b68:	40ad229e 	.word	0x40ad229e
 8001b6c:	b851eb85 	.word	0xb851eb85
 8001b70:	40bd229e 	.word	0x40bd229e
 8001b74:	00000000 	.word	0x00000000

08001b78 <REST>:

void REST(double d)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	ed87 0b00 	vstr	d0, [r7]
  SET_FREQ(REST_FREQ);
 8001b82:	f001 fffd 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 8001b86:	4603      	mov	r3, r0
 8001b88:	08db      	lsrs	r3, r3, #3
 8001b8a:	4a13      	ldr	r2, [pc, #76]	; (8001bd8 <REST+0x60>)
 8001b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b90:	0a1a      	lsrs	r2, r3, #8
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <REST+0x64>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	3a01      	subs	r2, #1
 8001b98:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b9a:	f001 fff1 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	08db      	lsrs	r3, r3, #3
 8001ba2:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <REST+0x60>)
 8001ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba8:	0a1b      	lsrs	r3, r3, #8
 8001baa:	3b01      	subs	r3, #1
 8001bac:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <REST+0x64>)
 8001bae:	60d3      	str	r3, [r2, #12]
  SET_LED(REST_FREQ);
 8001bb0:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8001bd0 <REST+0x58>
 8001bb4:	f7ff f900 	bl	8000db8 <SET_LED>
  HAL_Delay(d);
 8001bb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bbc:	f7fe ff5a 	bl	8000a74 <__aeabi_d2uiz>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 ffd0 	bl	8002b68 <HAL_Delay>
}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	00000000 	.word	0x00000000
 8001bd4:	40d86a00 	.word	0x40d86a00
 8001bd8:	14f8b589 	.word	0x14f8b589
 8001bdc:	20000028 	.word	0x20000028

08001be0 <NOTE>:

void NOTE(double f, double d){
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	ed87 0b02 	vstr	d0, [r7, #8]
 8001bea:	ed87 1b00 	vstr	d1, [r7]
  SET_FREQ(f);
 8001bee:	f001 ffc7 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fc29 	bl	800044c <__aeabi_ui2d>
 8001bfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bfe:	f7fe fdc9 	bl	8000794 <__aeabi_ddiv>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <NOTE+0xa0>)
 8001c10:	f7fe fade 	bl	80001d0 <__aeabi_dsub>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	491a      	ldr	r1, [pc, #104]	; (8001c84 <NOTE+0xa4>)
 8001c1a:	680c      	ldr	r4, [r1, #0]
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f7fe ff28 	bl	8000a74 <__aeabi_d2uiz>
 8001c24:	4603      	mov	r3, r0
 8001c26:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001c28:	f001 ffaa 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fc0c 	bl	800044c <__aeabi_ui2d>
 8001c34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c38:	f7fe fdac 	bl	8000794 <__aeabi_ddiv>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <NOTE+0xa0>)
 8001c4a:	f7fe fac1 	bl	80001d0 <__aeabi_dsub>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4610      	mov	r0, r2
 8001c54:	4619      	mov	r1, r3
 8001c56:	f7fe ff0d 	bl	8000a74 <__aeabi_d2uiz>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4a09      	ldr	r2, [pc, #36]	; (8001c84 <NOTE+0xa4>)
 8001c5e:	60d3      	str	r3, [r2, #12]
  SET_LED(f);
 8001c60:	ed97 0b02 	vldr	d0, [r7, #8]
 8001c64:	f7ff f8a8 	bl	8000db8 <SET_LED>
  HAL_Delay(d);
 8001c68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c6c:	f7fe ff02 	bl	8000a74 <__aeabi_d2uiz>
 8001c70:	4603      	mov	r3, r0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 ff78 	bl	8002b68 <HAL_Delay>
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd90      	pop	{r4, r7, pc}
 8001c80:	3ff00000 	.word	0x3ff00000
 8001c84:	20000028 	.word	0x20000028

08001c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c8c:	f000 fef0 	bl	8002a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c90:	f000 fbae 	bl	80023f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c94:	f000 fce0 	bl	8002658 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001c98:	f000 fcae 	bl	80025f8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001c9c:	f000 fbfc 	bl	8002498 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001ca0:	2104      	movs	r1, #4
 8001ca2:	48fd      	ldr	r0, [pc, #1012]	; (8002098 <main+0x410>)
 8001ca4:	f002 fe04 	bl	80048b0 <HAL_TIM_PWM_Start>

  while (1)
  {
	REST(EN);
 8001ca8:	23fa      	movs	r3, #250	; 0xfa
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fbce 	bl	800044c <__aeabi_ui2d>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	ec43 2b10 	vmov	d0, r2, r3
 8001cb8:	f7ff ff5e 	bl	8001b78 <REST>
	NOTE(G4, EN);
 8001cbc:	23fa      	movs	r3, #250	; 0xfa
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7fe fbc4 	bl	800044c <__aeabi_ui2d>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	ec43 2b11 	vmov	d1, r2, r3
 8001ccc:	ed9f 0bde 	vldr	d0, [pc, #888]	; 8002048 <main+0x3c0>
 8001cd0:	f7ff ff86 	bl	8001be0 <NOTE>
	NOTE(A4, EN);
 8001cd4:	23fa      	movs	r3, #250	; 0xfa
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fbb8 	bl	800044c <__aeabi_ui2d>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	ec43 2b11 	vmov	d1, r2, r3
 8001ce4:	ed9f 0bda 	vldr	d0, [pc, #872]	; 8002050 <main+0x3c8>
 8001ce8:	f7ff ff7a 	bl	8001be0 <NOTE>
	NOTE(B4, EN);
 8001cec:	23fa      	movs	r3, #250	; 0xfa
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fbac 	bl	800044c <__aeabi_ui2d>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	ec43 2b11 	vmov	d1, r2, r3
 8001cfc:	ed9f 0bd6 	vldr	d0, [pc, #856]	; 8002058 <main+0x3d0>
 8001d00:	f7ff ff6e 	bl	8001be0 <NOTE>
	NOTE(D5, EN);
 8001d04:	23fa      	movs	r3, #250	; 0xfa
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe fba0 	bl	800044c <__aeabi_ui2d>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	ec43 2b11 	vmov	d1, r2, r3
 8001d14:	ed9f 0bd2 	vldr	d0, [pc, #840]	; 8002060 <main+0x3d8>
 8001d18:	f7ff ff62 	bl	8001be0 <NOTE>
	NOTE(C5, EN);
 8001d1c:	23fa      	movs	r3, #250	; 0xfa
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fb94 	bl	800044c <__aeabi_ui2d>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	ec43 2b11 	vmov	d1, r2, r3
 8001d2c:	ed9f 0bce 	vldr	d0, [pc, #824]	; 8002068 <main+0x3e0>
 8001d30:	f7ff ff56 	bl	8001be0 <NOTE>
	NOTE(C5, EN);
 8001d34:	23fa      	movs	r3, #250	; 0xfa
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fb88 	bl	800044c <__aeabi_ui2d>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	ec43 2b11 	vmov	d1, r2, r3
 8001d44:	ed9f 0bc8 	vldr	d0, [pc, #800]	; 8002068 <main+0x3e0>
 8001d48:	f7ff ff4a 	bl	8001be0 <NOTE>
	NOTE(E5, EN);
 8001d4c:	23fa      	movs	r3, #250	; 0xfa
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fb7c 	bl	800044c <__aeabi_ui2d>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	ec43 2b11 	vmov	d1, r2, r3
 8001d5c:	ed9f 0bc4 	vldr	d0, [pc, #784]	; 8002070 <main+0x3e8>
 8001d60:	f7ff ff3e 	bl	8001be0 <NOTE>
	NOTE(D5, EN);
 8001d64:	23fa      	movs	r3, #250	; 0xfa
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fb70 	bl	800044c <__aeabi_ui2d>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	ec43 2b11 	vmov	d1, r2, r3
 8001d74:	ed9f 0bba 	vldr	d0, [pc, #744]	; 8002060 <main+0x3d8>
 8001d78:	f7ff ff32 	bl	8001be0 <NOTE>

	NOTE(D5, EN);
 8001d7c:	23fa      	movs	r3, #250	; 0xfa
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fb64 	bl	800044c <__aeabi_ui2d>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	ec43 2b11 	vmov	d1, r2, r3
 8001d8c:	ed9f 0bb4 	vldr	d0, [pc, #720]	; 8002060 <main+0x3d8>
 8001d90:	f7ff ff26 	bl	8001be0 <NOTE>
	NOTE(G5, EN);
 8001d94:	23fa      	movs	r3, #250	; 0xfa
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fb58 	bl	800044c <__aeabi_ui2d>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	ec43 2b11 	vmov	d1, r2, r3
 8001da4:	ed9f 0bb4 	vldr	d0, [pc, #720]	; 8002078 <main+0x3f0>
 8001da8:	f7ff ff1a 	bl	8001be0 <NOTE>
	NOTE(FS5, EN);
 8001dac:	23fa      	movs	r3, #250	; 0xfa
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe fb4c 	bl	800044c <__aeabi_ui2d>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	ec43 2b11 	vmov	d1, r2, r3
 8001dbc:	ed9f 0bb0 	vldr	d0, [pc, #704]	; 8002080 <main+0x3f8>
 8001dc0:	f7ff ff0e 	bl	8001be0 <NOTE>
	NOTE(G5, EN);
 8001dc4:	23fa      	movs	r3, #250	; 0xfa
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fb40 	bl	800044c <__aeabi_ui2d>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	ec43 2b11 	vmov	d1, r2, r3
 8001dd4:	ed9f 0ba8 	vldr	d0, [pc, #672]	; 8002078 <main+0x3f0>
 8001dd8:	f7ff ff02 	bl	8001be0 <NOTE>
	NOTE(D5, EN);
 8001ddc:	23fa      	movs	r3, #250	; 0xfa
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe fb34 	bl	800044c <__aeabi_ui2d>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	ec43 2b11 	vmov	d1, r2, r3
 8001dec:	ed9f 0b9c 	vldr	d0, [pc, #624]	; 8002060 <main+0x3d8>
 8001df0:	f7ff fef6 	bl	8001be0 <NOTE>
	NOTE(B4, EN);
 8001df4:	23fa      	movs	r3, #250	; 0xfa
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fb28 	bl	800044c <__aeabi_ui2d>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	ec43 2b11 	vmov	d1, r2, r3
 8001e04:	ed9f 0b94 	vldr	d0, [pc, #592]	; 8002058 <main+0x3d0>
 8001e08:	f7ff feea 	bl	8001be0 <NOTE>
	NOTE(G4, EN);
 8001e0c:	23fa      	movs	r3, #250	; 0xfa
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fb1c 	bl	800044c <__aeabi_ui2d>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	ec43 2b11 	vmov	d1, r2, r3
 8001e1c:	ed9f 0b8a 	vldr	d0, [pc, #552]	; 8002048 <main+0x3c0>
 8001e20:	f7ff fede 	bl	8001be0 <NOTE>
	NOTE(A4, EN);
 8001e24:	23fa      	movs	r3, #250	; 0xfa
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe fb10 	bl	800044c <__aeabi_ui2d>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	ec43 2b11 	vmov	d1, r2, r3
 8001e34:	ed9f 0b86 	vldr	d0, [pc, #536]	; 8002050 <main+0x3c8>
 8001e38:	f7ff fed2 	bl	8001be0 <NOTE>
	NOTE(B4, EN);
 8001e3c:	23fa      	movs	r3, #250	; 0xfa
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fb04 	bl	800044c <__aeabi_ui2d>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	ec43 2b11 	vmov	d1, r2, r3
 8001e4c:	ed9f 0b82 	vldr	d0, [pc, #520]	; 8002058 <main+0x3d0>
 8001e50:	f7ff fec6 	bl	8001be0 <NOTE>

	NOTE(C5, EN);
 8001e54:	23fa      	movs	r3, #250	; 0xfa
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe faf8 	bl	800044c <__aeabi_ui2d>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	ec43 2b11 	vmov	d1, r2, r3
 8001e64:	ed9f 0b80 	vldr	d0, [pc, #512]	; 8002068 <main+0x3e0>
 8001e68:	f7ff feba 	bl	8001be0 <NOTE>
	NOTE(D5, EN);
 8001e6c:	23fa      	movs	r3, #250	; 0xfa
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe faec 	bl	800044c <__aeabi_ui2d>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	ec43 2b11 	vmov	d1, r2, r3
 8001e7c:	ed9f 0b78 	vldr	d0, [pc, #480]	; 8002060 <main+0x3d8>
 8001e80:	f7ff feae 	bl	8001be0 <NOTE>
	NOTE(E5, EN);
 8001e84:	23fa      	movs	r3, #250	; 0xfa
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe fae0 	bl	800044c <__aeabi_ui2d>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	ec43 2b11 	vmov	d1, r2, r3
 8001e94:	ed9f 0b76 	vldr	d0, [pc, #472]	; 8002070 <main+0x3e8>
 8001e98:	f7ff fea2 	bl	8001be0 <NOTE>
	NOTE(D5, EN);
 8001e9c:	23fa      	movs	r3, #250	; 0xfa
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe fad4 	bl	800044c <__aeabi_ui2d>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	ec43 2b11 	vmov	d1, r2, r3
 8001eac:	ed9f 0b6c 	vldr	d0, [pc, #432]	; 8002060 <main+0x3d8>
 8001eb0:	f7ff fe96 	bl	8001be0 <NOTE>
	NOTE(C5, EN);
 8001eb4:	23fa      	movs	r3, #250	; 0xfa
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fac8 	bl	800044c <__aeabi_ui2d>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	ec43 2b11 	vmov	d1, r2, r3
 8001ec4:	ed9f 0b68 	vldr	d0, [pc, #416]	; 8002068 <main+0x3e0>
 8001ec8:	f7ff fe8a 	bl	8001be0 <NOTE>
	NOTE(B4, EN);
 8001ecc:	23fa      	movs	r3, #250	; 0xfa
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe fabc 	bl	800044c <__aeabi_ui2d>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	ec43 2b11 	vmov	d1, r2, r3
 8001edc:	ed9f 0b5e 	vldr	d0, [pc, #376]	; 8002058 <main+0x3d0>
 8001ee0:	f7ff fe7e 	bl	8001be0 <NOTE>
	NOTE(A4, EN);
 8001ee4:	23fa      	movs	r3, #250	; 0xfa
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe fab0 	bl	800044c <__aeabi_ui2d>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	ec43 2b11 	vmov	d1, r2, r3
 8001ef4:	ed9f 0b56 	vldr	d0, [pc, #344]	; 8002050 <main+0x3c8>
 8001ef8:	f7ff fe72 	bl	8001be0 <NOTE>
	NOTE(B4, EN);
 8001efc:	23fa      	movs	r3, #250	; 0xfa
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe faa4 	bl	800044c <__aeabi_ui2d>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	ec43 2b11 	vmov	d1, r2, r3
 8001f0c:	ed9f 0b52 	vldr	d0, [pc, #328]	; 8002058 <main+0x3d0>
 8001f10:	f7ff fe66 	bl	8001be0 <NOTE>
	NOTE(G4, EN);
 8001f14:	23fa      	movs	r3, #250	; 0xfa
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fa98 	bl	800044c <__aeabi_ui2d>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	ec43 2b11 	vmov	d1, r2, r3
 8001f24:	ed9f 0b48 	vldr	d0, [pc, #288]	; 8002048 <main+0x3c0>
 8001f28:	f7ff fe5a 	bl	8001be0 <NOTE>

	NOTE(FS4, EN);
 8001f2c:	23fa      	movs	r3, #250	; 0xfa
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fa8c 	bl	800044c <__aeabi_ui2d>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	ec43 2b11 	vmov	d1, r2, r3
 8001f3c:	ed9f 0b52 	vldr	d0, [pc, #328]	; 8002088 <main+0x400>
 8001f40:	f7ff fe4e 	bl	8001be0 <NOTE>
	NOTE(G4, EN);
 8001f44:	23fa      	movs	r3, #250	; 0xfa
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe fa80 	bl	800044c <__aeabi_ui2d>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	ec43 2b11 	vmov	d1, r2, r3
 8001f54:	ed9f 0b3c 	vldr	d0, [pc, #240]	; 8002048 <main+0x3c0>
 8001f58:	f7ff fe42 	bl	8001be0 <NOTE>
	NOTE(A4, EN);
 8001f5c:	23fa      	movs	r3, #250	; 0xfa
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fa74 	bl	800044c <__aeabi_ui2d>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	ec43 2b11 	vmov	d1, r2, r3
 8001f6c:	ed9f 0b38 	vldr	d0, [pc, #224]	; 8002050 <main+0x3c8>
 8001f70:	f7ff fe36 	bl	8001be0 <NOTE>
	NOTE(D4, EN);
 8001f74:	23fa      	movs	r3, #250	; 0xfa
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe fa68 	bl	800044c <__aeabi_ui2d>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	ec43 2b11 	vmov	d1, r2, r3
 8001f84:	ed9f 0b42 	vldr	d0, [pc, #264]	; 8002090 <main+0x408>
 8001f88:	f7ff fe2a 	bl	8001be0 <NOTE>
	NOTE(FS4, EN);
 8001f8c:	23fa      	movs	r3, #250	; 0xfa
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fa5c 	bl	800044c <__aeabi_ui2d>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	ec43 2b11 	vmov	d1, r2, r3
 8001f9c:	ed9f 0b3a 	vldr	d0, [pc, #232]	; 8002088 <main+0x400>
 8001fa0:	f7ff fe1e 	bl	8001be0 <NOTE>
	NOTE(A4, EN);
 8001fa4:	23fa      	movs	r3, #250	; 0xfa
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe fa50 	bl	800044c <__aeabi_ui2d>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	ec43 2b11 	vmov	d1, r2, r3
 8001fb4:	ed9f 0b26 	vldr	d0, [pc, #152]	; 8002050 <main+0x3c8>
 8001fb8:	f7ff fe12 	bl	8001be0 <NOTE>
	NOTE(C5, EN);
 8001fbc:	23fa      	movs	r3, #250	; 0xfa
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe fa44 	bl	800044c <__aeabi_ui2d>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	ec43 2b11 	vmov	d1, r2, r3
 8001fcc:	ed9f 0b26 	vldr	d0, [pc, #152]	; 8002068 <main+0x3e0>
 8001fd0:	f7ff fe06 	bl	8001be0 <NOTE>
	NOTE(B4, EN);
 8001fd4:	23fa      	movs	r3, #250	; 0xfa
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fa38 	bl	800044c <__aeabi_ui2d>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	ec43 2b11 	vmov	d1, r2, r3
 8001fe4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8002058 <main+0x3d0>
 8001fe8:	f7ff fdfa 	bl	8001be0 <NOTE>
	NOTE(A4, EN);
 8001fec:	23fa      	movs	r3, #250	; 0xfa
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fa2c 	bl	800044c <__aeabi_ui2d>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	ec43 2b11 	vmov	d1, r2, r3
 8001ffc:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8002050 <main+0x3c8>
 8002000:	f7ff fdee 	bl	8001be0 <NOTE>

	NOTE(B4, EN);
 8002004:	23fa      	movs	r3, #250	; 0xfa
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe fa20 	bl	800044c <__aeabi_ui2d>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	ec43 2b11 	vmov	d1, r2, r3
 8002014:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8002058 <main+0x3d0>
 8002018:	f7ff fde2 	bl	8001be0 <NOTE>
	NOTE(G4, EN);
 800201c:	23fa      	movs	r3, #250	; 0xfa
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fa14 	bl	800044c <__aeabi_ui2d>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	ec43 2b11 	vmov	d1, r2, r3
 800202c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8002048 <main+0x3c0>
 8002030:	f7ff fdd6 	bl	8001be0 <NOTE>
	NOTE(A4, EN);
 8002034:	23fa      	movs	r3, #250	; 0xfa
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe fa08 	bl	800044c <__aeabi_ui2d>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	ec43 2b11 	vmov	d1, r2, r3
 8002044:	e02a      	b.n	800209c <main+0x414>
 8002046:	bf00      	nop
 8002048:	00000000 	.word	0x00000000
 800204c:	40788000 	.word	0x40788000
 8002050:	00000000 	.word	0x00000000
 8002054:	407b8000 	.word	0x407b8000
 8002058:	7ae147ae 	.word	0x7ae147ae
 800205c:	407ede14 	.word	0x407ede14
 8002060:	d70a3d71 	.word	0xd70a3d71
 8002064:	40825aa3 	.word	0x40825aa3
 8002068:	00000000 	.word	0x00000000
 800206c:	40805a00 	.word	0x40805a00
 8002070:	00000000 	.word	0x00000000
 8002074:	40849a00 	.word	0x40849a00
 8002078:	851eb852 	.word	0x851eb852
 800207c:	40887feb 	.word	0x40887feb
 8002080:	851eb852 	.word	0x851eb852
 8002084:	40871feb 	.word	0x40871feb
 8002088:	0a3d70a4 	.word	0x0a3d70a4
 800208c:	40771fd7 	.word	0x40771fd7
 8002090:	5c28f5c3 	.word	0x5c28f5c3
 8002094:	40725a8f 	.word	0x40725a8f
 8002098:	20000028 	.word	0x20000028
 800209c:	ed9f 0bbe 	vldr	d0, [pc, #760]	; 8002398 <main+0x710>
 80020a0:	f7ff fd9e 	bl	8001be0 <NOTE>
	NOTE(B4, EN);
 80020a4:	23fa      	movs	r3, #250	; 0xfa
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe f9d0 	bl	800044c <__aeabi_ui2d>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	ec43 2b11 	vmov	d1, r2, r3
 80020b4:	ed9f 0bba 	vldr	d0, [pc, #744]	; 80023a0 <main+0x718>
 80020b8:	f7ff fd92 	bl	8001be0 <NOTE>
	NOTE(D5, EN);
 80020bc:	23fa      	movs	r3, #250	; 0xfa
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe f9c4 	bl	800044c <__aeabi_ui2d>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	ec43 2b11 	vmov	d1, r2, r3
 80020cc:	ed9f 0bb6 	vldr	d0, [pc, #728]	; 80023a8 <main+0x720>
 80020d0:	f7ff fd86 	bl	8001be0 <NOTE>
	NOTE(C5, EN);
 80020d4:	23fa      	movs	r3, #250	; 0xfa
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe f9b8 	bl	800044c <__aeabi_ui2d>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	ec43 2b11 	vmov	d1, r2, r3
 80020e4:	ed9f 0bb2 	vldr	d0, [pc, #712]	; 80023b0 <main+0x728>
 80020e8:	f7ff fd7a 	bl	8001be0 <NOTE>
	NOTE(C5, EN);
 80020ec:	23fa      	movs	r3, #250	; 0xfa
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe f9ac 	bl	800044c <__aeabi_ui2d>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	ec43 2b11 	vmov	d1, r2, r3
 80020fc:	ed9f 0bac 	vldr	d0, [pc, #688]	; 80023b0 <main+0x728>
 8002100:	f7ff fd6e 	bl	8001be0 <NOTE>
	NOTE(E5, EN);
 8002104:	23fa      	movs	r3, #250	; 0xfa
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe f9a0 	bl	800044c <__aeabi_ui2d>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	ec43 2b11 	vmov	d1, r2, r3
 8002114:	ed9f 0ba8 	vldr	d0, [pc, #672]	; 80023b8 <main+0x730>
 8002118:	f7ff fd62 	bl	8001be0 <NOTE>
	NOTE(D5, EN);
 800211c:	23fa      	movs	r3, #250	; 0xfa
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe f994 	bl	800044c <__aeabi_ui2d>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	ec43 2b11 	vmov	d1, r2, r3
 800212c:	ed9f 0b9e 	vldr	d0, [pc, #632]	; 80023a8 <main+0x720>
 8002130:	f7ff fd56 	bl	8001be0 <NOTE>

	NOTE(D5, EN);
 8002134:	23fa      	movs	r3, #250	; 0xfa
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe f988 	bl	800044c <__aeabi_ui2d>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	ec43 2b11 	vmov	d1, r2, r3
 8002144:	ed9f 0b98 	vldr	d0, [pc, #608]	; 80023a8 <main+0x720>
 8002148:	f7ff fd4a 	bl	8001be0 <NOTE>
	NOTE(G5, EN);
 800214c:	23fa      	movs	r3, #250	; 0xfa
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe f97c 	bl	800044c <__aeabi_ui2d>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	ec43 2b11 	vmov	d1, r2, r3
 800215c:	ed9f 0b98 	vldr	d0, [pc, #608]	; 80023c0 <main+0x738>
 8002160:	f7ff fd3e 	bl	8001be0 <NOTE>
	NOTE(FS5, EN);
 8002164:	23fa      	movs	r3, #250	; 0xfa
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe f970 	bl	800044c <__aeabi_ui2d>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	ec43 2b11 	vmov	d1, r2, r3
 8002174:	ed9f 0b94 	vldr	d0, [pc, #592]	; 80023c8 <main+0x740>
 8002178:	f7ff fd32 	bl	8001be0 <NOTE>
	NOTE(G5, EN);
 800217c:	23fa      	movs	r3, #250	; 0xfa
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe f964 	bl	800044c <__aeabi_ui2d>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	ec43 2b11 	vmov	d1, r2, r3
 800218c:	ed9f 0b8c 	vldr	d0, [pc, #560]	; 80023c0 <main+0x738>
 8002190:	f7ff fd26 	bl	8001be0 <NOTE>
	NOTE(D5, EN);
 8002194:	23fa      	movs	r3, #250	; 0xfa
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe f958 	bl	800044c <__aeabi_ui2d>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	ec43 2b11 	vmov	d1, r2, r3
 80021a4:	ed9f 0b80 	vldr	d0, [pc, #512]	; 80023a8 <main+0x720>
 80021a8:	f7ff fd1a 	bl	8001be0 <NOTE>
	NOTE(B4, EN);
 80021ac:	23fa      	movs	r3, #250	; 0xfa
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe f94c 	bl	800044c <__aeabi_ui2d>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	ec43 2b11 	vmov	d1, r2, r3
 80021bc:	ed9f 0b78 	vldr	d0, [pc, #480]	; 80023a0 <main+0x718>
 80021c0:	f7ff fd0e 	bl	8001be0 <NOTE>
	NOTE(G4, EN);
 80021c4:	23fa      	movs	r3, #250	; 0xfa
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe f940 	bl	800044c <__aeabi_ui2d>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	ec43 2b11 	vmov	d1, r2, r3
 80021d4:	ed9f 0b7e 	vldr	d0, [pc, #504]	; 80023d0 <main+0x748>
 80021d8:	f7ff fd02 	bl	8001be0 <NOTE>
	NOTE(A4, EN);
 80021dc:	23fa      	movs	r3, #250	; 0xfa
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe f934 	bl	800044c <__aeabi_ui2d>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	ec43 2b11 	vmov	d1, r2, r3
 80021ec:	ed9f 0b6a 	vldr	d0, [pc, #424]	; 8002398 <main+0x710>
 80021f0:	f7ff fcf6 	bl	8001be0 <NOTE>
	NOTE(B4, EN);
 80021f4:	23fa      	movs	r3, #250	; 0xfa
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe f928 	bl	800044c <__aeabi_ui2d>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	ec43 2b11 	vmov	d1, r2, r3
 8002204:	ed9f 0b66 	vldr	d0, [pc, #408]	; 80023a0 <main+0x718>
 8002208:	f7ff fcea 	bl	8001be0 <NOTE>

	NOTE(E4, EN);
 800220c:	23fa      	movs	r3, #250	; 0xfa
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe f91c 	bl	800044c <__aeabi_ui2d>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	ec43 2b11 	vmov	d1, r2, r3
 800221c:	ed9f 0b6e 	vldr	d0, [pc, #440]	; 80023d8 <main+0x750>
 8002220:	f7ff fcde 	bl	8001be0 <NOTE>
	NOTE(D5, EN);
 8002224:	23fa      	movs	r3, #250	; 0xfa
 8002226:	4618      	mov	r0, r3
 8002228:	f7fe f910 	bl	800044c <__aeabi_ui2d>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	ec43 2b11 	vmov	d1, r2, r3
 8002234:	ed9f 0b5c 	vldr	d0, [pc, #368]	; 80023a8 <main+0x720>
 8002238:	f7ff fcd2 	bl	8001be0 <NOTE>
	NOTE(C5, EN);
 800223c:	23fa      	movs	r3, #250	; 0xfa
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe f904 	bl	800044c <__aeabi_ui2d>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	ec43 2b11 	vmov	d1, r2, r3
 800224c:	ed9f 0b58 	vldr	d0, [pc, #352]	; 80023b0 <main+0x728>
 8002250:	f7ff fcc6 	bl	8001be0 <NOTE>
	NOTE(B4, EN);
 8002254:	23fa      	movs	r3, #250	; 0xfa
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe f8f8 	bl	800044c <__aeabi_ui2d>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	ec43 2b11 	vmov	d1, r2, r3
 8002264:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 80023a0 <main+0x718>
 8002268:	f7ff fcba 	bl	8001be0 <NOTE>
	NOTE(A4, EN);
 800226c:	23fa      	movs	r3, #250	; 0xfa
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe f8ec 	bl	800044c <__aeabi_ui2d>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	ec43 2b11 	vmov	d1, r2, r3
 800227c:	ed9f 0b46 	vldr	d0, [pc, #280]	; 8002398 <main+0x710>
 8002280:	f7ff fcae 	bl	8001be0 <NOTE>
	NOTE(G4, EN);
 8002284:	23fa      	movs	r3, #250	; 0xfa
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe f8e0 	bl	800044c <__aeabi_ui2d>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	ec43 2b11 	vmov	d1, r2, r3
 8002294:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 80023d0 <main+0x748>
 8002298:	f7ff fca2 	bl	8001be0 <NOTE>
	NOTE(D4, EN);
 800229c:	23fa      	movs	r3, #250	; 0xfa
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe f8d4 	bl	800044c <__aeabi_ui2d>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	ec43 2b11 	vmov	d1, r2, r3
 80022ac:	ed9f 0b4c 	vldr	d0, [pc, #304]	; 80023e0 <main+0x758>
 80022b0:	f7ff fc96 	bl	8001be0 <NOTE>
	NOTE(G4, EN);
 80022b4:	23fa      	movs	r3, #250	; 0xfa
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe f8c8 	bl	800044c <__aeabi_ui2d>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	ec43 2b11 	vmov	d1, r2, r3
 80022c4:	ed9f 0b42 	vldr	d0, [pc, #264]	; 80023d0 <main+0x748>
 80022c8:	f7ff fc8a 	bl	8001be0 <NOTE>
	NOTE(FS4, EN);
 80022cc:	23fa      	movs	r3, #250	; 0xfa
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe f8bc 	bl	800044c <__aeabi_ui2d>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	ec43 2b11 	vmov	d1, r2, r3
 80022dc:	ed9f 0b42 	vldr	d0, [pc, #264]	; 80023e8 <main+0x760>
 80022e0:	f7ff fc7e 	bl	8001be0 <NOTE>

	NOTE(G4, EN);
 80022e4:	23fa      	movs	r3, #250	; 0xfa
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe f8b0 	bl	800044c <__aeabi_ui2d>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	ec43 2b11 	vmov	d1, r2, r3
 80022f4:	ed9f 0b36 	vldr	d0, [pc, #216]	; 80023d0 <main+0x748>
 80022f8:	f7ff fc72 	bl	8001be0 <NOTE>
	NOTE(B4, EN);
 80022fc:	23fa      	movs	r3, #250	; 0xfa
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe f8a4 	bl	800044c <__aeabi_ui2d>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	ec43 2b11 	vmov	d1, r2, r3
 800230c:	ed9f 0b24 	vldr	d0, [pc, #144]	; 80023a0 <main+0x718>
 8002310:	f7ff fc66 	bl	8001be0 <NOTE>
	NOTE(D5, EN);
 8002314:	23fa      	movs	r3, #250	; 0xfa
 8002316:	4618      	mov	r0, r3
 8002318:	f7fe f898 	bl	800044c <__aeabi_ui2d>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	ec43 2b11 	vmov	d1, r2, r3
 8002324:	ed9f 0b20 	vldr	d0, [pc, #128]	; 80023a8 <main+0x720>
 8002328:	f7ff fc5a 	bl	8001be0 <NOTE>
	NOTE(G5, EN);
 800232c:	23fa      	movs	r3, #250	; 0xfa
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe f88c 	bl	800044c <__aeabi_ui2d>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	ec43 2b11 	vmov	d1, r2, r3
 800233c:	ed9f 0b20 	vldr	d0, [pc, #128]	; 80023c0 <main+0x738>
 8002340:	f7ff fc4e 	bl	8001be0 <NOTE>
	NOTE(D5, EN);
 8002344:	23fa      	movs	r3, #250	; 0xfa
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe f880 	bl	800044c <__aeabi_ui2d>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	ec43 2b11 	vmov	d1, r2, r3
 8002354:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80023a8 <main+0x720>
 8002358:	f7ff fc42 	bl	8001be0 <NOTE>
	NOTE(B4, EN);
 800235c:	23fa      	movs	r3, #250	; 0xfa
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe f874 	bl	800044c <__aeabi_ui2d>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	ec43 2b11 	vmov	d1, r2, r3
 800236c:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 80023a0 <main+0x718>
 8002370:	f7ff fc36 	bl	8001be0 <NOTE>
	NOTE(G4, EN*3);
 8002374:	23fa      	movs	r3, #250	; 0xfa
 8002376:	461a      	mov	r2, r3
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe f874 	bl	800046c <__aeabi_i2d>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	ec43 2b11 	vmov	d1, r2, r3
 800238c:	ed9f 0b10 	vldr	d0, [pc, #64]	; 80023d0 <main+0x748>
 8002390:	f7ff fc26 	bl	8001be0 <NOTE>
	REST(EN);
 8002394:	e488      	b.n	8001ca8 <main+0x20>
 8002396:	bf00      	nop
 8002398:	00000000 	.word	0x00000000
 800239c:	407b8000 	.word	0x407b8000
 80023a0:	7ae147ae 	.word	0x7ae147ae
 80023a4:	407ede14 	.word	0x407ede14
 80023a8:	d70a3d71 	.word	0xd70a3d71
 80023ac:	40825aa3 	.word	0x40825aa3
 80023b0:	00000000 	.word	0x00000000
 80023b4:	40805a00 	.word	0x40805a00
 80023b8:	00000000 	.word	0x00000000
 80023bc:	40849a00 	.word	0x40849a00
 80023c0:	851eb852 	.word	0x851eb852
 80023c4:	40887feb 	.word	0x40887feb
 80023c8:	851eb852 	.word	0x851eb852
 80023cc:	40871feb 	.word	0x40871feb
 80023d0:	00000000 	.word	0x00000000
 80023d4:	40788000 	.word	0x40788000
 80023d8:	7ae147ae 	.word	0x7ae147ae
 80023dc:	40749a14 	.word	0x40749a14
 80023e0:	5c28f5c3 	.word	0x5c28f5c3
 80023e4:	40725a8f 	.word	0x40725a8f
 80023e8:	0a3d70a4 	.word	0x0a3d70a4
 80023ec:	40771fd7 	.word	0x40771fd7

080023f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b096      	sub	sp, #88	; 0x58
 80023f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023f6:	f107 0314 	add.w	r3, r7, #20
 80023fa:	2244      	movs	r2, #68	; 0x44
 80023fc:	2100      	movs	r1, #0
 80023fe:	4618      	mov	r0, r3
 8002400:	f003 fecc 	bl	800619c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002404:	463b      	mov	r3, r7
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	605a      	str	r2, [r3, #4]
 800240c:	609a      	str	r2, [r3, #8]
 800240e:	60da      	str	r2, [r3, #12]
 8002410:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002412:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002416:	f000 fe81 	bl	800311c <HAL_PWREx_ControlVoltageScaling>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002420:	f000 f9e8 	bl	80027f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002424:	2302      	movs	r3, #2
 8002426:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800242c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800242e:	2310      	movs	r3, #16
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002432:	2302      	movs	r3, #2
 8002434:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002436:	2302      	movs	r3, #2
 8002438:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800243a:	2301      	movs	r3, #1
 800243c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800243e:	230a      	movs	r3, #10
 8002440:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002442:	2307      	movs	r3, #7
 8002444:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002446:	2302      	movs	r3, #2
 8002448:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800244a:	2302      	movs	r3, #2
 800244c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800244e:	f107 0314 	add.w	r3, r7, #20
 8002452:	4618      	mov	r0, r3
 8002454:	f000 feb8 	bl	80031c8 <HAL_RCC_OscConfig>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800245e:	f000 f9c9 	bl	80027f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002462:	230f      	movs	r3, #15
 8002464:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002466:	2303      	movs	r3, #3
 8002468:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800246a:	2300      	movs	r3, #0
 800246c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002476:	463b      	mov	r3, r7
 8002478:	2104      	movs	r1, #4
 800247a:	4618      	mov	r0, r3
 800247c:	f001 fa80 	bl	8003980 <HAL_RCC_ClockConfig>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002486:	f000 f9b5 	bl	80027f4 <Error_Handler>
  }
}
 800248a:	bf00      	nop
 800248c:	3758      	adds	r7, #88	; 0x58
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	0000      	movs	r0, r0
 8002494:	0000      	movs	r0, r0
	...

08002498 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08e      	sub	sp, #56	; 0x38
 800249c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800249e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	605a      	str	r2, [r3, #4]
 80024a8:	609a      	str	r2, [r3, #8]
 80024aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ac:	f107 031c 	add.w	r3, r7, #28
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024b8:	463b      	mov	r3, r7
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]
 80024c2:	60da      	str	r2, [r3, #12]
 80024c4:	611a      	str	r2, [r3, #16]
 80024c6:	615a      	str	r2, [r3, #20]
 80024c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024ca:	4b49      	ldr	r3, [pc, #292]	; (80025f0 <MX_TIM2_Init+0x158>)
 80024cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80024d2:	4b47      	ldr	r3, [pc, #284]	; (80025f0 <MX_TIM2_Init+0x158>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d8:	4b45      	ldr	r3, [pc, #276]	; (80025f0 <MX_TIM2_Init+0x158>)
 80024da:	2200      	movs	r2, #0
 80024dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = CLK_SPD / 300;
 80024de:	f001 fb4f 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 80024e2:	4603      	mov	r3, r0
 80024e4:	4a43      	ldr	r2, [pc, #268]	; (80025f4 <MX_TIM2_Init+0x15c>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	095b      	lsrs	r3, r3, #5
 80024ec:	4a40      	ldr	r2, [pc, #256]	; (80025f0 <MX_TIM2_Init+0x158>)
 80024ee:	60d3      	str	r3, [r2, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024f0:	4b3f      	ldr	r3, [pc, #252]	; (80025f0 <MX_TIM2_Init+0x158>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024f6:	4b3e      	ldr	r3, [pc, #248]	; (80025f0 <MX_TIM2_Init+0x158>)
 80024f8:	2280      	movs	r2, #128	; 0x80
 80024fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024fc:	483c      	ldr	r0, [pc, #240]	; (80025f0 <MX_TIM2_Init+0x158>)
 80024fe:	f002 f91f 	bl	8004740 <HAL_TIM_Base_Init>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002508:	f000 f974 	bl	80027f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800250c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002510:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002512:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002516:	4619      	mov	r1, r3
 8002518:	4835      	ldr	r0, [pc, #212]	; (80025f0 <MX_TIM2_Init+0x158>)
 800251a:	f002 fbe3 	bl	8004ce4 <HAL_TIM_ConfigClockSource>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002524:	f000 f966 	bl	80027f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002528:	4831      	ldr	r0, [pc, #196]	; (80025f0 <MX_TIM2_Init+0x158>)
 800252a:	f002 f960 	bl	80047ee <HAL_TIM_PWM_Init>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002534:	f000 f95e 	bl	80027f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002538:	2300      	movs	r3, #0
 800253a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800253c:	2300      	movs	r3, #0
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002540:	f107 031c 	add.w	r3, r7, #28
 8002544:	4619      	mov	r1, r3
 8002546:	482a      	ldr	r0, [pc, #168]	; (80025f0 <MX_TIM2_Init+0x158>)
 8002548:	f003 f8c6 	bl	80056d8 <HAL_TIMEx_MasterConfigSynchronization>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 8002552:	f000 f94f 	bl	80027f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002556:	2360      	movs	r3, #96	; 0x60
 8002558:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = htim2.Init.Period * 0.01;
 800255a:	4b25      	ldr	r3, [pc, #148]	; (80025f0 <MX_TIM2_Init+0x158>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	4618      	mov	r0, r3
 8002560:	f7fd ff74 	bl	800044c <__aeabi_ui2d>
 8002564:	a320      	add	r3, pc, #128	; (adr r3, 80025e8 <MX_TIM2_Init+0x150>)
 8002566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256a:	f7fd ffe9 	bl	8000540 <__aeabi_dmul>
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	4610      	mov	r0, r2
 8002574:	4619      	mov	r1, r3
 8002576:	f7fe fa7d 	bl	8000a74 <__aeabi_d2uiz>
 800257a:	4603      	mov	r3, r0
 800257c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002586:	463b      	mov	r3, r7
 8002588:	2204      	movs	r2, #4
 800258a:	4619      	mov	r1, r3
 800258c:	4818      	ldr	r0, [pc, #96]	; (80025f0 <MX_TIM2_Init+0x158>)
 800258e:	f002 fa95 	bl	8004abc <HAL_TIM_PWM_ConfigChannel>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002598:	f000 f92c 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  htim2.Init.Prescaler = 0;
 800259c:	4b14      	ldr	r3, [pc, #80]	; (80025f0 <MX_TIM2_Init+0x158>)
 800259e:	2200      	movs	r2, #0
 80025a0:	605a      	str	r2, [r3, #4]
  htim2.Init.Period = CLK_SPD / 300;
 80025a2:	f001 faed 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 80025a6:	4603      	mov	r3, r0
 80025a8:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <MX_TIM2_Init+0x15c>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	095b      	lsrs	r3, r3, #5
 80025b0:	4a0f      	ldr	r2, [pc, #60]	; (80025f0 <MX_TIM2_Init+0x158>)
 80025b2:	60d3      	str	r3, [r2, #12]
  sConfigOC.Pulse = htim2.Init.Period * 0.01;
 80025b4:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <MX_TIM2_Init+0x158>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fd ff47 	bl	800044c <__aeabi_ui2d>
 80025be:	a30a      	add	r3, pc, #40	; (adr r3, 80025e8 <MX_TIM2_Init+0x150>)
 80025c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c4:	f7fd ffbc 	bl	8000540 <__aeabi_dmul>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4610      	mov	r0, r2
 80025ce:	4619      	mov	r1, r3
 80025d0:	f7fe fa50 	bl	8000a74 <__aeabi_d2uiz>
 80025d4:	4603      	mov	r3, r0
 80025d6:	607b      	str	r3, [r7, #4]
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80025d8:	4805      	ldr	r0, [pc, #20]	; (80025f0 <MX_TIM2_Init+0x158>)
 80025da:	f000 f953 	bl	8002884 <HAL_TIM_MspPostInit>

}
 80025de:	bf00      	nop
 80025e0:	3738      	adds	r7, #56	; 0x38
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	47ae147b 	.word	0x47ae147b
 80025ec:	3f847ae1 	.word	0x3f847ae1
 80025f0:	20000028 	.word	0x20000028
 80025f4:	1b4e81b5 	.word	0x1b4e81b5

080025f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025fc:	4b14      	ldr	r3, [pc, #80]	; (8002650 <MX_USART2_UART_Init+0x58>)
 80025fe:	4a15      	ldr	r2, [pc, #84]	; (8002654 <MX_USART2_UART_Init+0x5c>)
 8002600:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002602:	4b13      	ldr	r3, [pc, #76]	; (8002650 <MX_USART2_UART_Init+0x58>)
 8002604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002608:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800260a:	4b11      	ldr	r3, [pc, #68]	; (8002650 <MX_USART2_UART_Init+0x58>)
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002610:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <MX_USART2_UART_Init+0x58>)
 8002612:	2200      	movs	r2, #0
 8002614:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002616:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <MX_USART2_UART_Init+0x58>)
 8002618:	2200      	movs	r2, #0
 800261a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800261c:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <MX_USART2_UART_Init+0x58>)
 800261e:	220c      	movs	r2, #12
 8002620:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002622:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <MX_USART2_UART_Init+0x58>)
 8002624:	2200      	movs	r2, #0
 8002626:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002628:	4b09      	ldr	r3, [pc, #36]	; (8002650 <MX_USART2_UART_Init+0x58>)
 800262a:	2200      	movs	r2, #0
 800262c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800262e:	4b08      	ldr	r3, [pc, #32]	; (8002650 <MX_USART2_UART_Init+0x58>)
 8002630:	2200      	movs	r2, #0
 8002632:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <MX_USART2_UART_Init+0x58>)
 8002636:	2200      	movs	r2, #0
 8002638:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800263a:	4805      	ldr	r0, [pc, #20]	; (8002650 <MX_USART2_UART_Init+0x58>)
 800263c:	f003 f8d4 	bl	80057e8 <HAL_UART_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002646:	f000 f8d5 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20000074 	.word	0x20000074
 8002654:	40004400 	.word	0x40004400

08002658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08a      	sub	sp, #40	; 0x28
 800265c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265e:	f107 0314 	add.w	r3, r7, #20
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	605a      	str	r2, [r3, #4]
 8002668:	609a      	str	r2, [r3, #8]
 800266a:	60da      	str	r2, [r3, #12]
 800266c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800266e:	4b5e      	ldr	r3, [pc, #376]	; (80027e8 <MX_GPIO_Init+0x190>)
 8002670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002672:	4a5d      	ldr	r2, [pc, #372]	; (80027e8 <MX_GPIO_Init+0x190>)
 8002674:	f043 0304 	orr.w	r3, r3, #4
 8002678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800267a:	4b5b      	ldr	r3, [pc, #364]	; (80027e8 <MX_GPIO_Init+0x190>)
 800267c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002686:	4b58      	ldr	r3, [pc, #352]	; (80027e8 <MX_GPIO_Init+0x190>)
 8002688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268a:	4a57      	ldr	r2, [pc, #348]	; (80027e8 <MX_GPIO_Init+0x190>)
 800268c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002692:	4b55      	ldr	r3, [pc, #340]	; (80027e8 <MX_GPIO_Init+0x190>)
 8002694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800269e:	4b52      	ldr	r3, [pc, #328]	; (80027e8 <MX_GPIO_Init+0x190>)
 80026a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a2:	4a51      	ldr	r2, [pc, #324]	; (80027e8 <MX_GPIO_Init+0x190>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026aa:	4b4f      	ldr	r3, [pc, #316]	; (80027e8 <MX_GPIO_Init+0x190>)
 80026ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b6:	4b4c      	ldr	r3, [pc, #304]	; (80027e8 <MX_GPIO_Init+0x190>)
 80026b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ba:	4a4b      	ldr	r2, [pc, #300]	; (80027e8 <MX_GPIO_Init+0x190>)
 80026bc:	f043 0302 	orr.w	r3, r3, #2
 80026c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026c2:	4b49      	ldr	r3, [pc, #292]	; (80027e8 <MX_GPIO_Init+0x190>)
 80026c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	607b      	str	r3, [r7, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80026ce:	2200      	movs	r2, #0
 80026d0:	2120      	movs	r1, #32
 80026d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026d6:	f000 fcfb 	bl	80030d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80026da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80026e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80026ea:	f107 0314 	add.w	r3, r7, #20
 80026ee:	4619      	mov	r1, r3
 80026f0:	483e      	ldr	r0, [pc, #248]	; (80027ec <MX_GPIO_Init+0x194>)
 80026f2:	f000 fb43 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026f6:	2301      	movs	r3, #1
 80026f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026fa:	2301      	movs	r3, #1
 80026fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002702:	2300      	movs	r3, #0
 8002704:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002706:	f107 0314 	add.w	r3, r7, #20
 800270a:	4619      	mov	r1, r3
 800270c:	4837      	ldr	r0, [pc, #220]	; (80027ec <MX_GPIO_Init+0x194>)
 800270e:	f000 fb35 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002712:	2302      	movs	r3, #2
 8002714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002716:	2301      	movs	r3, #1
 8002718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271e:	2300      	movs	r3, #0
 8002720:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002722:	f107 0314 	add.w	r3, r7, #20
 8002726:	4619      	mov	r1, r3
 8002728:	4830      	ldr	r0, [pc, #192]	; (80027ec <MX_GPIO_Init+0x194>)
 800272a:	f000 fb27 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800272e:	2380      	movs	r3, #128	; 0x80
 8002730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002732:	2301      	movs	r3, #1
 8002734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273a:	2300      	movs	r3, #0
 800273c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273e:	f107 0314 	add.w	r3, r7, #20
 8002742:	4619      	mov	r1, r3
 8002744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002748:	f000 fb18 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800274c:	2301      	movs	r3, #1
 800274e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002750:	2301      	movs	r3, #1
 8002752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2300      	movs	r3, #0
 800275a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	4619      	mov	r1, r3
 8002762:	4823      	ldr	r0, [pc, #140]	; (80027f0 <MX_GPIO_Init+0x198>)
 8002764:	f000 fb0a 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002768:	2310      	movs	r3, #16
 800276a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800276c:	2301      	movs	r3, #1
 800276e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002774:	2300      	movs	r3, #0
 8002776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002778:	f107 0314 	add.w	r3, r7, #20
 800277c:	4619      	mov	r1, r3
 800277e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002782:	f000 fafb 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002786:	2340      	movs	r3, #64	; 0x40
 8002788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800278a:	2301      	movs	r3, #1
 800278c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002792:	2300      	movs	r3, #0
 8002794:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002796:	f107 0314 	add.w	r3, r7, #20
 800279a:	4619      	mov	r1, r3
 800279c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a0:	f000 faec 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027a4:	2301      	movs	r3, #1
 80027a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a8:	2301      	movs	r3, #1
 80027aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b0:	2300      	movs	r3, #0
 80027b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	4619      	mov	r1, r3
 80027ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027be:	f000 fadd 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80027c2:	2320      	movs	r3, #32
 80027c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c6:	2301      	movs	r3, #1
 80027c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ce:	2300      	movs	r3, #0
 80027d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d2:	f107 0314 	add.w	r3, r7, #20
 80027d6:	4619      	mov	r1, r3
 80027d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027dc:	f000 face 	bl	8002d7c <HAL_GPIO_Init>
}
 80027e0:	bf00      	nop
 80027e2:	3728      	adds	r7, #40	; 0x28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40021000 	.word	0x40021000
 80027ec:	48000800 	.word	0x48000800
 80027f0:	48000400 	.word	0x48000400

080027f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027f8:	b672      	cpsid	i
}
 80027fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027fc:	e7fe      	b.n	80027fc <Error_Handler+0x8>
	...

08002800 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002806:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <HAL_MspInit+0x44>)
 8002808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800280a:	4a0e      	ldr	r2, [pc, #56]	; (8002844 <HAL_MspInit+0x44>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6613      	str	r3, [r2, #96]	; 0x60
 8002812:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <HAL_MspInit+0x44>)
 8002814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	607b      	str	r3, [r7, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <HAL_MspInit+0x44>)
 8002820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002822:	4a08      	ldr	r2, [pc, #32]	; (8002844 <HAL_MspInit+0x44>)
 8002824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002828:	6593      	str	r3, [r2, #88]	; 0x58
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <HAL_MspInit+0x44>)
 800282c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40021000 	.word	0x40021000

08002848 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002858:	d10b      	bne.n	8002872 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800285a:	4b09      	ldr	r3, [pc, #36]	; (8002880 <HAL_TIM_Base_MspInit+0x38>)
 800285c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285e:	4a08      	ldr	r2, [pc, #32]	; (8002880 <HAL_TIM_Base_MspInit+0x38>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	6593      	str	r3, [r2, #88]	; 0x58
 8002866:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_TIM_Base_MspInit+0x38>)
 8002868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000

08002884 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288c:	f107 030c 	add.w	r3, r7, #12
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	60da      	str	r2, [r3, #12]
 800289a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a4:	d11c      	bne.n	80028e0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a6:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <HAL_TIM_MspPostInit+0x64>)
 80028a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028aa:	4a0f      	ldr	r2, [pc, #60]	; (80028e8 <HAL_TIM_MspPostInit+0x64>)
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028b2:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <HAL_TIM_MspPostInit+0x64>)
 80028b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80028be:	2302      	movs	r3, #2
 80028c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c2:	2302      	movs	r3, #2
 80028c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028ce:	2301      	movs	r3, #1
 80028d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d2:	f107 030c 	add.w	r3, r7, #12
 80028d6:	4619      	mov	r1, r3
 80028d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028dc:	f000 fa4e 	bl	8002d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80028e0:	bf00      	nop
 80028e2:	3720      	adds	r7, #32
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40021000 	.word	0x40021000

080028ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b0ac      	sub	sp, #176	; 0xb0
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	60da      	str	r2, [r3, #12]
 8002902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	2288      	movs	r2, #136	; 0x88
 800290a:	2100      	movs	r1, #0
 800290c:	4618      	mov	r0, r3
 800290e:	f003 fc45 	bl	800619c <memset>
  if(huart->Instance==USART2)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a21      	ldr	r2, [pc, #132]	; (800299c <HAL_UART_MspInit+0xb0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d13b      	bne.n	8002994 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800291c:	2302      	movs	r3, #2
 800291e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002920:	2300      	movs	r3, #0
 8002922:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002924:	f107 0314 	add.w	r3, r7, #20
 8002928:	4618      	mov	r0, r3
 800292a:	f001 fa4d 	bl	8003dc8 <HAL_RCCEx_PeriphCLKConfig>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002934:	f7ff ff5e 	bl	80027f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002938:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <HAL_UART_MspInit+0xb4>)
 800293a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293c:	4a18      	ldr	r2, [pc, #96]	; (80029a0 <HAL_UART_MspInit+0xb4>)
 800293e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002942:	6593      	str	r3, [r2, #88]	; 0x58
 8002944:	4b16      	ldr	r3, [pc, #88]	; (80029a0 <HAL_UART_MspInit+0xb4>)
 8002946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002950:	4b13      	ldr	r3, [pc, #76]	; (80029a0 <HAL_UART_MspInit+0xb4>)
 8002952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002954:	4a12      	ldr	r2, [pc, #72]	; (80029a0 <HAL_UART_MspInit+0xb4>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800295c:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <HAL_UART_MspInit+0xb4>)
 800295e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002968:	230c      	movs	r3, #12
 800296a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296e:	2302      	movs	r3, #2
 8002970:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800297a:	2303      	movs	r3, #3
 800297c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002980:	2307      	movs	r3, #7
 8002982:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002986:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800298a:	4619      	mov	r1, r3
 800298c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002990:	f000 f9f4 	bl	8002d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002994:	bf00      	nop
 8002996:	37b0      	adds	r7, #176	; 0xb0
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40004400 	.word	0x40004400
 80029a0:	40021000 	.word	0x40021000

080029a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029a8:	e7fe      	b.n	80029a8 <NMI_Handler+0x4>

080029aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029aa:	b480      	push	{r7}
 80029ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029ae:	e7fe      	b.n	80029ae <HardFault_Handler+0x4>

080029b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029b4:	e7fe      	b.n	80029b4 <MemManage_Handler+0x4>

080029b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029b6:	b480      	push	{r7}
 80029b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029ba:	e7fe      	b.n	80029ba <BusFault_Handler+0x4>

080029bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029c0:	e7fe      	b.n	80029c0 <UsageFault_Handler+0x4>

080029c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029c2:	b480      	push	{r7}
 80029c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029de:	b480      	push	{r7}
 80029e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029f0:	f000 f89a 	bl	8002b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029f4:	bf00      	nop
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80029fc:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <SystemInit+0x20>)
 80029fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a02:	4a05      	ldr	r2, [pc, #20]	; (8002a18 <SystemInit+0x20>)
 8002a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	e000ed00 	.word	0xe000ed00

08002a1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002a1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a20:	f7ff ffea 	bl	80029f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a24:	480c      	ldr	r0, [pc, #48]	; (8002a58 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a26:	490d      	ldr	r1, [pc, #52]	; (8002a5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a28:	4a0d      	ldr	r2, [pc, #52]	; (8002a60 <LoopForever+0xe>)
  movs r3, #0
 8002a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a2c:	e002      	b.n	8002a34 <LoopCopyDataInit>

08002a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a32:	3304      	adds	r3, #4

08002a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a38:	d3f9      	bcc.n	8002a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a3a:	4a0a      	ldr	r2, [pc, #40]	; (8002a64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a3c:	4c0a      	ldr	r4, [pc, #40]	; (8002a68 <LoopForever+0x16>)
  movs r3, #0
 8002a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a40:	e001      	b.n	8002a46 <LoopFillZerobss>

08002a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a44:	3204      	adds	r2, #4

08002a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a48:	d3fb      	bcc.n	8002a42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a4a:	f003 fb83 	bl	8006154 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a4e:	f7ff f91b 	bl	8001c88 <main>

08002a52 <LoopForever>:

LoopForever:
    b LoopForever
 8002a52:	e7fe      	b.n	8002a52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002a54:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002a60:	0800621c 	.word	0x0800621c
  ldr r2, =_sbss
 8002a64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002a68:	20000100 	.word	0x20000100

08002a6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a6c:	e7fe      	b.n	8002a6c <ADC1_2_IRQHandler>
	...

08002a70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a76:	2300      	movs	r3, #0
 8002a78:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <HAL_Init+0x3c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a0b      	ldr	r2, [pc, #44]	; (8002aac <HAL_Init+0x3c>)
 8002a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a84:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a86:	2003      	movs	r0, #3
 8002a88:	f000 f944 	bl	8002d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	f000 f80f 	bl	8002ab0 <HAL_InitTick>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d002      	beq.n	8002a9e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	71fb      	strb	r3, [r7, #7]
 8002a9c:	e001      	b.n	8002aa2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a9e:	f7ff feaf 	bl	8002800 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40022000 	.word	0x40022000

08002ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002abc:	4b17      	ldr	r3, [pc, #92]	; (8002b1c <HAL_InitTick+0x6c>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d023      	beq.n	8002b0c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ac4:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <HAL_InitTick+0x70>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <HAL_InitTick+0x6c>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	4619      	mov	r1, r3
 8002ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 f941 	bl	8002d62 <HAL_SYSTICK_Config>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10f      	bne.n	8002b06 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b0f      	cmp	r3, #15
 8002aea:	d809      	bhi.n	8002b00 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aec:	2200      	movs	r2, #0
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	f04f 30ff 	mov.w	r0, #4294967295
 8002af4:	f000 f919 	bl	8002d2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002af8:	4a0a      	ldr	r2, [pc, #40]	; (8002b24 <HAL_InitTick+0x74>)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	e007      	b.n	8002b10 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
 8002b04:	e004      	b.n	8002b10 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	73fb      	strb	r3, [r7, #15]
 8002b0a:	e001      	b.n	8002b10 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000008 	.word	0x20000008
 8002b20:	20000000 	.word	0x20000000
 8002b24:	20000004 	.word	0x20000004

08002b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_IncTick+0x20>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	461a      	mov	r2, r3
 8002b32:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <HAL_IncTick+0x24>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4413      	add	r3, r2
 8002b38:	4a04      	ldr	r2, [pc, #16]	; (8002b4c <HAL_IncTick+0x24>)
 8002b3a:	6013      	str	r3, [r2, #0]
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	20000008 	.word	0x20000008
 8002b4c:	200000fc 	.word	0x200000fc

08002b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return uwTick;
 8002b54:	4b03      	ldr	r3, [pc, #12]	; (8002b64 <HAL_GetTick+0x14>)
 8002b56:	681b      	ldr	r3, [r3, #0]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	200000fc 	.word	0x200000fc

08002b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b70:	f7ff ffee 	bl	8002b50 <HAL_GetTick>
 8002b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b80:	d005      	beq.n	8002b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002b82:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <HAL_Delay+0x44>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b8e:	bf00      	nop
 8002b90:	f7ff ffde 	bl	8002b50 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d8f7      	bhi.n	8002b90 <HAL_Delay+0x28>
  {
  }
}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000008 	.word	0x20000008

08002bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bcc:	4013      	ands	r3, r2
 8002bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002be2:	4a04      	ldr	r2, [pc, #16]	; (8002bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	60d3      	str	r3, [r2, #12]
}
 8002be8:	bf00      	nop
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bfc:	4b04      	ldr	r3, [pc, #16]	; (8002c10 <__NVIC_GetPriorityGrouping+0x18>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	0a1b      	lsrs	r3, r3, #8
 8002c02:	f003 0307 	and.w	r3, r3, #7
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	6039      	str	r1, [r7, #0]
 8002c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	db0a      	blt.n	8002c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	490c      	ldr	r1, [pc, #48]	; (8002c60 <__NVIC_SetPriority+0x4c>)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	0112      	lsls	r2, r2, #4
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	440b      	add	r3, r1
 8002c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c3c:	e00a      	b.n	8002c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	4908      	ldr	r1, [pc, #32]	; (8002c64 <__NVIC_SetPriority+0x50>)
 8002c44:	79fb      	ldrb	r3, [r7, #7]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	3b04      	subs	r3, #4
 8002c4c:	0112      	lsls	r2, r2, #4
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	440b      	add	r3, r1
 8002c52:	761a      	strb	r2, [r3, #24]
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	e000e100 	.word	0xe000e100
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b089      	sub	sp, #36	; 0x24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f1c3 0307 	rsb	r3, r3, #7
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	bf28      	it	cs
 8002c86:	2304      	movcs	r3, #4
 8002c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	2b06      	cmp	r3, #6
 8002c90:	d902      	bls.n	8002c98 <NVIC_EncodePriority+0x30>
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3b03      	subs	r3, #3
 8002c96:	e000      	b.n	8002c9a <NVIC_EncodePriority+0x32>
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43da      	mvns	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	401a      	ands	r2, r3
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cba:	43d9      	mvns	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc0:	4313      	orrs	r3, r2
         );
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3724      	adds	r7, #36	; 0x24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
	...

08002cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ce0:	d301      	bcc.n	8002ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e00f      	b.n	8002d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ce6:	4a0a      	ldr	r2, [pc, #40]	; (8002d10 <SysTick_Config+0x40>)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cee:	210f      	movs	r1, #15
 8002cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf4:	f7ff ff8e 	bl	8002c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <SysTick_Config+0x40>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cfe:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <SysTick_Config+0x40>)
 8002d00:	2207      	movs	r2, #7
 8002d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	e000e010 	.word	0xe000e010

08002d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7ff ff47 	bl	8002bb0 <__NVIC_SetPriorityGrouping>
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b086      	sub	sp, #24
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	4603      	mov	r3, r0
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d3c:	f7ff ff5c 	bl	8002bf8 <__NVIC_GetPriorityGrouping>
 8002d40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	6978      	ldr	r0, [r7, #20]
 8002d48:	f7ff ff8e 	bl	8002c68 <NVIC_EncodePriority>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d52:	4611      	mov	r1, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff ff5d 	bl	8002c14 <__NVIC_SetPriority>
}
 8002d5a:	bf00      	nop
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff ffb0 	bl	8002cd0 <SysTick_Config>
 8002d70:	4603      	mov	r3, r0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b087      	sub	sp, #28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d8a:	e17f      	b.n	800308c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	2101      	movs	r1, #1
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	fa01 f303 	lsl.w	r3, r1, r3
 8002d98:	4013      	ands	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 8171 	beq.w	8003086 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 0303 	and.w	r3, r3, #3
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d005      	beq.n	8002dbc <HAL_GPIO_Init+0x40>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d130      	bne.n	8002e1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	68da      	ldr	r2, [r3, #12]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002df2:	2201      	movs	r2, #1
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	091b      	lsrs	r3, r3, #4
 8002e08:	f003 0201 	and.w	r2, r3, #1
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d118      	bne.n	8002e5c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002e30:	2201      	movs	r2, #1
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	08db      	lsrs	r3, r3, #3
 8002e46:	f003 0201 	and.w	r2, r3, #1
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d017      	beq.n	8002e98 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	2203      	movs	r2, #3
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d123      	bne.n	8002eec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	08da      	lsrs	r2, r3, #3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3208      	adds	r2, #8
 8002eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	220f      	movs	r2, #15
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	08da      	lsrs	r2, r3, #3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3208      	adds	r2, #8
 8002ee6:	6939      	ldr	r1, [r7, #16]
 8002ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4013      	ands	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 0203 	and.w	r2, r3, #3
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 80ac 	beq.w	8003086 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2e:	4b5f      	ldr	r3, [pc, #380]	; (80030ac <HAL_GPIO_Init+0x330>)
 8002f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f32:	4a5e      	ldr	r2, [pc, #376]	; (80030ac <HAL_GPIO_Init+0x330>)
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	6613      	str	r3, [r2, #96]	; 0x60
 8002f3a:	4b5c      	ldr	r3, [pc, #368]	; (80030ac <HAL_GPIO_Init+0x330>)
 8002f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	60bb      	str	r3, [r7, #8]
 8002f44:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f46:	4a5a      	ldr	r2, [pc, #360]	; (80030b0 <HAL_GPIO_Init+0x334>)
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	089b      	lsrs	r3, r3, #2
 8002f4c:	3302      	adds	r3, #2
 8002f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f52:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	220f      	movs	r2, #15
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4013      	ands	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f70:	d025      	beq.n	8002fbe <HAL_GPIO_Init+0x242>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a4f      	ldr	r2, [pc, #316]	; (80030b4 <HAL_GPIO_Init+0x338>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d01f      	beq.n	8002fba <HAL_GPIO_Init+0x23e>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a4e      	ldr	r2, [pc, #312]	; (80030b8 <HAL_GPIO_Init+0x33c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d019      	beq.n	8002fb6 <HAL_GPIO_Init+0x23a>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a4d      	ldr	r2, [pc, #308]	; (80030bc <HAL_GPIO_Init+0x340>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d013      	beq.n	8002fb2 <HAL_GPIO_Init+0x236>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a4c      	ldr	r2, [pc, #304]	; (80030c0 <HAL_GPIO_Init+0x344>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d00d      	beq.n	8002fae <HAL_GPIO_Init+0x232>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a4b      	ldr	r2, [pc, #300]	; (80030c4 <HAL_GPIO_Init+0x348>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d007      	beq.n	8002faa <HAL_GPIO_Init+0x22e>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a4a      	ldr	r2, [pc, #296]	; (80030c8 <HAL_GPIO_Init+0x34c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d101      	bne.n	8002fa6 <HAL_GPIO_Init+0x22a>
 8002fa2:	2306      	movs	r3, #6
 8002fa4:	e00c      	b.n	8002fc0 <HAL_GPIO_Init+0x244>
 8002fa6:	2307      	movs	r3, #7
 8002fa8:	e00a      	b.n	8002fc0 <HAL_GPIO_Init+0x244>
 8002faa:	2305      	movs	r3, #5
 8002fac:	e008      	b.n	8002fc0 <HAL_GPIO_Init+0x244>
 8002fae:	2304      	movs	r3, #4
 8002fb0:	e006      	b.n	8002fc0 <HAL_GPIO_Init+0x244>
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e004      	b.n	8002fc0 <HAL_GPIO_Init+0x244>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e002      	b.n	8002fc0 <HAL_GPIO_Init+0x244>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e000      	b.n	8002fc0 <HAL_GPIO_Init+0x244>
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	f002 0203 	and.w	r2, r2, #3
 8002fc6:	0092      	lsls	r2, r2, #2
 8002fc8:	4093      	lsls	r3, r2
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fd0:	4937      	ldr	r1, [pc, #220]	; (80030b0 <HAL_GPIO_Init+0x334>)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	089b      	lsrs	r3, r3, #2
 8002fd6:	3302      	adds	r3, #2
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fde:	4b3b      	ldr	r3, [pc, #236]	; (80030cc <HAL_GPIO_Init+0x350>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4013      	ands	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003002:	4a32      	ldr	r2, [pc, #200]	; (80030cc <HAL_GPIO_Init+0x350>)
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003008:	4b30      	ldr	r3, [pc, #192]	; (80030cc <HAL_GPIO_Init+0x350>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	43db      	mvns	r3, r3
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	4013      	ands	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800302c:	4a27      	ldr	r2, [pc, #156]	; (80030cc <HAL_GPIO_Init+0x350>)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003032:	4b26      	ldr	r3, [pc, #152]	; (80030cc <HAL_GPIO_Init+0x350>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	43db      	mvns	r3, r3
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	4013      	ands	r3, r2
 8003040:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4313      	orrs	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003056:	4a1d      	ldr	r2, [pc, #116]	; (80030cc <HAL_GPIO_Init+0x350>)
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800305c:	4b1b      	ldr	r3, [pc, #108]	; (80030cc <HAL_GPIO_Init+0x350>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	43db      	mvns	r3, r3
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4013      	ands	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003080:	4a12      	ldr	r2, [pc, #72]	; (80030cc <HAL_GPIO_Init+0x350>)
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	3301      	adds	r3, #1
 800308a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	fa22 f303 	lsr.w	r3, r2, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	f47f ae78 	bne.w	8002d8c <HAL_GPIO_Init+0x10>
  }
}
 800309c:	bf00      	nop
 800309e:	bf00      	nop
 80030a0:	371c      	adds	r7, #28
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40010000 	.word	0x40010000
 80030b4:	48000400 	.word	0x48000400
 80030b8:	48000800 	.word	0x48000800
 80030bc:	48000c00 	.word	0x48000c00
 80030c0:	48001000 	.word	0x48001000
 80030c4:	48001400 	.word	0x48001400
 80030c8:	48001800 	.word	0x48001800
 80030cc:	40010400 	.word	0x40010400

080030d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	807b      	strh	r3, [r7, #2]
 80030dc:	4613      	mov	r3, r2
 80030de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030e0:	787b      	ldrb	r3, [r7, #1]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030e6:	887a      	ldrh	r2, [r7, #2]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030ec:	e002      	b.n	80030f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030ee:	887a      	ldrh	r2, [r7, #2]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003104:	4b04      	ldr	r3, [pc, #16]	; (8003118 <HAL_PWREx_GetVoltageRange+0x18>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800310c:	4618      	mov	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40007000 	.word	0x40007000

0800311c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800312a:	d130      	bne.n	800318e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800312c:	4b23      	ldr	r3, [pc, #140]	; (80031bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003138:	d038      	beq.n	80031ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800313a:	4b20      	ldr	r3, [pc, #128]	; (80031bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003142:	4a1e      	ldr	r2, [pc, #120]	; (80031bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003144:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003148:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800314a:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2232      	movs	r2, #50	; 0x32
 8003150:	fb02 f303 	mul.w	r3, r2, r3
 8003154:	4a1b      	ldr	r2, [pc, #108]	; (80031c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	0c9b      	lsrs	r3, r3, #18
 800315c:	3301      	adds	r3, #1
 800315e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003160:	e002      	b.n	8003168 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	3b01      	subs	r3, #1
 8003166:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003168:	4b14      	ldr	r3, [pc, #80]	; (80031bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003174:	d102      	bne.n	800317c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1f2      	bne.n	8003162 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800317c:	4b0f      	ldr	r3, [pc, #60]	; (80031bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003188:	d110      	bne.n	80031ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e00f      	b.n	80031ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800318e:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800319a:	d007      	beq.n	80031ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800319c:	4b07      	ldr	r3, [pc, #28]	; (80031bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031a4:	4a05      	ldr	r2, [pc, #20]	; (80031bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40007000 	.word	0x40007000
 80031c0:	20000000 	.word	0x20000000
 80031c4:	431bde83 	.word	0x431bde83

080031c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b088      	sub	sp, #32
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e3ca      	b.n	8003970 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031da:	4b97      	ldr	r3, [pc, #604]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031e4:	4b94      	ldr	r3, [pc, #592]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f003 0303 	and.w	r3, r3, #3
 80031ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 80e4 	beq.w	80033c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d007      	beq.n	8003212 <HAL_RCC_OscConfig+0x4a>
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	2b0c      	cmp	r3, #12
 8003206:	f040 808b 	bne.w	8003320 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2b01      	cmp	r3, #1
 800320e:	f040 8087 	bne.w	8003320 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003212:	4b89      	ldr	r3, [pc, #548]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d005      	beq.n	800322a <HAL_RCC_OscConfig+0x62>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e3a2      	b.n	8003970 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1a      	ldr	r2, [r3, #32]
 800322e:	4b82      	ldr	r3, [pc, #520]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d004      	beq.n	8003244 <HAL_RCC_OscConfig+0x7c>
 800323a:	4b7f      	ldr	r3, [pc, #508]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003242:	e005      	b.n	8003250 <HAL_RCC_OscConfig+0x88>
 8003244:	4b7c      	ldr	r3, [pc, #496]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 8003246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800324a:	091b      	lsrs	r3, r3, #4
 800324c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003250:	4293      	cmp	r3, r2
 8003252:	d223      	bcs.n	800329c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	4618      	mov	r0, r3
 800325a:	f000 fd55 	bl	8003d08 <RCC_SetFlashLatencyFromMSIRange>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e383      	b.n	8003970 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003268:	4b73      	ldr	r3, [pc, #460]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a72      	ldr	r2, [pc, #456]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 800326e:	f043 0308 	orr.w	r3, r3, #8
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	4b70      	ldr	r3, [pc, #448]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	496d      	ldr	r1, [pc, #436]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 8003282:	4313      	orrs	r3, r2
 8003284:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003286:	4b6c      	ldr	r3, [pc, #432]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	021b      	lsls	r3, r3, #8
 8003294:	4968      	ldr	r1, [pc, #416]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 8003296:	4313      	orrs	r3, r2
 8003298:	604b      	str	r3, [r1, #4]
 800329a:	e025      	b.n	80032e8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800329c:	4b66      	ldr	r3, [pc, #408]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a65      	ldr	r2, [pc, #404]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 80032a2:	f043 0308 	orr.w	r3, r3, #8
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	4b63      	ldr	r3, [pc, #396]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	4960      	ldr	r1, [pc, #384]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032ba:	4b5f      	ldr	r3, [pc, #380]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	021b      	lsls	r3, r3, #8
 80032c8:	495b      	ldr	r1, [pc, #364]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d109      	bne.n	80032e8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 fd15 	bl	8003d08 <RCC_SetFlashLatencyFromMSIRange>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e343      	b.n	8003970 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032e8:	f000 fc4a 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 80032ec:	4602      	mov	r2, r0
 80032ee:	4b52      	ldr	r3, [pc, #328]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	091b      	lsrs	r3, r3, #4
 80032f4:	f003 030f 	and.w	r3, r3, #15
 80032f8:	4950      	ldr	r1, [pc, #320]	; (800343c <HAL_RCC_OscConfig+0x274>)
 80032fa:	5ccb      	ldrb	r3, [r1, r3]
 80032fc:	f003 031f 	and.w	r3, r3, #31
 8003300:	fa22 f303 	lsr.w	r3, r2, r3
 8003304:	4a4e      	ldr	r2, [pc, #312]	; (8003440 <HAL_RCC_OscConfig+0x278>)
 8003306:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003308:	4b4e      	ldr	r3, [pc, #312]	; (8003444 <HAL_RCC_OscConfig+0x27c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff fbcf 	bl	8002ab0 <HAL_InitTick>
 8003312:	4603      	mov	r3, r0
 8003314:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003316:	7bfb      	ldrb	r3, [r7, #15]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d052      	beq.n	80033c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	e327      	b.n	8003970 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d032      	beq.n	800338e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003328:	4b43      	ldr	r3, [pc, #268]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a42      	ldr	r2, [pc, #264]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003334:	f7ff fc0c 	bl	8002b50 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800333c:	f7ff fc08 	bl	8002b50 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e310      	b.n	8003970 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800334e:	4b3a      	ldr	r3, [pc, #232]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0f0      	beq.n	800333c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800335a:	4b37      	ldr	r3, [pc, #220]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a36      	ldr	r2, [pc, #216]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 8003360:	f043 0308 	orr.w	r3, r3, #8
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	4b34      	ldr	r3, [pc, #208]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	4931      	ldr	r1, [pc, #196]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 8003374:	4313      	orrs	r3, r2
 8003376:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003378:	4b2f      	ldr	r3, [pc, #188]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	021b      	lsls	r3, r3, #8
 8003386:	492c      	ldr	r1, [pc, #176]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 8003388:	4313      	orrs	r3, r2
 800338a:	604b      	str	r3, [r1, #4]
 800338c:	e01a      	b.n	80033c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800338e:	4b2a      	ldr	r3, [pc, #168]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a29      	ldr	r2, [pc, #164]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800339a:	f7ff fbd9 	bl	8002b50 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033a2:	f7ff fbd5 	bl	8002b50 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e2dd      	b.n	8003970 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033b4:	4b20      	ldr	r3, [pc, #128]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1f0      	bne.n	80033a2 <HAL_RCC_OscConfig+0x1da>
 80033c0:	e000      	b.n	80033c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d074      	beq.n	80034ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d005      	beq.n	80033e2 <HAL_RCC_OscConfig+0x21a>
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	2b0c      	cmp	r3, #12
 80033da:	d10e      	bne.n	80033fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d10b      	bne.n	80033fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e2:	4b15      	ldr	r3, [pc, #84]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d064      	beq.n	80034b8 <HAL_RCC_OscConfig+0x2f0>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d160      	bne.n	80034b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e2ba      	b.n	8003970 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003402:	d106      	bne.n	8003412 <HAL_RCC_OscConfig+0x24a>
 8003404:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a0b      	ldr	r2, [pc, #44]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 800340a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340e:	6013      	str	r3, [r2, #0]
 8003410:	e026      	b.n	8003460 <HAL_RCC_OscConfig+0x298>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800341a:	d115      	bne.n	8003448 <HAL_RCC_OscConfig+0x280>
 800341c:	4b06      	ldr	r3, [pc, #24]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a05      	ldr	r2, [pc, #20]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 8003422:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003426:	6013      	str	r3, [r2, #0]
 8003428:	4b03      	ldr	r3, [pc, #12]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a02      	ldr	r2, [pc, #8]	; (8003438 <HAL_RCC_OscConfig+0x270>)
 800342e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003432:	6013      	str	r3, [r2, #0]
 8003434:	e014      	b.n	8003460 <HAL_RCC_OscConfig+0x298>
 8003436:	bf00      	nop
 8003438:	40021000 	.word	0x40021000
 800343c:	080061c4 	.word	0x080061c4
 8003440:	20000000 	.word	0x20000000
 8003444:	20000004 	.word	0x20000004
 8003448:	4ba0      	ldr	r3, [pc, #640]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a9f      	ldr	r2, [pc, #636]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 800344e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003452:	6013      	str	r3, [r2, #0]
 8003454:	4b9d      	ldr	r3, [pc, #628]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a9c      	ldr	r2, [pc, #624]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 800345a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800345e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d013      	beq.n	8003490 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003468:	f7ff fb72 	bl	8002b50 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003470:	f7ff fb6e 	bl	8002b50 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b64      	cmp	r3, #100	; 0x64
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e276      	b.n	8003970 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003482:	4b92      	ldr	r3, [pc, #584]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0f0      	beq.n	8003470 <HAL_RCC_OscConfig+0x2a8>
 800348e:	e014      	b.n	80034ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003490:	f7ff fb5e 	bl	8002b50 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003498:	f7ff fb5a 	bl	8002b50 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b64      	cmp	r3, #100	; 0x64
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e262      	b.n	8003970 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034aa:	4b88      	ldr	r3, [pc, #544]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0x2d0>
 80034b6:	e000      	b.n	80034ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d060      	beq.n	8003588 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d005      	beq.n	80034d8 <HAL_RCC_OscConfig+0x310>
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	2b0c      	cmp	r3, #12
 80034d0:	d119      	bne.n	8003506 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d116      	bne.n	8003506 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034d8:	4b7c      	ldr	r3, [pc, #496]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d005      	beq.n	80034f0 <HAL_RCC_OscConfig+0x328>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e23f      	b.n	8003970 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f0:	4b76      	ldr	r3, [pc, #472]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	061b      	lsls	r3, r3, #24
 80034fe:	4973      	ldr	r1, [pc, #460]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 8003500:	4313      	orrs	r3, r2
 8003502:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003504:	e040      	b.n	8003588 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d023      	beq.n	8003556 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800350e:	4b6f      	ldr	r3, [pc, #444]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a6e      	ldr	r2, [pc, #440]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 8003514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003518:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351a:	f7ff fb19 	bl	8002b50 <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003520:	e008      	b.n	8003534 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003522:	f7ff fb15 	bl	8002b50 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e21d      	b.n	8003970 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003534:	4b65      	ldr	r3, [pc, #404]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0f0      	beq.n	8003522 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003540:	4b62      	ldr	r3, [pc, #392]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	061b      	lsls	r3, r3, #24
 800354e:	495f      	ldr	r1, [pc, #380]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 8003550:	4313      	orrs	r3, r2
 8003552:	604b      	str	r3, [r1, #4]
 8003554:	e018      	b.n	8003588 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003556:	4b5d      	ldr	r3, [pc, #372]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a5c      	ldr	r2, [pc, #368]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 800355c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003562:	f7ff faf5 	bl	8002b50 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800356a:	f7ff faf1 	bl	8002b50 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e1f9      	b.n	8003970 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800357c:	4b53      	ldr	r3, [pc, #332]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1f0      	bne.n	800356a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b00      	cmp	r3, #0
 8003592:	d03c      	beq.n	800360e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d01c      	beq.n	80035d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800359c:	4b4b      	ldr	r3, [pc, #300]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 800359e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035a2:	4a4a      	ldr	r2, [pc, #296]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ac:	f7ff fad0 	bl	8002b50 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035b4:	f7ff facc 	bl	8002b50 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e1d4      	b.n	8003970 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035c6:	4b41      	ldr	r3, [pc, #260]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 80035c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0ef      	beq.n	80035b4 <HAL_RCC_OscConfig+0x3ec>
 80035d4:	e01b      	b.n	800360e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035d6:	4b3d      	ldr	r3, [pc, #244]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 80035d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035dc:	4a3b      	ldr	r2, [pc, #236]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 80035de:	f023 0301 	bic.w	r3, r3, #1
 80035e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e6:	f7ff fab3 	bl	8002b50 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ee:	f7ff faaf 	bl	8002b50 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e1b7      	b.n	8003970 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003600:	4b32      	ldr	r3, [pc, #200]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 8003602:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1ef      	bne.n	80035ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 80a6 	beq.w	8003768 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800361c:	2300      	movs	r3, #0
 800361e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003620:	4b2a      	ldr	r3, [pc, #168]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 8003622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10d      	bne.n	8003648 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800362c:	4b27      	ldr	r3, [pc, #156]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 800362e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003630:	4a26      	ldr	r2, [pc, #152]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 8003632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003636:	6593      	str	r3, [r2, #88]	; 0x58
 8003638:	4b24      	ldr	r3, [pc, #144]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 800363a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003640:	60bb      	str	r3, [r7, #8]
 8003642:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003644:	2301      	movs	r3, #1
 8003646:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003648:	4b21      	ldr	r3, [pc, #132]	; (80036d0 <HAL_RCC_OscConfig+0x508>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003650:	2b00      	cmp	r3, #0
 8003652:	d118      	bne.n	8003686 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003654:	4b1e      	ldr	r3, [pc, #120]	; (80036d0 <HAL_RCC_OscConfig+0x508>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a1d      	ldr	r2, [pc, #116]	; (80036d0 <HAL_RCC_OscConfig+0x508>)
 800365a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800365e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003660:	f7ff fa76 	bl	8002b50 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003668:	f7ff fa72 	bl	8002b50 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e17a      	b.n	8003970 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800367a:	4b15      	ldr	r3, [pc, #84]	; (80036d0 <HAL_RCC_OscConfig+0x508>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0f0      	beq.n	8003668 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d108      	bne.n	80036a0 <HAL_RCC_OscConfig+0x4d8>
 800368e:	4b0f      	ldr	r3, [pc, #60]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 8003690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003694:	4a0d      	ldr	r2, [pc, #52]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 8003696:	f043 0301 	orr.w	r3, r3, #1
 800369a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800369e:	e029      	b.n	80036f4 <HAL_RCC_OscConfig+0x52c>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b05      	cmp	r3, #5
 80036a6:	d115      	bne.n	80036d4 <HAL_RCC_OscConfig+0x50c>
 80036a8:	4b08      	ldr	r3, [pc, #32]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 80036aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ae:	4a07      	ldr	r2, [pc, #28]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 80036b0:	f043 0304 	orr.w	r3, r3, #4
 80036b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036b8:	4b04      	ldr	r3, [pc, #16]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 80036ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036be:	4a03      	ldr	r2, [pc, #12]	; (80036cc <HAL_RCC_OscConfig+0x504>)
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036c8:	e014      	b.n	80036f4 <HAL_RCC_OscConfig+0x52c>
 80036ca:	bf00      	nop
 80036cc:	40021000 	.word	0x40021000
 80036d0:	40007000 	.word	0x40007000
 80036d4:	4b9c      	ldr	r3, [pc, #624]	; (8003948 <HAL_RCC_OscConfig+0x780>)
 80036d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036da:	4a9b      	ldr	r2, [pc, #620]	; (8003948 <HAL_RCC_OscConfig+0x780>)
 80036dc:	f023 0301 	bic.w	r3, r3, #1
 80036e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036e4:	4b98      	ldr	r3, [pc, #608]	; (8003948 <HAL_RCC_OscConfig+0x780>)
 80036e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ea:	4a97      	ldr	r2, [pc, #604]	; (8003948 <HAL_RCC_OscConfig+0x780>)
 80036ec:	f023 0304 	bic.w	r3, r3, #4
 80036f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d016      	beq.n	800372a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fc:	f7ff fa28 	bl	8002b50 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003702:	e00a      	b.n	800371a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003704:	f7ff fa24 	bl	8002b50 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003712:	4293      	cmp	r3, r2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e12a      	b.n	8003970 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800371a:	4b8b      	ldr	r3, [pc, #556]	; (8003948 <HAL_RCC_OscConfig+0x780>)
 800371c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0ed      	beq.n	8003704 <HAL_RCC_OscConfig+0x53c>
 8003728:	e015      	b.n	8003756 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372a:	f7ff fa11 	bl	8002b50 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003730:	e00a      	b.n	8003748 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003732:	f7ff fa0d 	bl	8002b50 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003740:	4293      	cmp	r3, r2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e113      	b.n	8003970 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003748:	4b7f      	ldr	r3, [pc, #508]	; (8003948 <HAL_RCC_OscConfig+0x780>)
 800374a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1ed      	bne.n	8003732 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003756:	7ffb      	ldrb	r3, [r7, #31]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d105      	bne.n	8003768 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800375c:	4b7a      	ldr	r3, [pc, #488]	; (8003948 <HAL_RCC_OscConfig+0x780>)
 800375e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003760:	4a79      	ldr	r2, [pc, #484]	; (8003948 <HAL_RCC_OscConfig+0x780>)
 8003762:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003766:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 80fe 	beq.w	800396e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003776:	2b02      	cmp	r3, #2
 8003778:	f040 80d0 	bne.w	800391c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800377c:	4b72      	ldr	r3, [pc, #456]	; (8003948 <HAL_RCC_OscConfig+0x780>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f003 0203 	and.w	r2, r3, #3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378c:	429a      	cmp	r2, r3
 800378e:	d130      	bne.n	80037f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	3b01      	subs	r3, #1
 800379c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800379e:	429a      	cmp	r2, r3
 80037a0:	d127      	bne.n	80037f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d11f      	bne.n	80037f2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037bc:	2a07      	cmp	r2, #7
 80037be:	bf14      	ite	ne
 80037c0:	2201      	movne	r2, #1
 80037c2:	2200      	moveq	r2, #0
 80037c4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d113      	bne.n	80037f2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d4:	085b      	lsrs	r3, r3, #1
 80037d6:	3b01      	subs	r3, #1
 80037d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80037da:	429a      	cmp	r2, r3
 80037dc:	d109      	bne.n	80037f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	085b      	lsrs	r3, r3, #1
 80037ea:	3b01      	subs	r3, #1
 80037ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d06e      	beq.n	80038d0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	2b0c      	cmp	r3, #12
 80037f6:	d069      	beq.n	80038cc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80037f8:	4b53      	ldr	r3, [pc, #332]	; (8003948 <HAL_RCC_OscConfig+0x780>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d105      	bne.n	8003810 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003804:	4b50      	ldr	r3, [pc, #320]	; (8003948 <HAL_RCC_OscConfig+0x780>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e0ad      	b.n	8003970 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003814:	4b4c      	ldr	r3, [pc, #304]	; (8003948 <HAL_RCC_OscConfig+0x780>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a4b      	ldr	r2, [pc, #300]	; (8003948 <HAL_RCC_OscConfig+0x780>)
 800381a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800381e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003820:	f7ff f996 	bl	8002b50 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003828:	f7ff f992 	bl	8002b50 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e09a      	b.n	8003970 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800383a:	4b43      	ldr	r3, [pc, #268]	; (8003948 <HAL_RCC_OscConfig+0x780>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f0      	bne.n	8003828 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003846:	4b40      	ldr	r3, [pc, #256]	; (8003948 <HAL_RCC_OscConfig+0x780>)
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	4b40      	ldr	r3, [pc, #256]	; (800394c <HAL_RCC_OscConfig+0x784>)
 800384c:	4013      	ands	r3, r2
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003856:	3a01      	subs	r2, #1
 8003858:	0112      	lsls	r2, r2, #4
 800385a:	4311      	orrs	r1, r2
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003860:	0212      	lsls	r2, r2, #8
 8003862:	4311      	orrs	r1, r2
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003868:	0852      	lsrs	r2, r2, #1
 800386a:	3a01      	subs	r2, #1
 800386c:	0552      	lsls	r2, r2, #21
 800386e:	4311      	orrs	r1, r2
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003874:	0852      	lsrs	r2, r2, #1
 8003876:	3a01      	subs	r2, #1
 8003878:	0652      	lsls	r2, r2, #25
 800387a:	4311      	orrs	r1, r2
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003880:	0912      	lsrs	r2, r2, #4
 8003882:	0452      	lsls	r2, r2, #17
 8003884:	430a      	orrs	r2, r1
 8003886:	4930      	ldr	r1, [pc, #192]	; (8003948 <HAL_RCC_OscConfig+0x780>)
 8003888:	4313      	orrs	r3, r2
 800388a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800388c:	4b2e      	ldr	r3, [pc, #184]	; (8003948 <HAL_RCC_OscConfig+0x780>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a2d      	ldr	r2, [pc, #180]	; (8003948 <HAL_RCC_OscConfig+0x780>)
 8003892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003896:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003898:	4b2b      	ldr	r3, [pc, #172]	; (8003948 <HAL_RCC_OscConfig+0x780>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	4a2a      	ldr	r2, [pc, #168]	; (8003948 <HAL_RCC_OscConfig+0x780>)
 800389e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038a4:	f7ff f954 	bl	8002b50 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ac:	f7ff f950 	bl	8002b50 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e058      	b.n	8003970 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038be:	4b22      	ldr	r3, [pc, #136]	; (8003948 <HAL_RCC_OscConfig+0x780>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038ca:	e050      	b.n	800396e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e04f      	b.n	8003970 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038d0:	4b1d      	ldr	r3, [pc, #116]	; (8003948 <HAL_RCC_OscConfig+0x780>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d148      	bne.n	800396e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038dc:	4b1a      	ldr	r3, [pc, #104]	; (8003948 <HAL_RCC_OscConfig+0x780>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a19      	ldr	r2, [pc, #100]	; (8003948 <HAL_RCC_OscConfig+0x780>)
 80038e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038e8:	4b17      	ldr	r3, [pc, #92]	; (8003948 <HAL_RCC_OscConfig+0x780>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4a16      	ldr	r2, [pc, #88]	; (8003948 <HAL_RCC_OscConfig+0x780>)
 80038ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038f4:	f7ff f92c 	bl	8002b50 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fc:	f7ff f928 	bl	8002b50 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e030      	b.n	8003970 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800390e:	4b0e      	ldr	r3, [pc, #56]	; (8003948 <HAL_RCC_OscConfig+0x780>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f0      	beq.n	80038fc <HAL_RCC_OscConfig+0x734>
 800391a:	e028      	b.n	800396e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	2b0c      	cmp	r3, #12
 8003920:	d023      	beq.n	800396a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003922:	4b09      	ldr	r3, [pc, #36]	; (8003948 <HAL_RCC_OscConfig+0x780>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a08      	ldr	r2, [pc, #32]	; (8003948 <HAL_RCC_OscConfig+0x780>)
 8003928:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800392c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392e:	f7ff f90f 	bl	8002b50 <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003934:	e00c      	b.n	8003950 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003936:	f7ff f90b 	bl	8002b50 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d905      	bls.n	8003950 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e013      	b.n	8003970 <HAL_RCC_OscConfig+0x7a8>
 8003948:	40021000 	.word	0x40021000
 800394c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003950:	4b09      	ldr	r3, [pc, #36]	; (8003978 <HAL_RCC_OscConfig+0x7b0>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1ec      	bne.n	8003936 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800395c:	4b06      	ldr	r3, [pc, #24]	; (8003978 <HAL_RCC_OscConfig+0x7b0>)
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	4905      	ldr	r1, [pc, #20]	; (8003978 <HAL_RCC_OscConfig+0x7b0>)
 8003962:	4b06      	ldr	r3, [pc, #24]	; (800397c <HAL_RCC_OscConfig+0x7b4>)
 8003964:	4013      	ands	r3, r2
 8003966:	60cb      	str	r3, [r1, #12]
 8003968:	e001      	b.n	800396e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3720      	adds	r7, #32
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40021000 	.word	0x40021000
 800397c:	feeefffc 	.word	0xfeeefffc

08003980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e0e7      	b.n	8003b64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003994:	4b75      	ldr	r3, [pc, #468]	; (8003b6c <HAL_RCC_ClockConfig+0x1ec>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d910      	bls.n	80039c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a2:	4b72      	ldr	r3, [pc, #456]	; (8003b6c <HAL_RCC_ClockConfig+0x1ec>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f023 0207 	bic.w	r2, r3, #7
 80039aa:	4970      	ldr	r1, [pc, #448]	; (8003b6c <HAL_RCC_ClockConfig+0x1ec>)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	4b6e      	ldr	r3, [pc, #440]	; (8003b6c <HAL_RCC_ClockConfig+0x1ec>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0cf      	b.n	8003b64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d010      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	4b66      	ldr	r3, [pc, #408]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039dc:	429a      	cmp	r2, r3
 80039de:	d908      	bls.n	80039f2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e0:	4b63      	ldr	r3, [pc, #396]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	4960      	ldr	r1, [pc, #384]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d04c      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b03      	cmp	r3, #3
 8003a04:	d107      	bne.n	8003a16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a06:	4b5a      	ldr	r3, [pc, #360]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d121      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e0a6      	b.n	8003b64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d107      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a1e:	4b54      	ldr	r3, [pc, #336]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d115      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e09a      	b.n	8003b64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d107      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a36:	4b4e      	ldr	r3, [pc, #312]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d109      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e08e      	b.n	8003b64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a46:	4b4a      	ldr	r3, [pc, #296]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e086      	b.n	8003b64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a56:	4b46      	ldr	r3, [pc, #280]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f023 0203 	bic.w	r2, r3, #3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	4943      	ldr	r1, [pc, #268]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a68:	f7ff f872 	bl	8002b50 <HAL_GetTick>
 8003a6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6e:	e00a      	b.n	8003a86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a70:	f7ff f86e 	bl	8002b50 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e06e      	b.n	8003b64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a86:	4b3a      	ldr	r3, [pc, #232]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 020c 	and.w	r2, r3, #12
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d1eb      	bne.n	8003a70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d010      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	4b31      	ldr	r3, [pc, #196]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d208      	bcs.n	8003ac6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab4:	4b2e      	ldr	r3, [pc, #184]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	492b      	ldr	r1, [pc, #172]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ac6:	4b29      	ldr	r3, [pc, #164]	; (8003b6c <HAL_RCC_ClockConfig+0x1ec>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d210      	bcs.n	8003af6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad4:	4b25      	ldr	r3, [pc, #148]	; (8003b6c <HAL_RCC_ClockConfig+0x1ec>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f023 0207 	bic.w	r2, r3, #7
 8003adc:	4923      	ldr	r1, [pc, #140]	; (8003b6c <HAL_RCC_ClockConfig+0x1ec>)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae4:	4b21      	ldr	r3, [pc, #132]	; (8003b6c <HAL_RCC_ClockConfig+0x1ec>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d001      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e036      	b.n	8003b64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d008      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b02:	4b1b      	ldr	r3, [pc, #108]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	4918      	ldr	r1, [pc, #96]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0308 	and.w	r3, r3, #8
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d009      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b20:	4b13      	ldr	r3, [pc, #76]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4910      	ldr	r1, [pc, #64]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b34:	f000 f824 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	4b0d      	ldr	r3, [pc, #52]	; (8003b70 <HAL_RCC_ClockConfig+0x1f0>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	091b      	lsrs	r3, r3, #4
 8003b40:	f003 030f 	and.w	r3, r3, #15
 8003b44:	490b      	ldr	r1, [pc, #44]	; (8003b74 <HAL_RCC_ClockConfig+0x1f4>)
 8003b46:	5ccb      	ldrb	r3, [r1, r3]
 8003b48:	f003 031f 	and.w	r3, r3, #31
 8003b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b50:	4a09      	ldr	r2, [pc, #36]	; (8003b78 <HAL_RCC_ClockConfig+0x1f8>)
 8003b52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b54:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <HAL_RCC_ClockConfig+0x1fc>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fe ffa9 	bl	8002ab0 <HAL_InitTick>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b62:	7afb      	ldrb	r3, [r7, #11]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40022000 	.word	0x40022000
 8003b70:	40021000 	.word	0x40021000
 8003b74:	080061c4 	.word	0x080061c4
 8003b78:	20000000 	.word	0x20000000
 8003b7c:	20000004 	.word	0x20000004

08003b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b089      	sub	sp, #36	; 0x24
 8003b84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	61fb      	str	r3, [r7, #28]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b8e:	4b3e      	ldr	r3, [pc, #248]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 030c 	and.w	r3, r3, #12
 8003b96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b98:	4b3b      	ldr	r3, [pc, #236]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f003 0303 	and.w	r3, r3, #3
 8003ba0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	2b0c      	cmp	r3, #12
 8003bac:	d121      	bne.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d11e      	bne.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bb4:	4b34      	ldr	r3, [pc, #208]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0308 	and.w	r3, r3, #8
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d107      	bne.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bc0:	4b31      	ldr	r3, [pc, #196]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc6:	0a1b      	lsrs	r3, r3, #8
 8003bc8:	f003 030f 	and.w	r3, r3, #15
 8003bcc:	61fb      	str	r3, [r7, #28]
 8003bce:	e005      	b.n	8003bdc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003bd0:	4b2d      	ldr	r3, [pc, #180]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	091b      	lsrs	r3, r3, #4
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003bdc:	4a2b      	ldr	r2, [pc, #172]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003be4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10d      	bne.n	8003c08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bf0:	e00a      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d102      	bne.n	8003bfe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bf8:	4b25      	ldr	r3, [pc, #148]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bfa:	61bb      	str	r3, [r7, #24]
 8003bfc:	e004      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d101      	bne.n	8003c08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c04:	4b23      	ldr	r3, [pc, #140]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	2b0c      	cmp	r3, #12
 8003c0c:	d134      	bne.n	8003c78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c0e:	4b1e      	ldr	r3, [pc, #120]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d003      	beq.n	8003c26 <HAL_RCC_GetSysClockFreq+0xa6>
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b03      	cmp	r3, #3
 8003c22:	d003      	beq.n	8003c2c <HAL_RCC_GetSysClockFreq+0xac>
 8003c24:	e005      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c26:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c28:	617b      	str	r3, [r7, #20]
      break;
 8003c2a:	e005      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c2c:	4b19      	ldr	r3, [pc, #100]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c2e:	617b      	str	r3, [r7, #20]
      break;
 8003c30:	e002      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	617b      	str	r3, [r7, #20]
      break;
 8003c36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c38:	4b13      	ldr	r3, [pc, #76]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	091b      	lsrs	r3, r3, #4
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	3301      	adds	r3, #1
 8003c44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c46:	4b10      	ldr	r3, [pc, #64]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	0a1b      	lsrs	r3, r3, #8
 8003c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	fb03 f202 	mul.w	r2, r3, r2
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c5e:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	0e5b      	lsrs	r3, r3, #25
 8003c64:	f003 0303 	and.w	r3, r3, #3
 8003c68:	3301      	adds	r3, #1
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c78:	69bb      	ldr	r3, [r7, #24]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3724      	adds	r7, #36	; 0x24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	080061dc 	.word	0x080061dc
 8003c90:	00f42400 	.word	0x00f42400
 8003c94:	007a1200 	.word	0x007a1200

08003c98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c9c:	4b03      	ldr	r3, [pc, #12]	; (8003cac <HAL_RCC_GetHCLKFreq+0x14>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	20000000 	.word	0x20000000

08003cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003cb4:	f7ff fff0 	bl	8003c98 <HAL_RCC_GetHCLKFreq>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	4b06      	ldr	r3, [pc, #24]	; (8003cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	0a1b      	lsrs	r3, r3, #8
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	4904      	ldr	r1, [pc, #16]	; (8003cd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cc6:	5ccb      	ldrb	r3, [r1, r3]
 8003cc8:	f003 031f 	and.w	r3, r3, #31
 8003ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	080061d4 	.word	0x080061d4

08003cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ce0:	f7ff ffda 	bl	8003c98 <HAL_RCC_GetHCLKFreq>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	0adb      	lsrs	r3, r3, #11
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	4904      	ldr	r1, [pc, #16]	; (8003d04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cf2:	5ccb      	ldrb	r3, [r1, r3]
 8003cf4:	f003 031f 	and.w	r3, r3, #31
 8003cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40021000 	.word	0x40021000
 8003d04:	080061d4 	.word	0x080061d4

08003d08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d10:	2300      	movs	r3, #0
 8003d12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d14:	4b2a      	ldr	r3, [pc, #168]	; (8003dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d20:	f7ff f9ee 	bl	8003100 <HAL_PWREx_GetVoltageRange>
 8003d24:	6178      	str	r0, [r7, #20]
 8003d26:	e014      	b.n	8003d52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d28:	4b25      	ldr	r3, [pc, #148]	; (8003dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2c:	4a24      	ldr	r2, [pc, #144]	; (8003dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d32:	6593      	str	r3, [r2, #88]	; 0x58
 8003d34:	4b22      	ldr	r3, [pc, #136]	; (8003dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d40:	f7ff f9de 	bl	8003100 <HAL_PWREx_GetVoltageRange>
 8003d44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d46:	4b1e      	ldr	r3, [pc, #120]	; (8003dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4a:	4a1d      	ldr	r2, [pc, #116]	; (8003dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d58:	d10b      	bne.n	8003d72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b80      	cmp	r3, #128	; 0x80
 8003d5e:	d919      	bls.n	8003d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2ba0      	cmp	r3, #160	; 0xa0
 8003d64:	d902      	bls.n	8003d6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d66:	2302      	movs	r3, #2
 8003d68:	613b      	str	r3, [r7, #16]
 8003d6a:	e013      	b.n	8003d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	613b      	str	r3, [r7, #16]
 8003d70:	e010      	b.n	8003d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b80      	cmp	r3, #128	; 0x80
 8003d76:	d902      	bls.n	8003d7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d78:	2303      	movs	r3, #3
 8003d7a:	613b      	str	r3, [r7, #16]
 8003d7c:	e00a      	b.n	8003d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b80      	cmp	r3, #128	; 0x80
 8003d82:	d102      	bne.n	8003d8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d84:	2302      	movs	r3, #2
 8003d86:	613b      	str	r3, [r7, #16]
 8003d88:	e004      	b.n	8003d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b70      	cmp	r3, #112	; 0x70
 8003d8e:	d101      	bne.n	8003d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d90:	2301      	movs	r3, #1
 8003d92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d94:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f023 0207 	bic.w	r2, r3, #7
 8003d9c:	4909      	ldr	r1, [pc, #36]	; (8003dc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003da4:	4b07      	ldr	r3, [pc, #28]	; (8003dc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d001      	beq.n	8003db6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e000      	b.n	8003db8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	40022000 	.word	0x40022000

08003dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d041      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003de8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003dec:	d02a      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003dee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003df2:	d824      	bhi.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003df4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003df8:	d008      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003dfa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003dfe:	d81e      	bhi.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00a      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003e04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e08:	d010      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e0a:	e018      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e0c:	4b86      	ldr	r3, [pc, #536]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	4a85      	ldr	r2, [pc, #532]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e16:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e18:	e015      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	2100      	movs	r1, #0
 8003e20:	4618      	mov	r0, r3
 8003e22:	f000 fabb 	bl	800439c <RCCEx_PLLSAI1_Config>
 8003e26:	4603      	mov	r3, r0
 8003e28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e2a:	e00c      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3320      	adds	r3, #32
 8003e30:	2100      	movs	r1, #0
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fba6 	bl	8004584 <RCCEx_PLLSAI2_Config>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e3c:	e003      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	74fb      	strb	r3, [r7, #19]
      break;
 8003e42:	e000      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003e44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e46:	7cfb      	ldrb	r3, [r7, #19]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10b      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e4c:	4b76      	ldr	r3, [pc, #472]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e5a:	4973      	ldr	r1, [pc, #460]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e62:	e001      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e64:	7cfb      	ldrb	r3, [r7, #19]
 8003e66:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d041      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e7c:	d02a      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003e7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e82:	d824      	bhi.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e88:	d008      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e8e:	d81e      	bhi.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00a      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e98:	d010      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e9a:	e018      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e9c:	4b62      	ldr	r3, [pc, #392]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	4a61      	ldr	r2, [pc, #388]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ea8:	e015      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	3304      	adds	r3, #4
 8003eae:	2100      	movs	r1, #0
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 fa73 	bl	800439c <RCCEx_PLLSAI1_Config>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003eba:	e00c      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3320      	adds	r3, #32
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fb5e 	bl	8004584 <RCCEx_PLLSAI2_Config>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ecc:	e003      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	74fb      	strb	r3, [r7, #19]
      break;
 8003ed2:	e000      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003ed4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ed6:	7cfb      	ldrb	r3, [r7, #19]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10b      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003edc:	4b52      	ldr	r3, [pc, #328]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eea:	494f      	ldr	r1, [pc, #316]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ef2:	e001      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef4:	7cfb      	ldrb	r3, [r7, #19]
 8003ef6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 80a0 	beq.w	8004046 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f06:	2300      	movs	r3, #0
 8003f08:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f0a:	4b47      	ldr	r3, [pc, #284]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00d      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f20:	4b41      	ldr	r3, [pc, #260]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f24:	4a40      	ldr	r2, [pc, #256]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f2a:	6593      	str	r3, [r2, #88]	; 0x58
 8003f2c:	4b3e      	ldr	r3, [pc, #248]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f3c:	4b3b      	ldr	r3, [pc, #236]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a3a      	ldr	r2, [pc, #232]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f48:	f7fe fe02 	bl	8002b50 <HAL_GetTick>
 8003f4c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f4e:	e009      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f50:	f7fe fdfe 	bl	8002b50 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d902      	bls.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	74fb      	strb	r3, [r7, #19]
        break;
 8003f62:	e005      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f64:	4b31      	ldr	r3, [pc, #196]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0ef      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003f70:	7cfb      	ldrb	r3, [r7, #19]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d15c      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f76:	4b2c      	ldr	r3, [pc, #176]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f80:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d01f      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d019      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f94:	4b24      	ldr	r3, [pc, #144]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fa0:	4b21      	ldr	r3, [pc, #132]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa6:	4a20      	ldr	r2, [pc, #128]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fb0:	4b1d      	ldr	r3, [pc, #116]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb6:	4a1c      	ldr	r2, [pc, #112]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fc0:	4a19      	ldr	r2, [pc, #100]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d016      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd2:	f7fe fdbd 	bl	8002b50 <HAL_GetTick>
 8003fd6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fd8:	e00b      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fda:	f7fe fdb9 	bl	8002b50 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d902      	bls.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	74fb      	strb	r3, [r7, #19]
            break;
 8003ff0:	e006      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ff2:	4b0d      	ldr	r3, [pc, #52]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0ec      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004000:	7cfb      	ldrb	r3, [r7, #19]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10c      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004006:	4b08      	ldr	r3, [pc, #32]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004016:	4904      	ldr	r1, [pc, #16]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800401e:	e009      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004020:	7cfb      	ldrb	r3, [r7, #19]
 8004022:	74bb      	strb	r3, [r7, #18]
 8004024:	e006      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004026:	bf00      	nop
 8004028:	40021000 	.word	0x40021000
 800402c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004030:	7cfb      	ldrb	r3, [r7, #19]
 8004032:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004034:	7c7b      	ldrb	r3, [r7, #17]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d105      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800403a:	4b9e      	ldr	r3, [pc, #632]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800403c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403e:	4a9d      	ldr	r2, [pc, #628]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004044:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004052:	4b98      	ldr	r3, [pc, #608]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004058:	f023 0203 	bic.w	r2, r3, #3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004060:	4994      	ldr	r1, [pc, #592]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004074:	4b8f      	ldr	r3, [pc, #572]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407a:	f023 020c 	bic.w	r2, r3, #12
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004082:	498c      	ldr	r1, [pc, #560]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004096:	4b87      	ldr	r3, [pc, #540]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	4983      	ldr	r1, [pc, #524]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00a      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040b8:	4b7e      	ldr	r3, [pc, #504]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c6:	497b      	ldr	r1, [pc, #492]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0310 	and.w	r3, r3, #16
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040da:	4b76      	ldr	r3, [pc, #472]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e8:	4972      	ldr	r1, [pc, #456]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040fc:	4b6d      	ldr	r3, [pc, #436]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004102:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800410a:	496a      	ldr	r1, [pc, #424]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800411e:	4b65      	ldr	r3, [pc, #404]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004124:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800412c:	4961      	ldr	r1, [pc, #388]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004140:	4b5c      	ldr	r3, [pc, #368]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004146:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800414e:	4959      	ldr	r1, [pc, #356]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004162:	4b54      	ldr	r3, [pc, #336]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004168:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004170:	4950      	ldr	r1, [pc, #320]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004184:	4b4b      	ldr	r3, [pc, #300]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004192:	4948      	ldr	r1, [pc, #288]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041a6:	4b43      	ldr	r3, [pc, #268]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b4:	493f      	ldr	r1, [pc, #252]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d028      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041c8:	4b3a      	ldr	r3, [pc, #232]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041d6:	4937      	ldr	r1, [pc, #220]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041e6:	d106      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041e8:	4b32      	ldr	r3, [pc, #200]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	4a31      	ldr	r2, [pc, #196]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041f2:	60d3      	str	r3, [r2, #12]
 80041f4:	e011      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041fe:	d10c      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3304      	adds	r3, #4
 8004204:	2101      	movs	r1, #1
 8004206:	4618      	mov	r0, r3
 8004208:	f000 f8c8 	bl	800439c <RCCEx_PLLSAI1_Config>
 800420c:	4603      	mov	r3, r0
 800420e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004210:	7cfb      	ldrb	r3, [r7, #19]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004216:	7cfb      	ldrb	r3, [r7, #19]
 8004218:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d028      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004226:	4b23      	ldr	r3, [pc, #140]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004234:	491f      	ldr	r1, [pc, #124]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004240:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004244:	d106      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004246:	4b1b      	ldr	r3, [pc, #108]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	4a1a      	ldr	r2, [pc, #104]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004250:	60d3      	str	r3, [r2, #12]
 8004252:	e011      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004258:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800425c:	d10c      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3304      	adds	r3, #4
 8004262:	2101      	movs	r1, #1
 8004264:	4618      	mov	r0, r3
 8004266:	f000 f899 	bl	800439c <RCCEx_PLLSAI1_Config>
 800426a:	4603      	mov	r3, r0
 800426c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800426e:	7cfb      	ldrb	r3, [r7, #19]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004274:	7cfb      	ldrb	r3, [r7, #19]
 8004276:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d02b      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004284:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004292:	4908      	ldr	r1, [pc, #32]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800429e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042a2:	d109      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042a4:	4b03      	ldr	r3, [pc, #12]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	4a02      	ldr	r2, [pc, #8]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ae:	60d3      	str	r3, [r2, #12]
 80042b0:	e014      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80042b2:	bf00      	nop
 80042b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042c0:	d10c      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3304      	adds	r3, #4
 80042c6:	2101      	movs	r1, #1
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 f867 	bl	800439c <RCCEx_PLLSAI1_Config>
 80042ce:	4603      	mov	r3, r0
 80042d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042d2:	7cfb      	ldrb	r3, [r7, #19]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80042d8:	7cfb      	ldrb	r3, [r7, #19]
 80042da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d02f      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042e8:	4b2b      	ldr	r3, [pc, #172]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042f6:	4928      	ldr	r1, [pc, #160]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004302:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004306:	d10d      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3304      	adds	r3, #4
 800430c:	2102      	movs	r1, #2
 800430e:	4618      	mov	r0, r3
 8004310:	f000 f844 	bl	800439c <RCCEx_PLLSAI1_Config>
 8004314:	4603      	mov	r3, r0
 8004316:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004318:	7cfb      	ldrb	r3, [r7, #19]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d014      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800431e:	7cfb      	ldrb	r3, [r7, #19]
 8004320:	74bb      	strb	r3, [r7, #18]
 8004322:	e011      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004328:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800432c:	d10c      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	3320      	adds	r3, #32
 8004332:	2102      	movs	r1, #2
 8004334:	4618      	mov	r0, r3
 8004336:	f000 f925 	bl	8004584 <RCCEx_PLLSAI2_Config>
 800433a:	4603      	mov	r3, r0
 800433c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800433e:	7cfb      	ldrb	r3, [r7, #19]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004344:	7cfb      	ldrb	r3, [r7, #19]
 8004346:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004354:	4b10      	ldr	r3, [pc, #64]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004362:	490d      	ldr	r1, [pc, #52]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00b      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004376:	4b08      	ldr	r3, [pc, #32]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004386:	4904      	ldr	r1, [pc, #16]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004388:	4313      	orrs	r3, r2
 800438a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800438e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40021000 	.word	0x40021000

0800439c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043aa:	4b75      	ldr	r3, [pc, #468]	; (8004580 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d018      	beq.n	80043e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80043b6:	4b72      	ldr	r3, [pc, #456]	; (8004580 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f003 0203 	and.w	r2, r3, #3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d10d      	bne.n	80043e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
       ||
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d009      	beq.n	80043e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80043ce:	4b6c      	ldr	r3, [pc, #432]	; (8004580 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	091b      	lsrs	r3, r3, #4
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
       ||
 80043de:	429a      	cmp	r2, r3
 80043e0:	d047      	beq.n	8004472 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	73fb      	strb	r3, [r7, #15]
 80043e6:	e044      	b.n	8004472 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b03      	cmp	r3, #3
 80043ee:	d018      	beq.n	8004422 <RCCEx_PLLSAI1_Config+0x86>
 80043f0:	2b03      	cmp	r3, #3
 80043f2:	d825      	bhi.n	8004440 <RCCEx_PLLSAI1_Config+0xa4>
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d002      	beq.n	80043fe <RCCEx_PLLSAI1_Config+0x62>
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d009      	beq.n	8004410 <RCCEx_PLLSAI1_Config+0x74>
 80043fc:	e020      	b.n	8004440 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043fe:	4b60      	ldr	r3, [pc, #384]	; (8004580 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d11d      	bne.n	8004446 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800440e:	e01a      	b.n	8004446 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004410:	4b5b      	ldr	r3, [pc, #364]	; (8004580 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004418:	2b00      	cmp	r3, #0
 800441a:	d116      	bne.n	800444a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004420:	e013      	b.n	800444a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004422:	4b57      	ldr	r3, [pc, #348]	; (8004580 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10f      	bne.n	800444e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800442e:	4b54      	ldr	r3, [pc, #336]	; (8004580 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d109      	bne.n	800444e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800443e:	e006      	b.n	800444e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	73fb      	strb	r3, [r7, #15]
      break;
 8004444:	e004      	b.n	8004450 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004446:	bf00      	nop
 8004448:	e002      	b.n	8004450 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800444a:	bf00      	nop
 800444c:	e000      	b.n	8004450 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800444e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004450:	7bfb      	ldrb	r3, [r7, #15]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10d      	bne.n	8004472 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004456:	4b4a      	ldr	r3, [pc, #296]	; (8004580 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6819      	ldr	r1, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	3b01      	subs	r3, #1
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	430b      	orrs	r3, r1
 800446c:	4944      	ldr	r1, [pc, #272]	; (8004580 <RCCEx_PLLSAI1_Config+0x1e4>)
 800446e:	4313      	orrs	r3, r2
 8004470:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004472:	7bfb      	ldrb	r3, [r7, #15]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d17d      	bne.n	8004574 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004478:	4b41      	ldr	r3, [pc, #260]	; (8004580 <RCCEx_PLLSAI1_Config+0x1e4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a40      	ldr	r2, [pc, #256]	; (8004580 <RCCEx_PLLSAI1_Config+0x1e4>)
 800447e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004482:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004484:	f7fe fb64 	bl	8002b50 <HAL_GetTick>
 8004488:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800448a:	e009      	b.n	80044a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800448c:	f7fe fb60 	bl	8002b50 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d902      	bls.n	80044a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	73fb      	strb	r3, [r7, #15]
        break;
 800449e:	e005      	b.n	80044ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044a0:	4b37      	ldr	r3, [pc, #220]	; (8004580 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1ef      	bne.n	800448c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d160      	bne.n	8004574 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d111      	bne.n	80044dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044b8:	4b31      	ldr	r3, [pc, #196]	; (8004580 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80044c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6892      	ldr	r2, [r2, #8]
 80044c8:	0211      	lsls	r1, r2, #8
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	68d2      	ldr	r2, [r2, #12]
 80044ce:	0912      	lsrs	r2, r2, #4
 80044d0:	0452      	lsls	r2, r2, #17
 80044d2:	430a      	orrs	r2, r1
 80044d4:	492a      	ldr	r1, [pc, #168]	; (8004580 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	610b      	str	r3, [r1, #16]
 80044da:	e027      	b.n	800452c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d112      	bne.n	8004508 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044e2:	4b27      	ldr	r3, [pc, #156]	; (8004580 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80044ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6892      	ldr	r2, [r2, #8]
 80044f2:	0211      	lsls	r1, r2, #8
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	6912      	ldr	r2, [r2, #16]
 80044f8:	0852      	lsrs	r2, r2, #1
 80044fa:	3a01      	subs	r2, #1
 80044fc:	0552      	lsls	r2, r2, #21
 80044fe:	430a      	orrs	r2, r1
 8004500:	491f      	ldr	r1, [pc, #124]	; (8004580 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004502:	4313      	orrs	r3, r2
 8004504:	610b      	str	r3, [r1, #16]
 8004506:	e011      	b.n	800452c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004508:	4b1d      	ldr	r3, [pc, #116]	; (8004580 <RCCEx_PLLSAI1_Config+0x1e4>)
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004510:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6892      	ldr	r2, [r2, #8]
 8004518:	0211      	lsls	r1, r2, #8
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6952      	ldr	r2, [r2, #20]
 800451e:	0852      	lsrs	r2, r2, #1
 8004520:	3a01      	subs	r2, #1
 8004522:	0652      	lsls	r2, r2, #25
 8004524:	430a      	orrs	r2, r1
 8004526:	4916      	ldr	r1, [pc, #88]	; (8004580 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004528:	4313      	orrs	r3, r2
 800452a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800452c:	4b14      	ldr	r3, [pc, #80]	; (8004580 <RCCEx_PLLSAI1_Config+0x1e4>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a13      	ldr	r2, [pc, #76]	; (8004580 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004532:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004536:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004538:	f7fe fb0a 	bl	8002b50 <HAL_GetTick>
 800453c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800453e:	e009      	b.n	8004554 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004540:	f7fe fb06 	bl	8002b50 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d902      	bls.n	8004554 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	73fb      	strb	r3, [r7, #15]
          break;
 8004552:	e005      	b.n	8004560 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004554:	4b0a      	ldr	r3, [pc, #40]	; (8004580 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0ef      	beq.n	8004540 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004560:	7bfb      	ldrb	r3, [r7, #15]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d106      	bne.n	8004574 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004566:	4b06      	ldr	r3, [pc, #24]	; (8004580 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004568:	691a      	ldr	r2, [r3, #16]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	4904      	ldr	r1, [pc, #16]	; (8004580 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004570:	4313      	orrs	r3, r2
 8004572:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004574:	7bfb      	ldrb	r3, [r7, #15]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	40021000 	.word	0x40021000

08004584 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004592:	4b6a      	ldr	r3, [pc, #424]	; (800473c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d018      	beq.n	80045d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800459e:	4b67      	ldr	r3, [pc, #412]	; (800473c <RCCEx_PLLSAI2_Config+0x1b8>)
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f003 0203 	and.w	r2, r3, #3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d10d      	bne.n	80045ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
       ||
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d009      	beq.n	80045ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80045b6:	4b61      	ldr	r3, [pc, #388]	; (800473c <RCCEx_PLLSAI2_Config+0x1b8>)
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	091b      	lsrs	r3, r3, #4
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
       ||
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d047      	beq.n	800465a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	73fb      	strb	r3, [r7, #15]
 80045ce:	e044      	b.n	800465a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	d018      	beq.n	800460a <RCCEx_PLLSAI2_Config+0x86>
 80045d8:	2b03      	cmp	r3, #3
 80045da:	d825      	bhi.n	8004628 <RCCEx_PLLSAI2_Config+0xa4>
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d002      	beq.n	80045e6 <RCCEx_PLLSAI2_Config+0x62>
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d009      	beq.n	80045f8 <RCCEx_PLLSAI2_Config+0x74>
 80045e4:	e020      	b.n	8004628 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045e6:	4b55      	ldr	r3, [pc, #340]	; (800473c <RCCEx_PLLSAI2_Config+0x1b8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d11d      	bne.n	800462e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045f6:	e01a      	b.n	800462e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045f8:	4b50      	ldr	r3, [pc, #320]	; (800473c <RCCEx_PLLSAI2_Config+0x1b8>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004600:	2b00      	cmp	r3, #0
 8004602:	d116      	bne.n	8004632 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004608:	e013      	b.n	8004632 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800460a:	4b4c      	ldr	r3, [pc, #304]	; (800473c <RCCEx_PLLSAI2_Config+0x1b8>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10f      	bne.n	8004636 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004616:	4b49      	ldr	r3, [pc, #292]	; (800473c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d109      	bne.n	8004636 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004626:	e006      	b.n	8004636 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	73fb      	strb	r3, [r7, #15]
      break;
 800462c:	e004      	b.n	8004638 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800462e:	bf00      	nop
 8004630:	e002      	b.n	8004638 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004632:	bf00      	nop
 8004634:	e000      	b.n	8004638 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004636:	bf00      	nop
    }

    if(status == HAL_OK)
 8004638:	7bfb      	ldrb	r3, [r7, #15]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10d      	bne.n	800465a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800463e:	4b3f      	ldr	r3, [pc, #252]	; (800473c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6819      	ldr	r1, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	3b01      	subs	r3, #1
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	430b      	orrs	r3, r1
 8004654:	4939      	ldr	r1, [pc, #228]	; (800473c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004656:	4313      	orrs	r3, r2
 8004658:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800465a:	7bfb      	ldrb	r3, [r7, #15]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d167      	bne.n	8004730 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004660:	4b36      	ldr	r3, [pc, #216]	; (800473c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a35      	ldr	r2, [pc, #212]	; (800473c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004666:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800466a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800466c:	f7fe fa70 	bl	8002b50 <HAL_GetTick>
 8004670:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004672:	e009      	b.n	8004688 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004674:	f7fe fa6c 	bl	8002b50 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d902      	bls.n	8004688 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	73fb      	strb	r3, [r7, #15]
        break;
 8004686:	e005      	b.n	8004694 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004688:	4b2c      	ldr	r3, [pc, #176]	; (800473c <RCCEx_PLLSAI2_Config+0x1b8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1ef      	bne.n	8004674 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004694:	7bfb      	ldrb	r3, [r7, #15]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d14a      	bne.n	8004730 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d111      	bne.n	80046c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046a0:	4b26      	ldr	r3, [pc, #152]	; (800473c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80046a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6892      	ldr	r2, [r2, #8]
 80046b0:	0211      	lsls	r1, r2, #8
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	68d2      	ldr	r2, [r2, #12]
 80046b6:	0912      	lsrs	r2, r2, #4
 80046b8:	0452      	lsls	r2, r2, #17
 80046ba:	430a      	orrs	r2, r1
 80046bc:	491f      	ldr	r1, [pc, #124]	; (800473c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	614b      	str	r3, [r1, #20]
 80046c2:	e011      	b.n	80046e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046c4:	4b1d      	ldr	r3, [pc, #116]	; (800473c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80046cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6892      	ldr	r2, [r2, #8]
 80046d4:	0211      	lsls	r1, r2, #8
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	6912      	ldr	r2, [r2, #16]
 80046da:	0852      	lsrs	r2, r2, #1
 80046dc:	3a01      	subs	r2, #1
 80046de:	0652      	lsls	r2, r2, #25
 80046e0:	430a      	orrs	r2, r1
 80046e2:	4916      	ldr	r1, [pc, #88]	; (800473c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80046e8:	4b14      	ldr	r3, [pc, #80]	; (800473c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a13      	ldr	r2, [pc, #76]	; (800473c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f4:	f7fe fa2c 	bl	8002b50 <HAL_GetTick>
 80046f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046fa:	e009      	b.n	8004710 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046fc:	f7fe fa28 	bl	8002b50 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d902      	bls.n	8004710 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	73fb      	strb	r3, [r7, #15]
          break;
 800470e:	e005      	b.n	800471c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004710:	4b0a      	ldr	r3, [pc, #40]	; (800473c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0ef      	beq.n	80046fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800471c:	7bfb      	ldrb	r3, [r7, #15]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d106      	bne.n	8004730 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004722:	4b06      	ldr	r3, [pc, #24]	; (800473c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004724:	695a      	ldr	r2, [r3, #20]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	4904      	ldr	r1, [pc, #16]	; (800473c <RCCEx_PLLSAI2_Config+0x1b8>)
 800472c:	4313      	orrs	r3, r2
 800472e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004730:	7bfb      	ldrb	r3, [r7, #15]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	40021000 	.word	0x40021000

08004740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e049      	b.n	80047e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d106      	bne.n	800476c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7fe f86e 	bl	8002848 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3304      	adds	r3, #4
 800477c:	4619      	mov	r1, r3
 800477e:	4610      	mov	r0, r2
 8004780:	f000 fb7a 	bl	8004e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b082      	sub	sp, #8
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e049      	b.n	8004894 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d106      	bne.n	800481a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f841 	bl	800489c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2202      	movs	r2, #2
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3304      	adds	r3, #4
 800482a:	4619      	mov	r1, r3
 800482c:	4610      	mov	r0, r2
 800482e:	f000 fb23 	bl	8004e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d109      	bne.n	80048d4 <HAL_TIM_PWM_Start+0x24>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	bf14      	ite	ne
 80048cc:	2301      	movne	r3, #1
 80048ce:	2300      	moveq	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	e03c      	b.n	800494e <HAL_TIM_PWM_Start+0x9e>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d109      	bne.n	80048ee <HAL_TIM_PWM_Start+0x3e>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	bf14      	ite	ne
 80048e6:	2301      	movne	r3, #1
 80048e8:	2300      	moveq	r3, #0
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	e02f      	b.n	800494e <HAL_TIM_PWM_Start+0x9e>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b08      	cmp	r3, #8
 80048f2:	d109      	bne.n	8004908 <HAL_TIM_PWM_Start+0x58>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	bf14      	ite	ne
 8004900:	2301      	movne	r3, #1
 8004902:	2300      	moveq	r3, #0
 8004904:	b2db      	uxtb	r3, r3
 8004906:	e022      	b.n	800494e <HAL_TIM_PWM_Start+0x9e>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	2b0c      	cmp	r3, #12
 800490c:	d109      	bne.n	8004922 <HAL_TIM_PWM_Start+0x72>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b01      	cmp	r3, #1
 8004918:	bf14      	ite	ne
 800491a:	2301      	movne	r3, #1
 800491c:	2300      	moveq	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	e015      	b.n	800494e <HAL_TIM_PWM_Start+0x9e>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b10      	cmp	r3, #16
 8004926:	d109      	bne.n	800493c <HAL_TIM_PWM_Start+0x8c>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b01      	cmp	r3, #1
 8004932:	bf14      	ite	ne
 8004934:	2301      	movne	r3, #1
 8004936:	2300      	moveq	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	e008      	b.n	800494e <HAL_TIM_PWM_Start+0x9e>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b01      	cmp	r3, #1
 8004946:	bf14      	ite	ne
 8004948:	2301      	movne	r3, #1
 800494a:	2300      	moveq	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e09c      	b.n	8004a90 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d104      	bne.n	8004966 <HAL_TIM_PWM_Start+0xb6>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004964:	e023      	b.n	80049ae <HAL_TIM_PWM_Start+0xfe>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b04      	cmp	r3, #4
 800496a:	d104      	bne.n	8004976 <HAL_TIM_PWM_Start+0xc6>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004974:	e01b      	b.n	80049ae <HAL_TIM_PWM_Start+0xfe>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b08      	cmp	r3, #8
 800497a:	d104      	bne.n	8004986 <HAL_TIM_PWM_Start+0xd6>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004984:	e013      	b.n	80049ae <HAL_TIM_PWM_Start+0xfe>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b0c      	cmp	r3, #12
 800498a:	d104      	bne.n	8004996 <HAL_TIM_PWM_Start+0xe6>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004994:	e00b      	b.n	80049ae <HAL_TIM_PWM_Start+0xfe>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b10      	cmp	r3, #16
 800499a:	d104      	bne.n	80049a6 <HAL_TIM_PWM_Start+0xf6>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049a4:	e003      	b.n	80049ae <HAL_TIM_PWM_Start+0xfe>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2202      	movs	r2, #2
 80049aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2201      	movs	r2, #1
 80049b4:	6839      	ldr	r1, [r7, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fe68 	bl	800568c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a35      	ldr	r2, [pc, #212]	; (8004a98 <HAL_TIM_PWM_Start+0x1e8>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d013      	beq.n	80049ee <HAL_TIM_PWM_Start+0x13e>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a34      	ldr	r2, [pc, #208]	; (8004a9c <HAL_TIM_PWM_Start+0x1ec>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00e      	beq.n	80049ee <HAL_TIM_PWM_Start+0x13e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a32      	ldr	r2, [pc, #200]	; (8004aa0 <HAL_TIM_PWM_Start+0x1f0>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d009      	beq.n	80049ee <HAL_TIM_PWM_Start+0x13e>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a31      	ldr	r2, [pc, #196]	; (8004aa4 <HAL_TIM_PWM_Start+0x1f4>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d004      	beq.n	80049ee <HAL_TIM_PWM_Start+0x13e>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a2f      	ldr	r2, [pc, #188]	; (8004aa8 <HAL_TIM_PWM_Start+0x1f8>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d101      	bne.n	80049f2 <HAL_TIM_PWM_Start+0x142>
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <HAL_TIM_PWM_Start+0x144>
 80049f2:	2300      	movs	r3, #0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d007      	beq.n	8004a08 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a06:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a22      	ldr	r2, [pc, #136]	; (8004a98 <HAL_TIM_PWM_Start+0x1e8>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d01d      	beq.n	8004a4e <HAL_TIM_PWM_Start+0x19e>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a1a:	d018      	beq.n	8004a4e <HAL_TIM_PWM_Start+0x19e>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a22      	ldr	r2, [pc, #136]	; (8004aac <HAL_TIM_PWM_Start+0x1fc>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d013      	beq.n	8004a4e <HAL_TIM_PWM_Start+0x19e>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a21      	ldr	r2, [pc, #132]	; (8004ab0 <HAL_TIM_PWM_Start+0x200>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00e      	beq.n	8004a4e <HAL_TIM_PWM_Start+0x19e>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a1f      	ldr	r2, [pc, #124]	; (8004ab4 <HAL_TIM_PWM_Start+0x204>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d009      	beq.n	8004a4e <HAL_TIM_PWM_Start+0x19e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a17      	ldr	r2, [pc, #92]	; (8004a9c <HAL_TIM_PWM_Start+0x1ec>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d004      	beq.n	8004a4e <HAL_TIM_PWM_Start+0x19e>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a15      	ldr	r2, [pc, #84]	; (8004aa0 <HAL_TIM_PWM_Start+0x1f0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d115      	bne.n	8004a7a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	4b18      	ldr	r3, [pc, #96]	; (8004ab8 <HAL_TIM_PWM_Start+0x208>)
 8004a56:	4013      	ands	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2b06      	cmp	r3, #6
 8004a5e:	d015      	beq.n	8004a8c <HAL_TIM_PWM_Start+0x1dc>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a66:	d011      	beq.n	8004a8c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0201 	orr.w	r2, r2, #1
 8004a76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a78:	e008      	b.n	8004a8c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f042 0201 	orr.w	r2, r2, #1
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	e000      	b.n	8004a8e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40012c00 	.word	0x40012c00
 8004a9c:	40013400 	.word	0x40013400
 8004aa0:	40014000 	.word	0x40014000
 8004aa4:	40014400 	.word	0x40014400
 8004aa8:	40014800 	.word	0x40014800
 8004aac:	40000400 	.word	0x40000400
 8004ab0:	40000800 	.word	0x40000800
 8004ab4:	40000c00 	.word	0x40000c00
 8004ab8:	00010007 	.word	0x00010007

08004abc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d101      	bne.n	8004ada <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	e0ff      	b.n	8004cda <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b14      	cmp	r3, #20
 8004ae6:	f200 80f0 	bhi.w	8004cca <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004aea:	a201      	add	r2, pc, #4	; (adr r2, 8004af0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af0:	08004b45 	.word	0x08004b45
 8004af4:	08004ccb 	.word	0x08004ccb
 8004af8:	08004ccb 	.word	0x08004ccb
 8004afc:	08004ccb 	.word	0x08004ccb
 8004b00:	08004b85 	.word	0x08004b85
 8004b04:	08004ccb 	.word	0x08004ccb
 8004b08:	08004ccb 	.word	0x08004ccb
 8004b0c:	08004ccb 	.word	0x08004ccb
 8004b10:	08004bc7 	.word	0x08004bc7
 8004b14:	08004ccb 	.word	0x08004ccb
 8004b18:	08004ccb 	.word	0x08004ccb
 8004b1c:	08004ccb 	.word	0x08004ccb
 8004b20:	08004c07 	.word	0x08004c07
 8004b24:	08004ccb 	.word	0x08004ccb
 8004b28:	08004ccb 	.word	0x08004ccb
 8004b2c:	08004ccb 	.word	0x08004ccb
 8004b30:	08004c49 	.word	0x08004c49
 8004b34:	08004ccb 	.word	0x08004ccb
 8004b38:	08004ccb 	.word	0x08004ccb
 8004b3c:	08004ccb 	.word	0x08004ccb
 8004b40:	08004c89 	.word	0x08004c89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68b9      	ldr	r1, [r7, #8]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 fa2e 	bl	8004fac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699a      	ldr	r2, [r3, #24]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0208 	orr.w	r2, r2, #8
 8004b5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699a      	ldr	r2, [r3, #24]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0204 	bic.w	r2, r2, #4
 8004b6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6999      	ldr	r1, [r3, #24]
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	691a      	ldr	r2, [r3, #16]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	619a      	str	r2, [r3, #24]
      break;
 8004b82:	e0a5      	b.n	8004cd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68b9      	ldr	r1, [r7, #8]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 fa9e 	bl	80050cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699a      	ldr	r2, [r3, #24]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699a      	ldr	r2, [r3, #24]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6999      	ldr	r1, [r3, #24]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	021a      	lsls	r2, r3, #8
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	619a      	str	r2, [r3, #24]
      break;
 8004bc4:	e084      	b.n	8004cd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68b9      	ldr	r1, [r7, #8]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 fb07 	bl	80051e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69da      	ldr	r2, [r3, #28]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f042 0208 	orr.w	r2, r2, #8
 8004be0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69da      	ldr	r2, [r3, #28]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 0204 	bic.w	r2, r2, #4
 8004bf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	69d9      	ldr	r1, [r3, #28]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	61da      	str	r2, [r3, #28]
      break;
 8004c04:	e064      	b.n	8004cd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68b9      	ldr	r1, [r7, #8]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 fb6f 	bl	80052f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69da      	ldr	r2, [r3, #28]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69da      	ldr	r2, [r3, #28]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	69d9      	ldr	r1, [r3, #28]
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	021a      	lsls	r2, r3, #8
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	61da      	str	r2, [r3, #28]
      break;
 8004c46:	e043      	b.n	8004cd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68b9      	ldr	r1, [r7, #8]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 fbb8 	bl	80053c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0208 	orr.w	r2, r2, #8
 8004c62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0204 	bic.w	r2, r2, #4
 8004c72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	691a      	ldr	r2, [r3, #16]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c86:	e023      	b.n	8004cd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68b9      	ldr	r1, [r7, #8]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 fbfc 	bl	800548c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ca2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cb2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	021a      	lsls	r2, r3, #8
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004cc8:	e002      	b.n	8004cd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	75fb      	strb	r3, [r7, #23]
      break;
 8004cce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3718      	adds	r7, #24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop

08004ce4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d101      	bne.n	8004d00 <HAL_TIM_ConfigClockSource+0x1c>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	e0b6      	b.n	8004e6e <HAL_TIM_ConfigClockSource+0x18a>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d3c:	d03e      	beq.n	8004dbc <HAL_TIM_ConfigClockSource+0xd8>
 8004d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d42:	f200 8087 	bhi.w	8004e54 <HAL_TIM_ConfigClockSource+0x170>
 8004d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d4a:	f000 8086 	beq.w	8004e5a <HAL_TIM_ConfigClockSource+0x176>
 8004d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d52:	d87f      	bhi.n	8004e54 <HAL_TIM_ConfigClockSource+0x170>
 8004d54:	2b70      	cmp	r3, #112	; 0x70
 8004d56:	d01a      	beq.n	8004d8e <HAL_TIM_ConfigClockSource+0xaa>
 8004d58:	2b70      	cmp	r3, #112	; 0x70
 8004d5a:	d87b      	bhi.n	8004e54 <HAL_TIM_ConfigClockSource+0x170>
 8004d5c:	2b60      	cmp	r3, #96	; 0x60
 8004d5e:	d050      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0x11e>
 8004d60:	2b60      	cmp	r3, #96	; 0x60
 8004d62:	d877      	bhi.n	8004e54 <HAL_TIM_ConfigClockSource+0x170>
 8004d64:	2b50      	cmp	r3, #80	; 0x50
 8004d66:	d03c      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0xfe>
 8004d68:	2b50      	cmp	r3, #80	; 0x50
 8004d6a:	d873      	bhi.n	8004e54 <HAL_TIM_ConfigClockSource+0x170>
 8004d6c:	2b40      	cmp	r3, #64	; 0x40
 8004d6e:	d058      	beq.n	8004e22 <HAL_TIM_ConfigClockSource+0x13e>
 8004d70:	2b40      	cmp	r3, #64	; 0x40
 8004d72:	d86f      	bhi.n	8004e54 <HAL_TIM_ConfigClockSource+0x170>
 8004d74:	2b30      	cmp	r3, #48	; 0x30
 8004d76:	d064      	beq.n	8004e42 <HAL_TIM_ConfigClockSource+0x15e>
 8004d78:	2b30      	cmp	r3, #48	; 0x30
 8004d7a:	d86b      	bhi.n	8004e54 <HAL_TIM_ConfigClockSource+0x170>
 8004d7c:	2b20      	cmp	r3, #32
 8004d7e:	d060      	beq.n	8004e42 <HAL_TIM_ConfigClockSource+0x15e>
 8004d80:	2b20      	cmp	r3, #32
 8004d82:	d867      	bhi.n	8004e54 <HAL_TIM_ConfigClockSource+0x170>
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d05c      	beq.n	8004e42 <HAL_TIM_ConfigClockSource+0x15e>
 8004d88:	2b10      	cmp	r3, #16
 8004d8a:	d05a      	beq.n	8004e42 <HAL_TIM_ConfigClockSource+0x15e>
 8004d8c:	e062      	b.n	8004e54 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6818      	ldr	r0, [r3, #0]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	6899      	ldr	r1, [r3, #8]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f000 fc55 	bl	800564c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004db0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	609a      	str	r2, [r3, #8]
      break;
 8004dba:	e04f      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6818      	ldr	r0, [r3, #0]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	6899      	ldr	r1, [r3, #8]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f000 fc3e 	bl	800564c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dde:	609a      	str	r2, [r3, #8]
      break;
 8004de0:	e03c      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6818      	ldr	r0, [r3, #0]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	6859      	ldr	r1, [r3, #4]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	461a      	mov	r2, r3
 8004df0:	f000 fbb2 	bl	8005558 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2150      	movs	r1, #80	; 0x50
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 fc0b 	bl	8005616 <TIM_ITRx_SetConfig>
      break;
 8004e00:	e02c      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	6859      	ldr	r1, [r3, #4]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f000 fbd1 	bl	80055b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2160      	movs	r1, #96	; 0x60
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 fbfb 	bl	8005616 <TIM_ITRx_SetConfig>
      break;
 8004e20:	e01c      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6818      	ldr	r0, [r3, #0]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	6859      	ldr	r1, [r3, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f000 fb92 	bl	8005558 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2140      	movs	r1, #64	; 0x40
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 fbeb 	bl	8005616 <TIM_ITRx_SetConfig>
      break;
 8004e40:	e00c      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	f000 fbe2 	bl	8005616 <TIM_ITRx_SetConfig>
      break;
 8004e52:	e003      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	73fb      	strb	r3, [r7, #15]
      break;
 8004e58:	e000      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004e5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a40      	ldr	r2, [pc, #256]	; (8004f8c <TIM_Base_SetConfig+0x114>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d013      	beq.n	8004eb8 <TIM_Base_SetConfig+0x40>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e96:	d00f      	beq.n	8004eb8 <TIM_Base_SetConfig+0x40>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a3d      	ldr	r2, [pc, #244]	; (8004f90 <TIM_Base_SetConfig+0x118>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d00b      	beq.n	8004eb8 <TIM_Base_SetConfig+0x40>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a3c      	ldr	r2, [pc, #240]	; (8004f94 <TIM_Base_SetConfig+0x11c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d007      	beq.n	8004eb8 <TIM_Base_SetConfig+0x40>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a3b      	ldr	r2, [pc, #236]	; (8004f98 <TIM_Base_SetConfig+0x120>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d003      	beq.n	8004eb8 <TIM_Base_SetConfig+0x40>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a3a      	ldr	r2, [pc, #232]	; (8004f9c <TIM_Base_SetConfig+0x124>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d108      	bne.n	8004eca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a2f      	ldr	r2, [pc, #188]	; (8004f8c <TIM_Base_SetConfig+0x114>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d01f      	beq.n	8004f12 <TIM_Base_SetConfig+0x9a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed8:	d01b      	beq.n	8004f12 <TIM_Base_SetConfig+0x9a>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a2c      	ldr	r2, [pc, #176]	; (8004f90 <TIM_Base_SetConfig+0x118>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d017      	beq.n	8004f12 <TIM_Base_SetConfig+0x9a>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a2b      	ldr	r2, [pc, #172]	; (8004f94 <TIM_Base_SetConfig+0x11c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d013      	beq.n	8004f12 <TIM_Base_SetConfig+0x9a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a2a      	ldr	r2, [pc, #168]	; (8004f98 <TIM_Base_SetConfig+0x120>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d00f      	beq.n	8004f12 <TIM_Base_SetConfig+0x9a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a29      	ldr	r2, [pc, #164]	; (8004f9c <TIM_Base_SetConfig+0x124>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d00b      	beq.n	8004f12 <TIM_Base_SetConfig+0x9a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a28      	ldr	r2, [pc, #160]	; (8004fa0 <TIM_Base_SetConfig+0x128>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d007      	beq.n	8004f12 <TIM_Base_SetConfig+0x9a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a27      	ldr	r2, [pc, #156]	; (8004fa4 <TIM_Base_SetConfig+0x12c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d003      	beq.n	8004f12 <TIM_Base_SetConfig+0x9a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a26      	ldr	r2, [pc, #152]	; (8004fa8 <TIM_Base_SetConfig+0x130>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d108      	bne.n	8004f24 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a10      	ldr	r2, [pc, #64]	; (8004f8c <TIM_Base_SetConfig+0x114>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d00f      	beq.n	8004f70 <TIM_Base_SetConfig+0xf8>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a12      	ldr	r2, [pc, #72]	; (8004f9c <TIM_Base_SetConfig+0x124>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d00b      	beq.n	8004f70 <TIM_Base_SetConfig+0xf8>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a11      	ldr	r2, [pc, #68]	; (8004fa0 <TIM_Base_SetConfig+0x128>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d007      	beq.n	8004f70 <TIM_Base_SetConfig+0xf8>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a10      	ldr	r2, [pc, #64]	; (8004fa4 <TIM_Base_SetConfig+0x12c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d003      	beq.n	8004f70 <TIM_Base_SetConfig+0xf8>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a0f      	ldr	r2, [pc, #60]	; (8004fa8 <TIM_Base_SetConfig+0x130>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d103      	bne.n	8004f78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	691a      	ldr	r2, [r3, #16]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	615a      	str	r2, [r3, #20]
}
 8004f7e:	bf00      	nop
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40012c00 	.word	0x40012c00
 8004f90:	40000400 	.word	0x40000400
 8004f94:	40000800 	.word	0x40000800
 8004f98:	40000c00 	.word	0x40000c00
 8004f9c:	40013400 	.word	0x40013400
 8004fa0:	40014000 	.word	0x40014000
 8004fa4:	40014400 	.word	0x40014400
 8004fa8:	40014800 	.word	0x40014800

08004fac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	f023 0201 	bic.w	r2, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f023 0303 	bic.w	r3, r3, #3
 8004fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f023 0302 	bic.w	r3, r3, #2
 8004ff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a2c      	ldr	r2, [pc, #176]	; (80050b8 <TIM_OC1_SetConfig+0x10c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00f      	beq.n	800502c <TIM_OC1_SetConfig+0x80>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a2b      	ldr	r2, [pc, #172]	; (80050bc <TIM_OC1_SetConfig+0x110>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d00b      	beq.n	800502c <TIM_OC1_SetConfig+0x80>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a2a      	ldr	r2, [pc, #168]	; (80050c0 <TIM_OC1_SetConfig+0x114>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d007      	beq.n	800502c <TIM_OC1_SetConfig+0x80>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a29      	ldr	r2, [pc, #164]	; (80050c4 <TIM_OC1_SetConfig+0x118>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d003      	beq.n	800502c <TIM_OC1_SetConfig+0x80>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a28      	ldr	r2, [pc, #160]	; (80050c8 <TIM_OC1_SetConfig+0x11c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d10c      	bne.n	8005046 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f023 0308 	bic.w	r3, r3, #8
 8005032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	4313      	orrs	r3, r2
 800503c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f023 0304 	bic.w	r3, r3, #4
 8005044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a1b      	ldr	r2, [pc, #108]	; (80050b8 <TIM_OC1_SetConfig+0x10c>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d00f      	beq.n	800506e <TIM_OC1_SetConfig+0xc2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a1a      	ldr	r2, [pc, #104]	; (80050bc <TIM_OC1_SetConfig+0x110>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d00b      	beq.n	800506e <TIM_OC1_SetConfig+0xc2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a19      	ldr	r2, [pc, #100]	; (80050c0 <TIM_OC1_SetConfig+0x114>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d007      	beq.n	800506e <TIM_OC1_SetConfig+0xc2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a18      	ldr	r2, [pc, #96]	; (80050c4 <TIM_OC1_SetConfig+0x118>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d003      	beq.n	800506e <TIM_OC1_SetConfig+0xc2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a17      	ldr	r2, [pc, #92]	; (80050c8 <TIM_OC1_SetConfig+0x11c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d111      	bne.n	8005092 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005074:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800507c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	4313      	orrs	r3, r2
 8005086:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	4313      	orrs	r3, r2
 8005090:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	621a      	str	r2, [r3, #32]
}
 80050ac:	bf00      	nop
 80050ae:	371c      	adds	r7, #28
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	40012c00 	.word	0x40012c00
 80050bc:	40013400 	.word	0x40013400
 80050c0:	40014000 	.word	0x40014000
 80050c4:	40014400 	.word	0x40014400
 80050c8:	40014800 	.word	0x40014800

080050cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	f023 0210 	bic.w	r2, r3, #16
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005106:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	021b      	lsls	r3, r3, #8
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	4313      	orrs	r3, r2
 8005112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f023 0320 	bic.w	r3, r3, #32
 800511a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	011b      	lsls	r3, r3, #4
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a28      	ldr	r2, [pc, #160]	; (80051cc <TIM_OC2_SetConfig+0x100>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d003      	beq.n	8005138 <TIM_OC2_SetConfig+0x6c>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a27      	ldr	r2, [pc, #156]	; (80051d0 <TIM_OC2_SetConfig+0x104>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d10d      	bne.n	8005154 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800513e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	011b      	lsls	r3, r3, #4
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	4313      	orrs	r3, r2
 800514a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005152:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a1d      	ldr	r2, [pc, #116]	; (80051cc <TIM_OC2_SetConfig+0x100>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d00f      	beq.n	800517c <TIM_OC2_SetConfig+0xb0>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a1c      	ldr	r2, [pc, #112]	; (80051d0 <TIM_OC2_SetConfig+0x104>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00b      	beq.n	800517c <TIM_OC2_SetConfig+0xb0>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a1b      	ldr	r2, [pc, #108]	; (80051d4 <TIM_OC2_SetConfig+0x108>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d007      	beq.n	800517c <TIM_OC2_SetConfig+0xb0>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a1a      	ldr	r2, [pc, #104]	; (80051d8 <TIM_OC2_SetConfig+0x10c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d003      	beq.n	800517c <TIM_OC2_SetConfig+0xb0>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a19      	ldr	r2, [pc, #100]	; (80051dc <TIM_OC2_SetConfig+0x110>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d113      	bne.n	80051a4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005182:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800518a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	4313      	orrs	r3, r2
 8005196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	621a      	str	r2, [r3, #32]
}
 80051be:	bf00      	nop
 80051c0:	371c      	adds	r7, #28
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40012c00 	.word	0x40012c00
 80051d0:	40013400 	.word	0x40013400
 80051d4:	40014000 	.word	0x40014000
 80051d8:	40014400 	.word	0x40014400
 80051dc:	40014800 	.word	0x40014800

080051e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800520e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0303 	bic.w	r3, r3, #3
 800521a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	4313      	orrs	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800522c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	021b      	lsls	r3, r3, #8
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	4313      	orrs	r3, r2
 8005238:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a27      	ldr	r2, [pc, #156]	; (80052dc <TIM_OC3_SetConfig+0xfc>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d003      	beq.n	800524a <TIM_OC3_SetConfig+0x6a>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a26      	ldr	r2, [pc, #152]	; (80052e0 <TIM_OC3_SetConfig+0x100>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d10d      	bne.n	8005266 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005250:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	021b      	lsls	r3, r3, #8
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	4313      	orrs	r3, r2
 800525c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005264:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a1c      	ldr	r2, [pc, #112]	; (80052dc <TIM_OC3_SetConfig+0xfc>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d00f      	beq.n	800528e <TIM_OC3_SetConfig+0xae>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a1b      	ldr	r2, [pc, #108]	; (80052e0 <TIM_OC3_SetConfig+0x100>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d00b      	beq.n	800528e <TIM_OC3_SetConfig+0xae>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a1a      	ldr	r2, [pc, #104]	; (80052e4 <TIM_OC3_SetConfig+0x104>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d007      	beq.n	800528e <TIM_OC3_SetConfig+0xae>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a19      	ldr	r2, [pc, #100]	; (80052e8 <TIM_OC3_SetConfig+0x108>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d003      	beq.n	800528e <TIM_OC3_SetConfig+0xae>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a18      	ldr	r2, [pc, #96]	; (80052ec <TIM_OC3_SetConfig+0x10c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d113      	bne.n	80052b6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800529c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	011b      	lsls	r3, r3, #4
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	621a      	str	r2, [r3, #32]
}
 80052d0:	bf00      	nop
 80052d2:	371c      	adds	r7, #28
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	40012c00 	.word	0x40012c00
 80052e0:	40013400 	.word	0x40013400
 80052e4:	40014000 	.word	0x40014000
 80052e8:	40014400 	.word	0x40014400
 80052ec:	40014800 	.word	0x40014800

080052f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800531e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800532a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	021b      	lsls	r3, r3, #8
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4313      	orrs	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800533e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	031b      	lsls	r3, r3, #12
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4313      	orrs	r3, r2
 800534a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a18      	ldr	r2, [pc, #96]	; (80053b0 <TIM_OC4_SetConfig+0xc0>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d00f      	beq.n	8005374 <TIM_OC4_SetConfig+0x84>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a17      	ldr	r2, [pc, #92]	; (80053b4 <TIM_OC4_SetConfig+0xc4>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d00b      	beq.n	8005374 <TIM_OC4_SetConfig+0x84>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a16      	ldr	r2, [pc, #88]	; (80053b8 <TIM_OC4_SetConfig+0xc8>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d007      	beq.n	8005374 <TIM_OC4_SetConfig+0x84>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a15      	ldr	r2, [pc, #84]	; (80053bc <TIM_OC4_SetConfig+0xcc>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d003      	beq.n	8005374 <TIM_OC4_SetConfig+0x84>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a14      	ldr	r2, [pc, #80]	; (80053c0 <TIM_OC4_SetConfig+0xd0>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d109      	bne.n	8005388 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800537a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	019b      	lsls	r3, r3, #6
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	4313      	orrs	r3, r2
 8005386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	621a      	str	r2, [r3, #32]
}
 80053a2:	bf00      	nop
 80053a4:	371c      	adds	r7, #28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	40012c00 	.word	0x40012c00
 80053b4:	40013400 	.word	0x40013400
 80053b8:	40014000 	.word	0x40014000
 80053bc:	40014400 	.word	0x40014400
 80053c0:	40014800 	.word	0x40014800

080053c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	4313      	orrs	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005408:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	041b      	lsls	r3, r3, #16
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	4313      	orrs	r3, r2
 8005414:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a17      	ldr	r2, [pc, #92]	; (8005478 <TIM_OC5_SetConfig+0xb4>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d00f      	beq.n	800543e <TIM_OC5_SetConfig+0x7a>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a16      	ldr	r2, [pc, #88]	; (800547c <TIM_OC5_SetConfig+0xb8>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d00b      	beq.n	800543e <TIM_OC5_SetConfig+0x7a>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a15      	ldr	r2, [pc, #84]	; (8005480 <TIM_OC5_SetConfig+0xbc>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d007      	beq.n	800543e <TIM_OC5_SetConfig+0x7a>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a14      	ldr	r2, [pc, #80]	; (8005484 <TIM_OC5_SetConfig+0xc0>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d003      	beq.n	800543e <TIM_OC5_SetConfig+0x7a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a13      	ldr	r2, [pc, #76]	; (8005488 <TIM_OC5_SetConfig+0xc4>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d109      	bne.n	8005452 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005444:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	021b      	lsls	r3, r3, #8
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	4313      	orrs	r3, r2
 8005450:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	621a      	str	r2, [r3, #32]
}
 800546c:	bf00      	nop
 800546e:	371c      	adds	r7, #28
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	40012c00 	.word	0x40012c00
 800547c:	40013400 	.word	0x40013400
 8005480:	40014000 	.word	0x40014000
 8005484:	40014400 	.word	0x40014400
 8005488:	40014800 	.word	0x40014800

0800548c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800548c:	b480      	push	{r7}
 800548e:	b087      	sub	sp, #28
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	021b      	lsls	r3, r3, #8
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	051b      	lsls	r3, r3, #20
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	4313      	orrs	r3, r2
 80054de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a18      	ldr	r2, [pc, #96]	; (8005544 <TIM_OC6_SetConfig+0xb8>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00f      	beq.n	8005508 <TIM_OC6_SetConfig+0x7c>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a17      	ldr	r2, [pc, #92]	; (8005548 <TIM_OC6_SetConfig+0xbc>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d00b      	beq.n	8005508 <TIM_OC6_SetConfig+0x7c>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a16      	ldr	r2, [pc, #88]	; (800554c <TIM_OC6_SetConfig+0xc0>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d007      	beq.n	8005508 <TIM_OC6_SetConfig+0x7c>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a15      	ldr	r2, [pc, #84]	; (8005550 <TIM_OC6_SetConfig+0xc4>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d003      	beq.n	8005508 <TIM_OC6_SetConfig+0x7c>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a14      	ldr	r2, [pc, #80]	; (8005554 <TIM_OC6_SetConfig+0xc8>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d109      	bne.n	800551c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800550e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	029b      	lsls	r3, r3, #10
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	4313      	orrs	r3, r2
 800551a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	621a      	str	r2, [r3, #32]
}
 8005536:	bf00      	nop
 8005538:	371c      	adds	r7, #28
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40012c00 	.word	0x40012c00
 8005548:	40013400 	.word	0x40013400
 800554c:	40014000 	.word	0x40014000
 8005550:	40014400 	.word	0x40014400
 8005554:	40014800 	.word	0x40014800

08005558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005558:	b480      	push	{r7}
 800555a:	b087      	sub	sp, #28
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	f023 0201 	bic.w	r2, r3, #1
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	011b      	lsls	r3, r3, #4
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	4313      	orrs	r3, r2
 800558c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f023 030a 	bic.w	r3, r3, #10
 8005594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	4313      	orrs	r3, r2
 800559c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	621a      	str	r2, [r3, #32]
}
 80055aa:	bf00      	nop
 80055ac:	371c      	adds	r7, #28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b087      	sub	sp, #28
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	60f8      	str	r0, [r7, #12]
 80055be:	60b9      	str	r1, [r7, #8]
 80055c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	f023 0210 	bic.w	r2, r3, #16
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	031b      	lsls	r3, r3, #12
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	621a      	str	r2, [r3, #32]
}
 800560a:	bf00      	nop
 800560c:	371c      	adds	r7, #28
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005616:	b480      	push	{r7}
 8005618:	b085      	sub	sp, #20
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
 800561e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4313      	orrs	r3, r2
 8005634:	f043 0307 	orr.w	r3, r3, #7
 8005638:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	609a      	str	r2, [r3, #8]
}
 8005640:	bf00      	nop
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
 8005658:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005666:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	021a      	lsls	r2, r3, #8
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	431a      	orrs	r2, r3
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	4313      	orrs	r3, r2
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	4313      	orrs	r3, r2
 8005678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	609a      	str	r2, [r3, #8]
}
 8005680:	bf00      	nop
 8005682:	371c      	adds	r7, #28
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800568c:	b480      	push	{r7}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	f003 031f 	and.w	r3, r3, #31
 800569e:	2201      	movs	r2, #1
 80056a0:	fa02 f303 	lsl.w	r3, r2, r3
 80056a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6a1a      	ldr	r2, [r3, #32]
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	43db      	mvns	r3, r3
 80056ae:	401a      	ands	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6a1a      	ldr	r2, [r3, #32]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f003 031f 	and.w	r3, r3, #31
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	fa01 f303 	lsl.w	r3, r1, r3
 80056c4:	431a      	orrs	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	621a      	str	r2, [r3, #32]
}
 80056ca:	bf00      	nop
 80056cc:	371c      	adds	r7, #28
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
	...

080056d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d101      	bne.n	80056f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056ec:	2302      	movs	r3, #2
 80056ee:	e068      	b.n	80057c2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a2e      	ldr	r2, [pc, #184]	; (80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d004      	beq.n	8005724 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a2d      	ldr	r2, [pc, #180]	; (80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d108      	bne.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800572a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	4313      	orrs	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a1e      	ldr	r2, [pc, #120]	; (80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d01d      	beq.n	8005796 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005762:	d018      	beq.n	8005796 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a1b      	ldr	r2, [pc, #108]	; (80057d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d013      	beq.n	8005796 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a1a      	ldr	r2, [pc, #104]	; (80057dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d00e      	beq.n	8005796 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a18      	ldr	r2, [pc, #96]	; (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d009      	beq.n	8005796 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a13      	ldr	r2, [pc, #76]	; (80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d004      	beq.n	8005796 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a14      	ldr	r2, [pc, #80]	; (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d10c      	bne.n	80057b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800579c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	40012c00 	.word	0x40012c00
 80057d4:	40013400 	.word	0x40013400
 80057d8:	40000400 	.word	0x40000400
 80057dc:	40000800 	.word	0x40000800
 80057e0:	40000c00 	.word	0x40000c00
 80057e4:	40014000 	.word	0x40014000

080057e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e040      	b.n	800587c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d106      	bne.n	8005810 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7fd f86e 	bl	80028ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2224      	movs	r2, #36	; 0x24
 8005814:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0201 	bic.w	r2, r2, #1
 8005824:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f82c 	bl	8005884 <UART_SetConfig>
 800582c:	4603      	mov	r3, r0
 800582e:	2b01      	cmp	r3, #1
 8005830:	d101      	bne.n	8005836 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e022      	b.n	800587c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fad8 	bl	8005df4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005852:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689a      	ldr	r2, [r3, #8]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005862:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0201 	orr.w	r2, r2, #1
 8005872:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fb5f 	bl	8005f38 <UART_CheckIdleState>
 800587a:	4603      	mov	r3, r0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005888:	b08a      	sub	sp, #40	; 0x28
 800588a:	af00      	add	r7, sp, #0
 800588c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800588e:	2300      	movs	r3, #0
 8005890:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	431a      	orrs	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	431a      	orrs	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	69db      	ldr	r3, [r3, #28]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	4ba4      	ldr	r3, [pc, #656]	; (8005b44 <UART_SetConfig+0x2c0>)
 80058b4:	4013      	ands	r3, r2
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	6812      	ldr	r2, [r2, #0]
 80058ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058bc:	430b      	orrs	r3, r1
 80058be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a99      	ldr	r2, [pc, #612]	; (8005b48 <UART_SetConfig+0x2c4>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d004      	beq.n	80058f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ec:	4313      	orrs	r3, r2
 80058ee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005900:	430a      	orrs	r2, r1
 8005902:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a90      	ldr	r2, [pc, #576]	; (8005b4c <UART_SetConfig+0x2c8>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d126      	bne.n	800595c <UART_SetConfig+0xd8>
 800590e:	4b90      	ldr	r3, [pc, #576]	; (8005b50 <UART_SetConfig+0x2cc>)
 8005910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005914:	f003 0303 	and.w	r3, r3, #3
 8005918:	2b03      	cmp	r3, #3
 800591a:	d81b      	bhi.n	8005954 <UART_SetConfig+0xd0>
 800591c:	a201      	add	r2, pc, #4	; (adr r2, 8005924 <UART_SetConfig+0xa0>)
 800591e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005922:	bf00      	nop
 8005924:	08005935 	.word	0x08005935
 8005928:	08005945 	.word	0x08005945
 800592c:	0800593d 	.word	0x0800593d
 8005930:	0800594d 	.word	0x0800594d
 8005934:	2301      	movs	r3, #1
 8005936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800593a:	e116      	b.n	8005b6a <UART_SetConfig+0x2e6>
 800593c:	2302      	movs	r3, #2
 800593e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005942:	e112      	b.n	8005b6a <UART_SetConfig+0x2e6>
 8005944:	2304      	movs	r3, #4
 8005946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800594a:	e10e      	b.n	8005b6a <UART_SetConfig+0x2e6>
 800594c:	2308      	movs	r3, #8
 800594e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005952:	e10a      	b.n	8005b6a <UART_SetConfig+0x2e6>
 8005954:	2310      	movs	r3, #16
 8005956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800595a:	e106      	b.n	8005b6a <UART_SetConfig+0x2e6>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a7c      	ldr	r2, [pc, #496]	; (8005b54 <UART_SetConfig+0x2d0>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d138      	bne.n	80059d8 <UART_SetConfig+0x154>
 8005966:	4b7a      	ldr	r3, [pc, #488]	; (8005b50 <UART_SetConfig+0x2cc>)
 8005968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800596c:	f003 030c 	and.w	r3, r3, #12
 8005970:	2b0c      	cmp	r3, #12
 8005972:	d82d      	bhi.n	80059d0 <UART_SetConfig+0x14c>
 8005974:	a201      	add	r2, pc, #4	; (adr r2, 800597c <UART_SetConfig+0xf8>)
 8005976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597a:	bf00      	nop
 800597c:	080059b1 	.word	0x080059b1
 8005980:	080059d1 	.word	0x080059d1
 8005984:	080059d1 	.word	0x080059d1
 8005988:	080059d1 	.word	0x080059d1
 800598c:	080059c1 	.word	0x080059c1
 8005990:	080059d1 	.word	0x080059d1
 8005994:	080059d1 	.word	0x080059d1
 8005998:	080059d1 	.word	0x080059d1
 800599c:	080059b9 	.word	0x080059b9
 80059a0:	080059d1 	.word	0x080059d1
 80059a4:	080059d1 	.word	0x080059d1
 80059a8:	080059d1 	.word	0x080059d1
 80059ac:	080059c9 	.word	0x080059c9
 80059b0:	2300      	movs	r3, #0
 80059b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059b6:	e0d8      	b.n	8005b6a <UART_SetConfig+0x2e6>
 80059b8:	2302      	movs	r3, #2
 80059ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059be:	e0d4      	b.n	8005b6a <UART_SetConfig+0x2e6>
 80059c0:	2304      	movs	r3, #4
 80059c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059c6:	e0d0      	b.n	8005b6a <UART_SetConfig+0x2e6>
 80059c8:	2308      	movs	r3, #8
 80059ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ce:	e0cc      	b.n	8005b6a <UART_SetConfig+0x2e6>
 80059d0:	2310      	movs	r3, #16
 80059d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059d6:	e0c8      	b.n	8005b6a <UART_SetConfig+0x2e6>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a5e      	ldr	r2, [pc, #376]	; (8005b58 <UART_SetConfig+0x2d4>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d125      	bne.n	8005a2e <UART_SetConfig+0x1aa>
 80059e2:	4b5b      	ldr	r3, [pc, #364]	; (8005b50 <UART_SetConfig+0x2cc>)
 80059e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80059ec:	2b30      	cmp	r3, #48	; 0x30
 80059ee:	d016      	beq.n	8005a1e <UART_SetConfig+0x19a>
 80059f0:	2b30      	cmp	r3, #48	; 0x30
 80059f2:	d818      	bhi.n	8005a26 <UART_SetConfig+0x1a2>
 80059f4:	2b20      	cmp	r3, #32
 80059f6:	d00a      	beq.n	8005a0e <UART_SetConfig+0x18a>
 80059f8:	2b20      	cmp	r3, #32
 80059fa:	d814      	bhi.n	8005a26 <UART_SetConfig+0x1a2>
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <UART_SetConfig+0x182>
 8005a00:	2b10      	cmp	r3, #16
 8005a02:	d008      	beq.n	8005a16 <UART_SetConfig+0x192>
 8005a04:	e00f      	b.n	8005a26 <UART_SetConfig+0x1a2>
 8005a06:	2300      	movs	r3, #0
 8005a08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a0c:	e0ad      	b.n	8005b6a <UART_SetConfig+0x2e6>
 8005a0e:	2302      	movs	r3, #2
 8005a10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a14:	e0a9      	b.n	8005b6a <UART_SetConfig+0x2e6>
 8005a16:	2304      	movs	r3, #4
 8005a18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a1c:	e0a5      	b.n	8005b6a <UART_SetConfig+0x2e6>
 8005a1e:	2308      	movs	r3, #8
 8005a20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a24:	e0a1      	b.n	8005b6a <UART_SetConfig+0x2e6>
 8005a26:	2310      	movs	r3, #16
 8005a28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a2c:	e09d      	b.n	8005b6a <UART_SetConfig+0x2e6>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a4a      	ldr	r2, [pc, #296]	; (8005b5c <UART_SetConfig+0x2d8>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d125      	bne.n	8005a84 <UART_SetConfig+0x200>
 8005a38:	4b45      	ldr	r3, [pc, #276]	; (8005b50 <UART_SetConfig+0x2cc>)
 8005a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a42:	2bc0      	cmp	r3, #192	; 0xc0
 8005a44:	d016      	beq.n	8005a74 <UART_SetConfig+0x1f0>
 8005a46:	2bc0      	cmp	r3, #192	; 0xc0
 8005a48:	d818      	bhi.n	8005a7c <UART_SetConfig+0x1f8>
 8005a4a:	2b80      	cmp	r3, #128	; 0x80
 8005a4c:	d00a      	beq.n	8005a64 <UART_SetConfig+0x1e0>
 8005a4e:	2b80      	cmp	r3, #128	; 0x80
 8005a50:	d814      	bhi.n	8005a7c <UART_SetConfig+0x1f8>
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d002      	beq.n	8005a5c <UART_SetConfig+0x1d8>
 8005a56:	2b40      	cmp	r3, #64	; 0x40
 8005a58:	d008      	beq.n	8005a6c <UART_SetConfig+0x1e8>
 8005a5a:	e00f      	b.n	8005a7c <UART_SetConfig+0x1f8>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a62:	e082      	b.n	8005b6a <UART_SetConfig+0x2e6>
 8005a64:	2302      	movs	r3, #2
 8005a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a6a:	e07e      	b.n	8005b6a <UART_SetConfig+0x2e6>
 8005a6c:	2304      	movs	r3, #4
 8005a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a72:	e07a      	b.n	8005b6a <UART_SetConfig+0x2e6>
 8005a74:	2308      	movs	r3, #8
 8005a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a7a:	e076      	b.n	8005b6a <UART_SetConfig+0x2e6>
 8005a7c:	2310      	movs	r3, #16
 8005a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a82:	e072      	b.n	8005b6a <UART_SetConfig+0x2e6>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a35      	ldr	r2, [pc, #212]	; (8005b60 <UART_SetConfig+0x2dc>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d12a      	bne.n	8005ae4 <UART_SetConfig+0x260>
 8005a8e:	4b30      	ldr	r3, [pc, #192]	; (8005b50 <UART_SetConfig+0x2cc>)
 8005a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a9c:	d01a      	beq.n	8005ad4 <UART_SetConfig+0x250>
 8005a9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005aa2:	d81b      	bhi.n	8005adc <UART_SetConfig+0x258>
 8005aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aa8:	d00c      	beq.n	8005ac4 <UART_SetConfig+0x240>
 8005aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aae:	d815      	bhi.n	8005adc <UART_SetConfig+0x258>
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <UART_SetConfig+0x238>
 8005ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ab8:	d008      	beq.n	8005acc <UART_SetConfig+0x248>
 8005aba:	e00f      	b.n	8005adc <UART_SetConfig+0x258>
 8005abc:	2300      	movs	r3, #0
 8005abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ac2:	e052      	b.n	8005b6a <UART_SetConfig+0x2e6>
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aca:	e04e      	b.n	8005b6a <UART_SetConfig+0x2e6>
 8005acc:	2304      	movs	r3, #4
 8005ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ad2:	e04a      	b.n	8005b6a <UART_SetConfig+0x2e6>
 8005ad4:	2308      	movs	r3, #8
 8005ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ada:	e046      	b.n	8005b6a <UART_SetConfig+0x2e6>
 8005adc:	2310      	movs	r3, #16
 8005ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ae2:	e042      	b.n	8005b6a <UART_SetConfig+0x2e6>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a17      	ldr	r2, [pc, #92]	; (8005b48 <UART_SetConfig+0x2c4>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d13a      	bne.n	8005b64 <UART_SetConfig+0x2e0>
 8005aee:	4b18      	ldr	r3, [pc, #96]	; (8005b50 <UART_SetConfig+0x2cc>)
 8005af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005af8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005afc:	d01a      	beq.n	8005b34 <UART_SetConfig+0x2b0>
 8005afe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b02:	d81b      	bhi.n	8005b3c <UART_SetConfig+0x2b8>
 8005b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b08:	d00c      	beq.n	8005b24 <UART_SetConfig+0x2a0>
 8005b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b0e:	d815      	bhi.n	8005b3c <UART_SetConfig+0x2b8>
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d003      	beq.n	8005b1c <UART_SetConfig+0x298>
 8005b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b18:	d008      	beq.n	8005b2c <UART_SetConfig+0x2a8>
 8005b1a:	e00f      	b.n	8005b3c <UART_SetConfig+0x2b8>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b22:	e022      	b.n	8005b6a <UART_SetConfig+0x2e6>
 8005b24:	2302      	movs	r3, #2
 8005b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b2a:	e01e      	b.n	8005b6a <UART_SetConfig+0x2e6>
 8005b2c:	2304      	movs	r3, #4
 8005b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b32:	e01a      	b.n	8005b6a <UART_SetConfig+0x2e6>
 8005b34:	2308      	movs	r3, #8
 8005b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b3a:	e016      	b.n	8005b6a <UART_SetConfig+0x2e6>
 8005b3c:	2310      	movs	r3, #16
 8005b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b42:	e012      	b.n	8005b6a <UART_SetConfig+0x2e6>
 8005b44:	efff69f3 	.word	0xefff69f3
 8005b48:	40008000 	.word	0x40008000
 8005b4c:	40013800 	.word	0x40013800
 8005b50:	40021000 	.word	0x40021000
 8005b54:	40004400 	.word	0x40004400
 8005b58:	40004800 	.word	0x40004800
 8005b5c:	40004c00 	.word	0x40004c00
 8005b60:	40005000 	.word	0x40005000
 8005b64:	2310      	movs	r3, #16
 8005b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a9f      	ldr	r2, [pc, #636]	; (8005dec <UART_SetConfig+0x568>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d17a      	bne.n	8005c6a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b78:	2b08      	cmp	r3, #8
 8005b7a:	d824      	bhi.n	8005bc6 <UART_SetConfig+0x342>
 8005b7c:	a201      	add	r2, pc, #4	; (adr r2, 8005b84 <UART_SetConfig+0x300>)
 8005b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b82:	bf00      	nop
 8005b84:	08005ba9 	.word	0x08005ba9
 8005b88:	08005bc7 	.word	0x08005bc7
 8005b8c:	08005bb1 	.word	0x08005bb1
 8005b90:	08005bc7 	.word	0x08005bc7
 8005b94:	08005bb7 	.word	0x08005bb7
 8005b98:	08005bc7 	.word	0x08005bc7
 8005b9c:	08005bc7 	.word	0x08005bc7
 8005ba0:	08005bc7 	.word	0x08005bc7
 8005ba4:	08005bbf 	.word	0x08005bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ba8:	f7fe f882 	bl	8003cb0 <HAL_RCC_GetPCLK1Freq>
 8005bac:	61f8      	str	r0, [r7, #28]
        break;
 8005bae:	e010      	b.n	8005bd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bb0:	4b8f      	ldr	r3, [pc, #572]	; (8005df0 <UART_SetConfig+0x56c>)
 8005bb2:	61fb      	str	r3, [r7, #28]
        break;
 8005bb4:	e00d      	b.n	8005bd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bb6:	f7fd ffe3 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 8005bba:	61f8      	str	r0, [r7, #28]
        break;
 8005bbc:	e009      	b.n	8005bd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bc2:	61fb      	str	r3, [r7, #28]
        break;
 8005bc4:	e005      	b.n	8005bd2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005bd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 80fb 	beq.w	8005dd0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	4613      	mov	r3, r2
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	4413      	add	r3, r2
 8005be4:	69fa      	ldr	r2, [r7, #28]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d305      	bcc.n	8005bf6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005bf0:	69fa      	ldr	r2, [r7, #28]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d903      	bls.n	8005bfe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005bfc:	e0e8      	b.n	8005dd0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	2200      	movs	r2, #0
 8005c02:	461c      	mov	r4, r3
 8005c04:	4615      	mov	r5, r2
 8005c06:	f04f 0200 	mov.w	r2, #0
 8005c0a:	f04f 0300 	mov.w	r3, #0
 8005c0e:	022b      	lsls	r3, r5, #8
 8005c10:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005c14:	0222      	lsls	r2, r4, #8
 8005c16:	68f9      	ldr	r1, [r7, #12]
 8005c18:	6849      	ldr	r1, [r1, #4]
 8005c1a:	0849      	lsrs	r1, r1, #1
 8005c1c:	2000      	movs	r0, #0
 8005c1e:	4688      	mov	r8, r1
 8005c20:	4681      	mov	r9, r0
 8005c22:	eb12 0a08 	adds.w	sl, r2, r8
 8005c26:	eb43 0b09 	adc.w	fp, r3, r9
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	603b      	str	r3, [r7, #0]
 8005c32:	607a      	str	r2, [r7, #4]
 8005c34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c38:	4650      	mov	r0, sl
 8005c3a:	4659      	mov	r1, fp
 8005c3c:	f7fa ff3a 	bl	8000ab4 <__aeabi_uldivmod>
 8005c40:	4602      	mov	r2, r0
 8005c42:	460b      	mov	r3, r1
 8005c44:	4613      	mov	r3, r2
 8005c46:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c4e:	d308      	bcc.n	8005c62 <UART_SetConfig+0x3de>
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c56:	d204      	bcs.n	8005c62 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	60da      	str	r2, [r3, #12]
 8005c60:	e0b6      	b.n	8005dd0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c68:	e0b2      	b.n	8005dd0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c72:	d15e      	bne.n	8005d32 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005c74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	d828      	bhi.n	8005cce <UART_SetConfig+0x44a>
 8005c7c:	a201      	add	r2, pc, #4	; (adr r2, 8005c84 <UART_SetConfig+0x400>)
 8005c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c82:	bf00      	nop
 8005c84:	08005ca9 	.word	0x08005ca9
 8005c88:	08005cb1 	.word	0x08005cb1
 8005c8c:	08005cb9 	.word	0x08005cb9
 8005c90:	08005ccf 	.word	0x08005ccf
 8005c94:	08005cbf 	.word	0x08005cbf
 8005c98:	08005ccf 	.word	0x08005ccf
 8005c9c:	08005ccf 	.word	0x08005ccf
 8005ca0:	08005ccf 	.word	0x08005ccf
 8005ca4:	08005cc7 	.word	0x08005cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ca8:	f7fe f802 	bl	8003cb0 <HAL_RCC_GetPCLK1Freq>
 8005cac:	61f8      	str	r0, [r7, #28]
        break;
 8005cae:	e014      	b.n	8005cda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cb0:	f7fe f814 	bl	8003cdc <HAL_RCC_GetPCLK2Freq>
 8005cb4:	61f8      	str	r0, [r7, #28]
        break;
 8005cb6:	e010      	b.n	8005cda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cb8:	4b4d      	ldr	r3, [pc, #308]	; (8005df0 <UART_SetConfig+0x56c>)
 8005cba:	61fb      	str	r3, [r7, #28]
        break;
 8005cbc:	e00d      	b.n	8005cda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cbe:	f7fd ff5f 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 8005cc2:	61f8      	str	r0, [r7, #28]
        break;
 8005cc4:	e009      	b.n	8005cda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cca:	61fb      	str	r3, [r7, #28]
        break;
 8005ccc:	e005      	b.n	8005cda <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005cd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d077      	beq.n	8005dd0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	005a      	lsls	r2, r3, #1
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	085b      	lsrs	r3, r3, #1
 8005cea:	441a      	add	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	2b0f      	cmp	r3, #15
 8005cfa:	d916      	bls.n	8005d2a <UART_SetConfig+0x4a6>
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d02:	d212      	bcs.n	8005d2a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	f023 030f 	bic.w	r3, r3, #15
 8005d0c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	085b      	lsrs	r3, r3, #1
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	f003 0307 	and.w	r3, r3, #7
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	8afb      	ldrh	r3, [r7, #22]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	8afa      	ldrh	r2, [r7, #22]
 8005d26:	60da      	str	r2, [r3, #12]
 8005d28:	e052      	b.n	8005dd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005d30:	e04e      	b.n	8005dd0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d36:	2b08      	cmp	r3, #8
 8005d38:	d827      	bhi.n	8005d8a <UART_SetConfig+0x506>
 8005d3a:	a201      	add	r2, pc, #4	; (adr r2, 8005d40 <UART_SetConfig+0x4bc>)
 8005d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d40:	08005d65 	.word	0x08005d65
 8005d44:	08005d6d 	.word	0x08005d6d
 8005d48:	08005d75 	.word	0x08005d75
 8005d4c:	08005d8b 	.word	0x08005d8b
 8005d50:	08005d7b 	.word	0x08005d7b
 8005d54:	08005d8b 	.word	0x08005d8b
 8005d58:	08005d8b 	.word	0x08005d8b
 8005d5c:	08005d8b 	.word	0x08005d8b
 8005d60:	08005d83 	.word	0x08005d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d64:	f7fd ffa4 	bl	8003cb0 <HAL_RCC_GetPCLK1Freq>
 8005d68:	61f8      	str	r0, [r7, #28]
        break;
 8005d6a:	e014      	b.n	8005d96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d6c:	f7fd ffb6 	bl	8003cdc <HAL_RCC_GetPCLK2Freq>
 8005d70:	61f8      	str	r0, [r7, #28]
        break;
 8005d72:	e010      	b.n	8005d96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d74:	4b1e      	ldr	r3, [pc, #120]	; (8005df0 <UART_SetConfig+0x56c>)
 8005d76:	61fb      	str	r3, [r7, #28]
        break;
 8005d78:	e00d      	b.n	8005d96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d7a:	f7fd ff01 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 8005d7e:	61f8      	str	r0, [r7, #28]
        break;
 8005d80:	e009      	b.n	8005d96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d86:	61fb      	str	r3, [r7, #28]
        break;
 8005d88:	e005      	b.n	8005d96 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d94:	bf00      	nop
    }

    if (pclk != 0U)
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d019      	beq.n	8005dd0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	085a      	lsrs	r2, r3, #1
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	441a      	add	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	2b0f      	cmp	r3, #15
 8005db4:	d909      	bls.n	8005dca <UART_SetConfig+0x546>
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dbc:	d205      	bcs.n	8005dca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	60da      	str	r2, [r3, #12]
 8005dc8:	e002      	b.n	8005dd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005ddc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3728      	adds	r7, #40	; 0x28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dea:	bf00      	nop
 8005dec:	40008000 	.word	0x40008000
 8005df0:	00f42400 	.word	0x00f42400

08005df4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00a      	beq.n	8005e1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00a      	beq.n	8005e40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	f003 0304 	and.w	r3, r3, #4
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	f003 0310 	and.w	r3, r3, #16
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00a      	beq.n	8005ea6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	f003 0320 	and.w	r3, r3, #32
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00a      	beq.n	8005ec8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d01a      	beq.n	8005f0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ef2:	d10a      	bne.n	8005f0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00a      	beq.n	8005f2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	605a      	str	r2, [r3, #4]
  }
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af02      	add	r7, sp, #8
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f48:	f7fc fe02 	bl	8002b50 <HAL_GetTick>
 8005f4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0308 	and.w	r3, r3, #8
 8005f58:	2b08      	cmp	r3, #8
 8005f5a:	d10e      	bne.n	8005f7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f82d 	bl	8005fca <UART_WaitOnFlagUntilTimeout>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e023      	b.n	8005fc2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	d10e      	bne.n	8005fa6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f817 	bl	8005fca <UART_WaitOnFlagUntilTimeout>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e00d      	b.n	8005fc2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2220      	movs	r2, #32
 8005faa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b09c      	sub	sp, #112	; 0x70
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	60f8      	str	r0, [r7, #12]
 8005fd2:	60b9      	str	r1, [r7, #8]
 8005fd4:	603b      	str	r3, [r7, #0]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fda:	e0a5      	b.n	8006128 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe2:	f000 80a1 	beq.w	8006128 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fe6:	f7fc fdb3 	bl	8002b50 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d302      	bcc.n	8005ffc <UART_WaitOnFlagUntilTimeout+0x32>
 8005ff6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d13e      	bne.n	800607a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800600a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800600c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006010:	667b      	str	r3, [r7, #100]	; 0x64
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	461a      	mov	r2, r3
 8006018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800601a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800601c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006020:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006022:	e841 2300 	strex	r3, r2, [r1]
 8006026:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1e6      	bne.n	8005ffc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3308      	adds	r3, #8
 8006034:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006038:	e853 3f00 	ldrex	r3, [r3]
 800603c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800603e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006040:	f023 0301 	bic.w	r3, r3, #1
 8006044:	663b      	str	r3, [r7, #96]	; 0x60
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3308      	adds	r3, #8
 800604c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800604e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006050:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006052:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006054:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006056:	e841 2300 	strex	r3, r2, [r1]
 800605a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800605c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1e5      	bne.n	800602e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2220      	movs	r2, #32
 8006066:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2220      	movs	r2, #32
 800606c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e067      	b.n	800614a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	2b00      	cmp	r3, #0
 8006086:	d04f      	beq.n	8006128 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006092:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006096:	d147      	bne.n	8006128 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060a0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060aa:	e853 3f00 	ldrex	r3, [r3]
 80060ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	461a      	mov	r2, r3
 80060be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c0:	637b      	str	r3, [r7, #52]	; 0x34
 80060c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060c8:	e841 2300 	strex	r3, r2, [r1]
 80060cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1e6      	bne.n	80060a2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	3308      	adds	r3, #8
 80060da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	e853 3f00 	ldrex	r3, [r3]
 80060e2:	613b      	str	r3, [r7, #16]
   return(result);
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f023 0301 	bic.w	r3, r3, #1
 80060ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3308      	adds	r3, #8
 80060f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80060f4:	623a      	str	r2, [r7, #32]
 80060f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f8:	69f9      	ldr	r1, [r7, #28]
 80060fa:	6a3a      	ldr	r2, [r7, #32]
 80060fc:	e841 2300 	strex	r3, r2, [r1]
 8006100:	61bb      	str	r3, [r7, #24]
   return(result);
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1e5      	bne.n	80060d4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2220      	movs	r2, #32
 800610c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2220      	movs	r2, #32
 8006112:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2220      	movs	r2, #32
 8006118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e010      	b.n	800614a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	69da      	ldr	r2, [r3, #28]
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	4013      	ands	r3, r2
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	429a      	cmp	r2, r3
 8006136:	bf0c      	ite	eq
 8006138:	2301      	moveq	r3, #1
 800613a:	2300      	movne	r3, #0
 800613c:	b2db      	uxtb	r3, r3
 800613e:	461a      	mov	r2, r3
 8006140:	79fb      	ldrb	r3, [r7, #7]
 8006142:	429a      	cmp	r2, r3
 8006144:	f43f af4a 	beq.w	8005fdc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3770      	adds	r7, #112	; 0x70
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
	...

08006154 <__libc_init_array>:
 8006154:	b570      	push	{r4, r5, r6, lr}
 8006156:	4d0d      	ldr	r5, [pc, #52]	; (800618c <__libc_init_array+0x38>)
 8006158:	4c0d      	ldr	r4, [pc, #52]	; (8006190 <__libc_init_array+0x3c>)
 800615a:	1b64      	subs	r4, r4, r5
 800615c:	10a4      	asrs	r4, r4, #2
 800615e:	2600      	movs	r6, #0
 8006160:	42a6      	cmp	r6, r4
 8006162:	d109      	bne.n	8006178 <__libc_init_array+0x24>
 8006164:	4d0b      	ldr	r5, [pc, #44]	; (8006194 <__libc_init_array+0x40>)
 8006166:	4c0c      	ldr	r4, [pc, #48]	; (8006198 <__libc_init_array+0x44>)
 8006168:	f000 f820 	bl	80061ac <_init>
 800616c:	1b64      	subs	r4, r4, r5
 800616e:	10a4      	asrs	r4, r4, #2
 8006170:	2600      	movs	r6, #0
 8006172:	42a6      	cmp	r6, r4
 8006174:	d105      	bne.n	8006182 <__libc_init_array+0x2e>
 8006176:	bd70      	pop	{r4, r5, r6, pc}
 8006178:	f855 3b04 	ldr.w	r3, [r5], #4
 800617c:	4798      	blx	r3
 800617e:	3601      	adds	r6, #1
 8006180:	e7ee      	b.n	8006160 <__libc_init_array+0xc>
 8006182:	f855 3b04 	ldr.w	r3, [r5], #4
 8006186:	4798      	blx	r3
 8006188:	3601      	adds	r6, #1
 800618a:	e7f2      	b.n	8006172 <__libc_init_array+0x1e>
 800618c:	08006214 	.word	0x08006214
 8006190:	08006214 	.word	0x08006214
 8006194:	08006214 	.word	0x08006214
 8006198:	08006218 	.word	0x08006218

0800619c <memset>:
 800619c:	4402      	add	r2, r0
 800619e:	4603      	mov	r3, r0
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d100      	bne.n	80061a6 <memset+0xa>
 80061a4:	4770      	bx	lr
 80061a6:	f803 1b01 	strb.w	r1, [r3], #1
 80061aa:	e7f9      	b.n	80061a0 <memset+0x4>

080061ac <_init>:
 80061ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ae:	bf00      	nop
 80061b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061b2:	bc08      	pop	{r3}
 80061b4:	469e      	mov	lr, r3
 80061b6:	4770      	bx	lr

080061b8 <_fini>:
 80061b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ba:	bf00      	nop
 80061bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061be:	bc08      	pop	{r3}
 80061c0:	469e      	mov	lr, r3
 80061c2:	4770      	bx	lr
